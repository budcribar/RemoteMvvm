// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

#nullable enable
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Grpc.Core;
using Grpc.Net.Client;
using SampleApp.ViewModels.Protos;
using Google.Protobuf.WellKnownTypes;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Diagnostics;
using System.ComponentModel;
using Generated.ViewModels;

namespace SampleApp.ViewModels.RemoteClients
{
    public partial class SampleViewModelRemoteClient : ObservableObject, IDisposable
    {
        private readonly SampleApp.ViewModels.Protos.CounterService.CounterServiceClient _grpcClient;
        private readonly SynchronizationContext? _syncContext;
        private CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _isInitialized = false;
        private bool _isDisposed = false;
        private readonly string _clientId = Guid.NewGuid().ToString();
        private bool _suppressLocalUpdates = false;

        private string _connectionStatus = "Unknown";
        public string ConnectionStatus
        {
            get => _connectionStatus;
            private set => SetProperty(ref _connectionStatus, value);
        }

        private string _name = default!;
        public string Name
        {
            get => _name;
            set
            {
                if (SetProperty(ref _name, value) && _isInitialized)
                {
                    _ = UpdatePropertyValueAsync("Name", value);
                }
            }
        }

        private int _count = default!;
        public int Count
        {
            get => _count;
            set
            {
                if (SetProperty(ref _count, value) && _isInitialized)
                {
                    _ = UpdatePropertyValueAsync("Count", value);
                }
            }
        }

        public IRelayCommand IncrementCountCommand { get; }
        public IAsyncRelayCommand<int> DelayedIncrementCommand { get; }
        public IRelayCommand<string?> SetNameToValueCommand { get; }

        public SampleViewModelRemoteClient(SampleApp.ViewModels.Protos.CounterService.CounterServiceClient grpcClient)
        {
            _grpcClient = grpcClient ?? throw new ArgumentNullException(nameof(grpcClient));
            _syncContext = SynchronizationContext.Current;
            IncrementCountCommand = new RelayCommand(RemoteExecute_IncrementCount);
            DelayedIncrementCommand = new AsyncRelayCommand<int>(RemoteExecute_DelayedIncrementAsync);
            SetNameToValueCommand = new RelayCommand<string?>(RemoteExecute_SetNameToValue);
        }

        /// <summary>
        /// Updates a property value on the server. Called automatically when bindable properties are changed locally.
        /// </summary>
        /// <param name="propertyName">The name of the property to update</param>
        /// <param name="value">The new value to set</param>
        public async Task UpdatePropertyValueAsync(string propertyPath, object? value)
        {
            if (!_isInitialized || _isDisposed)
            {
                Debug.WriteLine($"[ClientProxy:SampleViewModel] UpdatePropertyValueAsync for {propertyPath} skipped - not initialized or disposed");
                return;
            }

            try
            {
                Debug.WriteLine($"[ClientProxy:SampleViewModel] Updating server property {propertyPath} = {value}");
                var topLevel = propertyPath.Split(new[] {'.','['}, 2)[0];
                var request = new SampleApp.ViewModels.Protos.UpdatePropertyValueRequest
                {
                    PropertyName = topLevel,
                    PropertyPath = propertyPath,
                    ClientId = _clientId,
                    NewValue = PackValueToAny(value)
                };

                var response = await _grpcClient.UpdatePropertyValueAsync(request, cancellationToken: _cts.Token);
                Debug.WriteLine($"[ClientProxy:SampleViewModel] Property {propertyPath} updated successfully on server");
            }
            catch (RpcException ex)
            {
                Debug.WriteLine($"[ClientProxy:SampleViewModel] Error updating property {propertyPath}: {ex.Status.StatusCode} - {ex.Status.Detail}");
            }
            catch (OperationCanceledException)
            {
                Debug.WriteLine($"[ClientProxy:SampleViewModel] Property update {propertyPath} cancelled");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ClientProxy:SampleViewModel] Unexpected error updating property {propertyPath}: {ex.Message}");
            }
        }

        /// <summary>
        /// Packs a .NET value into a protobuf Any message for transmission to the server.
        /// </summary>
        private static Any PackValueToAny(object? value)
        {
            return value switch
            {
                null => Any.Pack(new StringValue { Value = "" }),
                string s => Any.Pack(new StringValue { Value = s }),
                int i => Any.Pack(new Int32Value { Value = i }),
                long l => Any.Pack(new Int64Value { Value = l }),
                uint ui => Any.Pack(new UInt32Value { Value = ui }),
                ulong ul => Any.Pack(new UInt64Value { Value = ul }),
                float f => Any.Pack(new FloatValue { Value = f }),
                double d => Any.Pack(new DoubleValue { Value = d }),
                bool b => Any.Pack(new BoolValue { Value = b }),
                DateTime dt => Any.Pack(Timestamp.FromDateTime(dt.Kind == DateTimeKind.Unspecified ? DateTime.SpecifyKind(dt, DateTimeKind.Utc) : dt.ToUniversalTime())),
                DateTimeOffset dto => Any.Pack(Timestamp.FromDateTime(dto.UtcDateTime)),
                TimeSpan ts => Any.Pack(Google.Protobuf.WellKnownTypes.Duration.FromTimeSpan(ts)),
                Guid g => Any.Pack(new StringValue { Value = g.ToString() }),
                decimal dec => Any.Pack(new StringValue { Value = dec.ToString() }),
                char c => Any.Pack(new StringValue { Value = c.ToString() }),
                System.Enum e => Any.Pack(new Int32Value { Value = Convert.ToInt32(e) }),
                _ => Any.Pack(new StringValue { Value = value?.ToString() ?? "" })
            };
        }

        private static object? UnpackAny(Any value)
        {
            if (value.Is(StringValue.Descriptor)) return value.Unpack<StringValue>().Value;
            if (value.Is(Int32Value.Descriptor)) return value.Unpack<Int32Value>().Value;
            if (value.Is(Int64Value.Descriptor)) return value.Unpack<Int64Value>().Value;
            if (value.Is(UInt32Value.Descriptor)) return value.Unpack<UInt32Value>().Value;
            if (value.Is(UInt64Value.Descriptor)) return value.Unpack<UInt64Value>().Value;
            if (value.Is(FloatValue.Descriptor)) return value.Unpack<FloatValue>().Value;
            if (value.Is(DoubleValue.Descriptor)) return value.Unpack<DoubleValue>().Value;
            if (value.Is(BoolValue.Descriptor)) return value.Unpack<BoolValue>().Value;
            if (value.Is(Timestamp.Descriptor)) return value.Unpack<Timestamp>().ToDateTime();
            if (value.Is(Google.Protobuf.WellKnownTypes.Duration.Descriptor)) return value.Unpack<Google.Protobuf.WellKnownTypes.Duration>().ToTimeSpan();
            return null;
        }

        private static void SetValueByPath(object target, string path, object? newValue)
        {
            var segments = path.Split('.');
            object? current = target;

            for (int i = 0; i < segments.Length; i++)
            {
                var part = segments[i];
                int bracket = part.IndexOf('[');
                if (bracket >= 0)
                {
                    var propName = part[..bracket];
                    var prop = current?.GetType().GetProperty(propName);
                    current = prop?.GetValue(current);
                    var remainder = part[bracket..];
                    while (remainder.StartsWith("["))
                    {
                        var end = remainder.IndexOf(']', 1);
                        if (end < 0) return;
                        var indexStr = remainder[1..end];
                        remainder = remainder[(end + 1)..];

                        if (current is System.Collections.IList list && int.TryParse(indexStr, out int idx))
                        {
                            if (idx < 0 || idx >= list.Count) return;
                            if (i == segments.Length - 1 && remainder.Length == 0)
                            {
                                list[idx] = newValue;
                                if (target is SampleViewModelRemoteClient rc)
                                {
                                    rc.AttachLocalPropertyChangedHandlers(list[idx], path);
                                }
                                return;
                            }
                            current = list[idx];
                        }
                        else if (current is System.Collections.IDictionary dict)
                        {
                            var key = indexStr;
                            if (i == segments.Length - 1 && remainder.Length == 0)
                            {
                                dict[key] = newValue;
                                if (target is SampleViewModelRemoteClient rc)
                                {
                                    rc.AttachLocalPropertyChangedHandlers(newValue, path);
                                }
                                return;
                            }
                            current = dict[key];
                        }
                        else
                        {
                            return;
                        }

                        if (current == null) return;
                    }
                }
                else
                {
                    if (i == segments.Length - 1)
                    {
                        var prop = current?.GetType().GetProperty(part);
                        prop?.SetValue(current, newValue);
                        if (target is SampleViewModelRemoteClient rc)
                        {
                            rc.AttachLocalPropertyChangedHandlers(newValue, path);
                        }
                        return;
                    }
                    else
                    {
                        var prop = current?.GetType().GetProperty(part);
                        current = prop?.GetValue(current);
                    }
                }

                if (current == null) return;
            }
        }

        private void AttachLocalPropertyChangedHandlers(object? obj, string prefix)
        {
            if (obj == null) return;

            var isRoot = ReferenceEquals(obj, this);

            if (!isRoot && obj is INotifyPropertyChanged inpc)
            {
                inpc.PropertyChanged += async (s, e) =>
                {
                    var prop = s?.GetType().GetProperty(e.PropertyName);
                    if (prop == null) return;
                    var value = prop.GetValue(s);
                    var path = string.IsNullOrEmpty(prefix) ? e.PropertyName : prefix + "." + e.PropertyName;
                    OnPropertyChanged(path);
                    if (_suppressLocalUpdates) return;
                    await UpdatePropertyValueAsync(path, value);
                };
            }

            var type = obj.GetType();
            if (type.IsValueType || obj is string)
            {
                return;
            }

            if (obj is System.Collections.IEnumerable enumerable && obj is not string)
            {
                int index = 0;
                foreach (var item in enumerable)
                {
                    var childPrefix = string.IsNullOrEmpty(prefix) ? $"[{index}]" : prefix + $"[{index}]";
                    AttachLocalPropertyChangedHandlers(item, childPrefix);
                    index++;
                }
                return;
            }

            foreach (var p in type.GetProperties())
            {
                if (p.GetIndexParameters().Length > 0) continue;
                var val = p.GetValue(obj);
                var childPrefix = string.IsNullOrEmpty(prefix) ? p.Name : prefix + "." + p.Name;
                AttachLocalPropertyChangedHandlers(val, childPrefix);
            }
        }

        private async Task StartPingLoopAsync()
        {
            string lastStatus = ConnectionStatus;
            while (!_isDisposed)
            {
                try
                {
                    var response = await _grpcClient.PingAsync(new Google.Protobuf.WellKnownTypes.Empty(), cancellationToken: _cts.Token);
                    if (response.Status == SampleApp.ViewModels.Protos.ConnectionStatus.Connected)
                    {
                        if (lastStatus != "Connected")
                        {
                            try
                            {
                                var state = await _grpcClient.GetStateAsync(new Empty(), cancellationToken: _cts.Token);
                                this.Name = state.Name;
                                this.Count = state.Count;
                                Debug.WriteLine("[ClientProxy] State re-synced after reconnect.");
                            }
                            catch (Exception ex)
                            {
                                Debug.WriteLine($"[ClientProxy] Error re-syncing state after reconnect: {ex.Message}");
                            }
                        }
                        ConnectionStatus = "Connected";
                        lastStatus = "Connected";
                    }
                    else
                    {
                        ConnectionStatus = "Disconnected";
                        lastStatus = "Disconnected";
                    }
                }
                catch (Exception ex)
                {
                    ConnectionStatus = "Disconnected";
                    lastStatus = "Disconnected";
                    Debug.WriteLine($"[ClientProxy] Ping failed: {ex.Message}. Attempting to reconnect...");
                }
                await Task.Delay(5000);
            }
        }

        public async Task InitializeRemoteAsync(CancellationToken cancellationToken = default)
        {
            if (_isInitialized || _isDisposed) return;
            Debug.WriteLine("[SampleViewModelRemoteClient] Initializing...");
            try
            {
                using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cts.Token);
                var state = await _grpcClient.GetStateAsync(new Empty(), cancellationToken: linkedCts.Token);
                Debug.WriteLine("[SampleViewModelRemoteClient] Initial state received.");
                _suppressLocalUpdates = true;
                this.Name = state.Name;
                this.Count = state.Count;
                _suppressLocalUpdates = false;
                AttachLocalPropertyChangedHandlers(this, string.Empty);
                _isInitialized = true;
                Debug.WriteLine("[SampleViewModelRemoteClient] Initialized successfully.");
                StartListeningToPropertyChanges(_cts.Token);
                _ = StartPingLoopAsync();
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:SampleViewModel] Failed to initialize: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:SampleViewModel] Initialization cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:SampleViewModel] Unexpected error during initialization: " + ex.Message); }
        }

        private void RemoteExecute_IncrementCount()
        {
            if (!_isInitialized || _isDisposed) { Debug.WriteLine("[ClientProxy:SampleViewModel] Not initialized or disposed, command IncrementCount skipped."); return; }
            Debug.WriteLine("[ClientProxy:SampleViewModel] Executing command IncrementCount remotely...");
            try
            {
                _ = _grpcClient.IncrementCountAsync(new SampleApp.ViewModels.Protos.IncrementCountRequest(), cancellationToken: _cts.Token);
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:SampleViewModel] Error executing command IncrementCount: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:SampleViewModel] Command IncrementCount cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:SampleViewModel] Unexpected error executing command IncrementCount: " + ex.Message); }
        }

        private async Task RemoteExecute_DelayedIncrementAsync(int delayMilliseconds)
        {
            if (!_isInitialized || _isDisposed) { Debug.WriteLine("[ClientProxy:SampleViewModel] Not initialized or disposed, command DelayedIncrementAsync skipped."); return; }
            Debug.WriteLine("[ClientProxy:SampleViewModel] Executing command DelayedIncrementAsync remotely...");
            try
            {
                await _grpcClient.DelayedIncrementAsync(new SampleApp.ViewModels.Protos.DelayedIncrementRequest { DelayMilliseconds = delayMilliseconds }, cancellationToken: _cts.Token);
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:SampleViewModel] Error executing command DelayedIncrementAsync: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:SampleViewModel] Command DelayedIncrementAsync cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:SampleViewModel] Unexpected error executing command DelayedIncrementAsync: " + ex.Message); }
        }

        private void RemoteExecute_SetNameToValue(string? value)
        {
            if (!_isInitialized || _isDisposed) { Debug.WriteLine("[ClientProxy:SampleViewModel] Not initialized or disposed, command SetNameToValue skipped."); return; }
            Debug.WriteLine("[ClientProxy:SampleViewModel] Executing command SetNameToValue remotely...");
            try
            {
                _ = _grpcClient.SetNameToValueAsync(new SampleApp.ViewModels.Protos.SetNameToValueRequest { Value = value }, cancellationToken: _cts.Token);
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:SampleViewModel] Error executing command SetNameToValue: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:SampleViewModel] Command SetNameToValue cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:SampleViewModel] Unexpected error executing command SetNameToValue: " + ex.Message); }
        }

        private void StartListeningToPropertyChanges(CancellationToken cancellationToken)
        {
            _ = Task.Run(async () =>
            {
                if (_isDisposed) return;
                Debug.WriteLine("[SampleViewModelRemoteClient] Starting property change listener...");
                try
                {
                    var subscribeRequest = new SampleApp.ViewModels.Protos.SubscribeRequest { ClientId = _clientId };
                    using var call = _grpcClient.SubscribeToPropertyChanges(subscribeRequest, cancellationToken: cancellationToken);
                    Debug.WriteLine("[SampleViewModelRemoteClient] Subscribed to property changes. Waiting for updates...");
                    int updateCount = 0;
                    await foreach (var update in call.ResponseStream.ReadAllAsync(cancellationToken))
                    {
                        updateCount++;
                        if (_isDisposed) { Debug.WriteLine("[SampleViewModelRemoteClient] Disposed during update " + updateCount + ", exiting property update loop."); break; }
                        Debug.WriteLine($"[SampleViewModelRemoteClient] RAW UPDATE #" + updateCount + " RECEIVED: PropertyName=\"" + update.PropertyName + "\", ValueTypeUrl=\"" + (update.NewValue?.TypeUrl ?? "null_type_url") + "\"");
                        Action updateAction = () =>
                        {
                           try
                           {
                               Debug.WriteLine("[SampleViewModelRemoteClient] Dispatcher: Attempting to update \"" + update.PropertyName + "\" (Update #" + updateCount + ").");
                               _suppressLocalUpdates = true;
                               if (update.ChangeType == "nested")
                               {
                                   var val = UnpackAny(update.NewValue);
                                   SetValueByPath(this, update.PropertyPath, val);
                               }
                               else
                               {
                                   switch (update.PropertyName)
                                   {
                                   case nameof(Name):
                 if (update.NewValue!.Is(StringValue.Descriptor)) this.Name = update.NewValue.Unpack<StringValue>().Value; break;
                                   case nameof(Count):
                     if (update.NewValue!.Is(Int32Value.Descriptor)) this.Count = (int)update.NewValue.Unpack<Int32Value>().Value; break;
                                       default: Debug.WriteLine("[ClientProxy:SampleViewModel] Unknown property in notification: \"" + update.PropertyName + "\""); break;
                                   }
                               }
                           }
                           catch (Exception exInAction) { Debug.WriteLine("[ClientProxy:SampleViewModel] EXCEPTION INSIDE updateAction for \"" + update.PropertyName + "\": " + exInAction.ToString()); }
                           finally { _suppressLocalUpdates = false; }
                        };
                        if (_syncContext != null)
                            _syncContext.Post(_ => updateAction(), null);
                        else
                            updateAction();
                        Debug.WriteLine("[SampleViewModelRemoteClient] Processed update #" + updateCount + " for \"" + update.PropertyName + "\". Still listening...");
                    }
                    Debug.WriteLine("[SampleViewModelRemoteClient] ReadAllAsync completed or cancelled after " + updateCount + " updates.");
                }
                catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled) { Debug.WriteLine("[ClientProxy:SampleViewModel] Property subscription RpcException Cancelled."); }
                catch (OperationCanceledException) { Debug.WriteLine($"[ClientProxy:SampleViewModel] Property subscription OperationCanceledException."); }
                catch (Exception ex) { if (!_isDisposed) Debug.WriteLine("[ClientProxy:SampleViewModel] Error in property listener: " + ex.GetType().Name + " - " + ex.Message + "\nStackTrace: " + ex.StackTrace); }
                Debug.WriteLine("[SampleViewModelRemoteClient] Property change listener task finished.");
            }, cancellationToken);
        }

        public void Dispose()
        {
            if (_isDisposed) return;
            _isDisposed = true;
            Debug.WriteLine("[SampleViewModelRemoteClient] Disposing...");
            _cts.Cancel();
            _cts.Dispose();
        }
    }
}
