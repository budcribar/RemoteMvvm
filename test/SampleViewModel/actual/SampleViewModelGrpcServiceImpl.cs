// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>
#nullable enable
using Grpc.Core;
using SampleApp.ViewModels.Protos;
using SampleApp.ViewModels;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading.Channels;
using Channel = System.Threading.Channels.Channel;
using Microsoft.Extensions.Logging;
using CommunityToolkit.Mvvm.ComponentModel;

public partial class SampleViewModelGrpcServiceImpl : CounterService.CounterServiceBase
{
    public static event System.EventHandler<int>? ClientCountChanged;
    private static int _clientCount = -1;
    public static int ClientCount
    {
        get => _clientCount;
        private set
        {
            if (_clientCount != value)
            {
                _clientCount = value;
                ClientCountChanged?.Invoke(null, value);
            }
        }
    }

    static SampleViewModelGrpcServiceImpl()
    {
        ClientCount = 0;
    }

    private readonly SampleViewModel _viewModel;
    private static readonly ConcurrentDictionary<IServerStreamWriter<SampleApp.ViewModels.Protos.PropertyChangeNotification>, Channel<SampleApp.ViewModels.Protos.PropertyChangeNotification>> _subscriberChannels = new ConcurrentDictionary<IServerStreamWriter<SampleApp.ViewModels.Protos.PropertyChangeNotification>, Channel<SampleApp.ViewModels.Protos.PropertyChangeNotification>>();
    private readonly ILogger? _logger;

    public SampleViewModelGrpcServiceImpl(SampleViewModel viewModel, ILogger<SampleViewModelGrpcServiceImpl>? logger = null)
    {
        _viewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        _logger = logger;
        if (_viewModel is INotifyPropertyChanged inpc) { 
            inpc.PropertyChanged += ViewModel_PropertyChanged; 
        }
    }

    public override Task<SampleViewModelState> GetState(Empty request, ServerCallContext context)
    {
        var state = new SampleViewModelState();
        // Mapping property: Name to state.Name
        try
        {
            var propValue = _viewModel.Name;
            state.Name = propValue;
        }
        catch (Exception ex) { Debug.WriteLine($"[GrpcService:SampleViewModel] Error mapping property Name to state.Name: " + ex.ToString()); }
        // Mapping property: Count to state.Count
        try
        {
            var propValue = _viewModel.Count;
            state.Count = propValue;
        }
        catch (Exception ex) { Debug.WriteLine($"[GrpcService:SampleViewModel] Error mapping property Count to state.Count: " + ex.ToString()); }

        return Task.FromResult(state);
    }

    public override async Task SubscribeToPropertyChanges(SampleApp.ViewModels.Protos.SubscribeRequest request, IServerStreamWriter<SampleApp.ViewModels.Protos.PropertyChangeNotification> responseStream, ServerCallContext context)
    {
        var clientId = request.ClientId ?? "unknown";
        var channel = Channel.CreateUnbounded<SampleApp.ViewModels.Protos.PropertyChangeNotification>(new UnboundedChannelOptions { SingleReader = true, SingleWriter = false });
        _subscriberChannels.TryAdd(responseStream, channel);
        ClientCount = _subscriberChannels.Count;
        try
        {
            await foreach (var notification in channel.Reader.ReadAllAsync(context.CancellationToken))
            {
                await responseStream.WriteAsync(notification);
            }
        }
        catch (OperationCanceledException)
        {
            // Client disconnected, this is expected
        }
        finally
        {
            _subscriberChannels.TryRemove(responseStream, out _);
            channel.Writer.TryComplete();
            ClientCount = _subscriberChannels.Count;
        }
    }

    public override async Task<SampleApp.ViewModels.Protos.UpdatePropertyValueResponse> UpdatePropertyValue(SampleApp.ViewModels.Protos.UpdatePropertyValueRequest request, ServerCallContext context)
    {
        var response = new SampleApp.ViewModels.Protos.UpdatePropertyValueResponse();
        
        try
        {
            // Execute property update directly - MVVM Toolkit handles threading automatically
            response = UpdatePropertyValueInternal(request);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[GrpcService:SampleViewModel] Exception in UpdatePropertyValue: {ex}");
            response.Success = false;
            response.ErrorMessage = ex.Message;
        }
        
        Debug.WriteLine($"[GrpcService:SampleViewModel] UpdatePropertyValue result: Success={response.Success}, Error={response.ErrorMessage}");
        return response;
    }

    private SampleApp.ViewModels.Protos.UpdatePropertyValueResponse UpdatePropertyValueInternal(SampleApp.ViewModels.Protos.UpdatePropertyValueRequest request)
    {
        var response = new SampleApp.ViewModels.Protos.UpdatePropertyValueResponse();
        
        try
        {
            Debug.WriteLine($"[GrpcService:SampleViewModel] UpdatePropertyValue: Property={request.PropertyName}, Path={request.PropertyPath}, Operation={request.OperationType}");
            
            // Handle different operation types
            var operationType = request.OperationType ?? "set";
            var propertyPath = !string.IsNullOrEmpty(request.PropertyPath) ? request.PropertyPath : request.PropertyName;
            
            switch (operationType.ToLowerInvariant())
            {
                case "set":
                case "":
                    response = HandleSetOperation(request, propertyPath);
                    break;
                case "add":
                    response = HandleAddOperation(request, propertyPath);
                    break;
                case "remove":
                    response = HandleRemoveOperation(request, propertyPath);
                    break;
                case "clear":
                    response = HandleClearOperation(request, propertyPath);
                    break;
                case "insert":
                    response = HandleInsertOperation(request, propertyPath);
                    break;
                default:
                    response.Success = false;
                    response.ErrorMessage = $"Unsupported operation type: {request.OperationType}";
                    break;
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[GrpcService:SampleViewModel] Exception in UpdatePropertyValue: {ex}");
            response.Success = false;
            response.ErrorMessage = ex.Message;
        }
        
        return response;
    }

    private SampleApp.ViewModels.Protos.UpdatePropertyValueResponse HandleSetOperation(SampleApp.ViewModels.Protos.UpdatePropertyValueRequest request, string propertyPath)
    {
        var response = new SampleApp.ViewModels.Protos.UpdatePropertyValueResponse();
        
        try
        {
            object target = _viewModel;
            var pathParts = propertyPath.Split('.');
            
            // Navigate to nested property if needed, handling collection indices
            for (int i = 0; i < pathParts.Length - 1; i++)
            {
                var part = pathParts[i];
                int bracketIndex = part.IndexOf('[');
                if (bracketIndex >= 0)
                {
                    var propName = part[..bracketIndex];
                    var end = part.IndexOf(']', bracketIndex);
                    if (end < 0)
                    {
                        response.Success = false;
                        response.ErrorMessage = $"Invalid path segment '{part}' in '{propertyPath}'";
                        return response;
                    }
                    var indexStr = part[(bracketIndex + 1)..end];
                    var prop = target.GetType().GetProperty(propName);
                    if (prop == null)
                    {
                        response.Success = false;
                        response.ErrorMessage = $"Property '{propName}' not found in path '{propertyPath}'";
                        return response;
                    }
                    if (prop.GetValue(target) is IList list && int.TryParse(indexStr, out int idx))
                    {
                        if (idx < 0 || idx >= list.Count)
                        {
                            response.Success = false;
                            response.ErrorMessage = $"Index {idx} out of range for '{propName}'";
                            return response;
                        }
                        target = list[idx];
                    }
                    else
                    {
                        response.Success = false;
                        response.ErrorMessage = $"Property '{propName}' is not an indexable list";
                        return response;
                    }
                }
                else
                {
                    var prop = target.GetType().GetProperty(part);
                    if (prop == null)
                    {
                        response.Success = false;
                        response.ErrorMessage = $"Property '{part}' not found in path '{propertyPath}'";
                        return response;
                    }
                    var nextTarget = prop.GetValue(target);
                    if (nextTarget == null)
                    {
                        response.Success = false;
                        response.ErrorMessage = $"Null value encountered at '{part}' in path '{propertyPath}'";
                        return response;
                    }
                    target = nextTarget;
                }
            }

            var finalPropertyName = pathParts[pathParts.Length - 1];
            var propertyInfo = target.GetType().GetProperty(finalPropertyName);
            if (propertyInfo == null)
            {
                response.Success = false;
                response.ErrorMessage = $"Property '{finalPropertyName}' not found";
                return response;
            }

            if (propertyInfo.SetMethod == null || !propertyInfo.SetMethod.IsPublic)
            {
                response.Success = false;
                response.ErrorMessage = $"Property '{finalPropertyName}' is read-only";
                return response;
            }

            // Store old value for undo/history
            var oldValue = propertyInfo.GetValue(target);
            if (oldValue != null) response.OldValue = PackToAny(oldValue);
            
            // Handle collection indexing
            if (!string.IsNullOrEmpty(request.CollectionKey) || request.ArrayIndex > -1)
                response = HandleCollectionUpdate(target, propertyInfo, request);
            else
            {
                // Direct property assignment - thread-safe approach
                var convertedValue = ConvertAnyToTargetType(request.NewValue, propertyInfo.PropertyType);
                if (convertedValue.Success)
                {
                    Debug.WriteLine($"[GrpcService:SampleViewModel] Setting property '{finalPropertyName}' via reflection to value: {convertedValue.Value}");
                    
                    // Set the property value - PropertyChanged events will be handled naturally by the property setter
                    propertyInfo.SetValue(target, convertedValue.Value);
                    response.Success = true;
                }
                else
                {
                    response.Success = false;
                    response.ErrorMessage = convertedValue.ErrorMessage;
                }
            }
        }
        catch (Exception ex)
        {
            response.Success = false;
            response.ErrorMessage = ex.Message;
            Debug.WriteLine($"[GrpcService:SampleViewModel] Error in HandleSetOperation: {ex}");
        }
        
        return response;
    }

    private SampleApp.ViewModels.Protos.UpdatePropertyValueResponse HandleCollectionUpdate(object target, System.Reflection.PropertyInfo propertyInfo, SampleApp.ViewModels.Protos.UpdatePropertyValueRequest request)
    {
        var response = new SampleApp.ViewModels.Protos.UpdatePropertyValueResponse();
        
        var collection = propertyInfo.GetValue(target);
        if (collection == null)
        {
            response.Success = false;
            response.ErrorMessage = $"Collection property '{propertyInfo.Name}' is null";
            return response;
        }
        
        // Handle dictionary updates
        if (collection is System.Collections.IDictionary dict && !string.IsNullOrEmpty(request.CollectionKey))
        {
            var keyType = propertyInfo.PropertyType.GetGenericArguments()[0];
            var valueType = propertyInfo.PropertyType.GetGenericArguments()[1];
            
            var convertedKey = ConvertStringToTargetType(request.CollectionKey, keyType);
            if (!convertedKey.Success)
            {
                response.Success = false;
                response.ErrorMessage = $"Failed to convert key '{request.CollectionKey}': {convertedKey.ErrorMessage}";
                return response;
            }
            
            var convertedValue = ConvertAnyToTargetType(request.NewValue, valueType);
            if (!convertedValue.Success)
            {
                response.Success = false;
                response.ErrorMessage = $"Failed to convert value: {convertedValue.ErrorMessage}";
                return response;
            }
            
            // Store old value if key exists
            if (convertedKey.Value != null && dict.Contains(convertedKey.Value)) response.OldValue = PackToAny(dict[convertedKey.Value]);
            
            dict[convertedKey.Value!] = convertedValue.Value;
            response.Success = true;
            Debug.WriteLine($"[GrpcService:SampleViewModel] Updated dictionary key '{convertedKey.Value}' to '{convertedValue.Value}'");
        }
        // Handle list/array updates
        else if (collection is System.Collections.IList list && request.ArrayIndex > -1)
        {
            if (request.ArrayIndex >= list.Count)
            {
                response.Success = false;
                response.ErrorMessage = $"Array index {request.ArrayIndex} is out of bounds (count: {list.Count})";
                return response;
            }
            
            var elementType = propertyInfo.PropertyType.GetGenericArguments()[0];
            var convertedValue = ConvertAnyToTargetType(request.NewValue, elementType);
            
            if (!convertedValue.Success)
            {
                response.Success = false;
                response.ErrorMessage = convertedValue.ErrorMessage;
                return response;
            }
            
            // Store old value
            response.OldValue = PackToAny(list[request.ArrayIndex]);
            
            list[request.ArrayIndex] = convertedValue.Value;
            response.Success = true;
            Debug.WriteLine($"[GrpcService:SampleViewModel] Updated array index {request.ArrayIndex} to '{convertedValue.Value}'");
        }
        else
        {
            response.Success = false;
            response.ErrorMessage = "Unsupported collection operation or missing index/key";
        }
        
        return response;
    }

    // Helper methods for other operations
    private SampleApp.ViewModels.Protos.UpdatePropertyValueResponse HandleAddOperation(SampleApp.ViewModels.Protos.UpdatePropertyValueRequest request, string propertyPath)
    {
        var response = new SampleApp.ViewModels.Protos.UpdatePropertyValueResponse();
        response.Success = false;
        response.ErrorMessage = "Add operation not yet implemented";
        return response;
    }

    private SampleApp.ViewModels.Protos.UpdatePropertyValueResponse HandleRemoveOperation(SampleApp.ViewModels.Protos.UpdatePropertyValueRequest request, string propertyPath)
    {
        var response = new SampleApp.ViewModels.Protos.UpdatePropertyValueResponse();
        response.Success = false;
        response.ErrorMessage = "Remove operation not yet implemented";
        return response;
    }

    private SampleApp.ViewModels.Protos.UpdatePropertyValueResponse HandleClearOperation(SampleApp.ViewModels.Protos.UpdatePropertyValueRequest request, string propertyPath)
    {
        var response = new SampleApp.ViewModels.Protos.UpdatePropertyValueResponse();
        response.Success = false;
        response.ErrorMessage = "Clear operation not yet implemented";
        return response;
    }

    private SampleApp.ViewModels.Protos.UpdatePropertyValueResponse HandleInsertOperation(SampleApp.ViewModels.Protos.UpdatePropertyValueRequest request, string propertyPath)
    {
        var response = new SampleApp.ViewModels.Protos.UpdatePropertyValueResponse();
        response.Success = false;
        response.ErrorMessage = "Insert operation not yet implemented";
        return response;
    }

    private (bool Success, object? Value, string ErrorMessage) ConvertAnyToTargetType(Google.Protobuf.WellKnownTypes.Any anyValue, System.Type targetType)
    {
        try
        {
            if (anyValue.Is(StringValue.Descriptor) && targetType == typeof(string))
                return (true, anyValue.Unpack<StringValue>().Value, "");
            if (anyValue.Is(Int32Value.Descriptor) && targetType == typeof(int))
                return (true, anyValue.Unpack<Int32Value>().Value, "");
            if (anyValue.Is(Int64Value.Descriptor) && targetType == typeof(long))
                return (true, anyValue.Unpack<Int64Value>().Value, "");
            if (anyValue.Is(UInt32Value.Descriptor) && targetType == typeof(uint))
                return (true, anyValue.Unpack<UInt32Value>().Value, "");
            if (anyValue.Is(UInt64Value.Descriptor) && targetType == typeof(ulong))
                return (true, anyValue.Unpack<UInt64Value>().Value, "");
            if (anyValue.Is(FloatValue.Descriptor) && targetType == typeof(float))
                return (true, anyValue.Unpack<FloatValue>().Value, "");
            if (anyValue.Is(DoubleValue.Descriptor) && targetType == typeof(double))
                return (true, anyValue.Unpack<DoubleValue>().Value, "");
            if (anyValue.Is(BoolValue.Descriptor) && targetType == typeof(bool))
                return (true, anyValue.Unpack<BoolValue>().Value, "");
            
            // Handle additional numeric type conversions
            if (anyValue.Is(Int32Value.Descriptor) && targetType == typeof(short))
                return (true, (short)anyValue.Unpack<Int32Value>().Value, "");
            if (anyValue.Is(Int32Value.Descriptor) && targetType == typeof(byte))
                return (true, (byte)anyValue.Unpack<Int32Value>().Value, "");
            
            // Handle string-based type conversions
            if (anyValue.Is(StringValue.Descriptor) && targetType == typeof(char))
            {
                var str = anyValue.Unpack<StringValue>().Value;
                if (!string.IsNullOrEmpty(str))
                    return (true, str[0], "");
                else
                    return (false, null, "Cannot convert empty string to char");
            }
            if (anyValue.Is(StringValue.Descriptor) && targetType == typeof(decimal))
            {
                var str = anyValue.Unpack<StringValue>().Value;
                if (decimal.TryParse(str, out var decimalVal))
                    return (true, decimalVal, "");
                else
                    return (false, null, $"Cannot parse '{str}' as decimal");
            }
            if (anyValue.Is(StringValue.Descriptor) && targetType == typeof(Guid))
            {
                var str = anyValue.Unpack<StringValue>().Value;
                if (Guid.TryParse(str, out var guidVal))
                    return (true, guidVal, "");
                else
                    return (false, null, $"Cannot parse '{str}' as Guid");
            }
            
            // Handle Half type conversion
            if (anyValue.Is(FloatValue.Descriptor) && targetType == typeof(Half))
                return (true, (Half)anyValue.Unpack<FloatValue>().Value, "");
            
            // Handle enum types
            if (targetType.IsEnum && anyValue.Is(Int32Value.Descriptor))
            {
                var enumValue = anyValue.Unpack<Int32Value>().Value;
                if (System.Enum.IsDefined(targetType, enumValue))
                    return (true, System.Enum.ToObject(targetType, enumValue), "");
                else
                    return (false, null, $"Invalid enum value {enumValue} for type {targetType.Name}");
            }
            
            return (false, null, $"Cannot convert {anyValue.TypeUrl} to {targetType.Name}");
        }
        catch (Exception ex)
        {
            return (false, null, $"Conversion error: {ex.Message}");
        }
    }

    private (bool Success, object? Value, string ErrorMessage) ConvertStringToTargetType(string stringValue, System.Type targetType)
    {
        try
        {
            if (targetType == typeof(string))
                return (true, stringValue, "");
            if (targetType == typeof(int) && int.TryParse(stringValue, out var intVal))
                return (true, intVal, "");
            if (targetType == typeof(long) && long.TryParse(stringValue, out var longVal))
                return (true, longVal, "");
            if (targetType == typeof(bool) && bool.TryParse(stringValue, out var boolVal))
                return (true, boolVal, "");
            if (targetType == typeof(double) && double.TryParse(stringValue, out var doubleVal))
                return (true, doubleVal, "");
            if (targetType == typeof(float) && float.TryParse(stringValue, out var floatVal))
                return (true, floatVal, "");
            
            // Handle additional type conversions
            if (targetType == typeof(decimal) && decimal.TryParse(stringValue, out var decimalVal))
                return (true, decimalVal, "");
            if (targetType == typeof(char) && !string.IsNullOrEmpty(stringValue))
                return (true, stringValue[0], "");
            if (targetType == typeof(char) && string.IsNullOrEmpty(stringValue))
                return (false, null, "Cannot convert empty string to char");
            if (targetType == typeof(Guid) && Guid.TryParse(stringValue, out var guidVal))
                return (true, guidVal, "");
            if (targetType == typeof(Half) && Half.TryParse(stringValue, out var halfVal))
                return (true, halfVal, "");
        }
        catch (Exception ex)
        {
            return (false, null, $"Conversion error: {ex.Message}");
        }
        return (false, null, $"Cannot convert '{stringValue}' to {targetType.Name}");
    }

    private async void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (string.IsNullOrEmpty(e.PropertyName)) return;
        var fullPath = e.PropertyName;
        var topLevel = fullPath.Split(new[] {'.','['}, 2)[0];
        object? newValue = null;
        try { newValue = GetValueByPath(_viewModel, fullPath); }
        catch (Exception ex) { Debug.WriteLine($"[SampleViewModelGrpcService] Error getting property value for " + fullPath + ": " + ex.Message); return; }

        var notification = new SampleApp.ViewModels.Protos.PropertyChangeNotification
        {
            PropertyName = topLevel,
            PropertyPath = fullPath,
            ChangeType = fullPath == topLevel ? "property" : "nested"
        };
        notification.NewValue = PackToAny(newValue);

        // Send notifications to unbounded channels - use fire-and-forget Task.Run to avoid blocking the UI thread
        _ = Task.Run(async () =>
        {
            foreach (var channelWriter in _subscriberChannels.Values.Select(c => c.Writer))
            {
                try { 
                    await channelWriter.WriteAsync(notification); 
                }
                catch (ChannelClosedException) { 
                    // Subscriber likely disconnected, this is expected
                }
                catch (Exception ex) {
                    Debug.WriteLine($"[SampleViewModelGrpcService] Error writing to subscriber channel for '" + e.PropertyName + "': " + ex.Message);
                }
            }
        });
    }

    private static object? GetValueByPath(object target, string path)
    {
        object? current = target;
        foreach (var part in path.Split('.'))
        {
            if (current == null) return null;
            int bracketIndex = part.IndexOf('[');
            if (bracketIndex >= 0)
            {
                var propName = part[..bracketIndex];
                var end = part.IndexOf(']', bracketIndex);
                if (end < 0) return null;
                var indexStr = part[(bracketIndex + 1)..end];
                var prop = current.GetType().GetProperty(propName);
                if (prop == null) return null;
                if (prop.GetValue(current) is IList list && int.TryParse(indexStr, out int idx))
                {
                    if (idx < 0 || idx >= list.Count) return null;
                    current = list[idx];
                }
                else return null;
            }
            else
            {
                var prop = current.GetType().GetProperty(part);
                if (prop == null) return null;
                current = prop.GetValue(current);
            }
        }
        return current;
    }

    private static Any PackToAny(object? value)
    {
        if (value == null) return Any.Pack(new Empty());
        switch (value)
        {
            case string s: return Any.Pack(new StringValue { Value = s });
            case int i: return Any.Pack(new Int32Value { Value = i });
            case uint ui: return Any.Pack(new UInt32Value { Value = ui });
            case long l: return Any.Pack(new Int64Value { Value = l });
            case ulong ul: return Any.Pack(new UInt64Value { Value = ul });
            case bool b: return Any.Pack(new BoolValue { Value = b });
            case double d: return Any.Pack(new DoubleValue { Value = d });
            case float f: return Any.Pack(new FloatValue { Value = f });
            case short s: return Any.Pack(new Int32Value { Value = s });
            case byte b: return Any.Pack(new Int32Value { Value = b });
            case DateTime dt: return Any.Pack(Timestamp.FromDateTime(dt.ToUniversalTime()));
            case char c: return Any.Pack(new StringValue { Value = c.ToString() });
            case Half h: return Any.Pack(new FloatValue { Value = (float)h });
            case Guid g: return Any.Pack(new StringValue { Value = g.ToString() });
            case global::System.Enum e: return Any.Pack(new Int32Value { Value = Convert.ToInt32(e) });
        }
        if (value is IDictionary dict)
        {
            var sv = new Struct();
            foreach (DictionaryEntry entry in dict)
                sv.Fields[entry.Key?.ToString() ?? string.Empty] = ToValue(entry.Value);
            return Any.Pack(sv);
        }
        if (value is IEnumerable enumerable && value is not string)
        {
            var lv = new ListValue();
            foreach (var item in enumerable)
                lv.Values.Add(ToValue(item));
            return Any.Pack(lv);
        }
        var structValue = new Struct();
        foreach (var prop in value.GetType().GetProperties())
            structValue.Fields[prop.Name] = ToValue(prop.GetValue(value));
        return Any.Pack(structValue);
    }

    private static Value ToValue(object? value)
    {
        if (value == null) return Value.ForNull();
        switch (value)
        {
            case string s: return Value.ForString(s);
            case bool b: return Value.ForBool(b);
            case int i: return Value.ForNumber(i);
            case uint ui: return Value.ForNumber(ui);
            case long l: return Value.ForNumber(l);
            case ulong ul: return Value.ForNumber(ul);
            case double d: return Value.ForNumber(d);
            case float f: return Value.ForNumber(f);
            case short s: return Value.ForNumber(s);
            case byte b: return Value.ForNumber(b);
            case char c: return Value.ForString(c.ToString());
            case Half h: return Value.ForNumber((double)(float)h);
            case Guid g: return Value.ForString(g.ToString());
            case global::System.Enum e: return Value.ForNumber(Convert.ToInt32(e));
            case DateTime dt: return Value.ForString(dt.ToUniversalTime().ToString("o"));
        }
        if (value is IDictionary dict)
        {
            var sv = new Struct();
            foreach (DictionaryEntry entry in dict)
                sv.Fields[entry.Key?.ToString() ?? string.Empty] = ToValue(entry.Value);
            return Value.ForStruct(sv);
        }
        if (value is IEnumerable enumerable && value is not string)
        {
            var lv = new List<Value>();
            foreach (var item in enumerable)
                lv.Add(ToValue(item));
            return Value.ForList(lv.ToArray());
        }
        var structValue = new Struct();
        foreach (var prop in value.GetType().GetProperties())
            structValue.Fields[prop.Name] = ToValue(prop.GetValue(value));
        return Value.ForStruct(structValue);
    }


    public override Task<SampleApp.ViewModels.Protos.IncrementCountResponse> IncrementCount(SampleApp.ViewModels.Protos.IncrementCountRequest request, ServerCallContext context)
    {
        var response = new SampleApp.ViewModels.Protos.IncrementCountResponse();
        
        try
        {
            // Executes command: IRelayCommand
            _viewModel.IncrementCountCommand?.Execute(null);
            Debug.WriteLine("[GrpcService:SampleViewModel] Executed command IncrementCount");
        }
        catch (Exception ex)
        {
            Debug.WriteLine("[GrpcService:SampleViewModel] Error executing command IncrementCount: " + ex);
            _logger?.LogError(ex, "Error executing command IncrementCount");
        }
        
        return Task.FromResult(response);
    }

    public override Task<SampleApp.ViewModels.Protos.DelayedIncrementResponse> DelayedIncrement(SampleApp.ViewModels.Protos.DelayedIncrementRequest request, ServerCallContext context)
    {
        var response = new SampleApp.ViewModels.Protos.DelayedIncrementResponse();
        
        try
        {
            // Executes command: IRelayCommand<int>
            var delayMilliseconds = request.DelayMilliseconds;
            _viewModel.DelayedIncrementCommand?.Execute(delayMilliseconds);
            Debug.WriteLine("[GrpcService:SampleViewModel] Executed command DelayedIncrement");
        }
        catch (Exception ex)
        {
            Debug.WriteLine("[GrpcService:SampleViewModel] Error executing command DelayedIncrement: " + ex);
            _logger?.LogError(ex, "Error executing command DelayedIncrement");
        }
        
        return Task.FromResult(response);
    }

    public override Task<SampleApp.ViewModels.Protos.SetNameToValueResponse> SetNameToValue(SampleApp.ViewModels.Protos.SetNameToValueRequest request, ServerCallContext context)
    {
        var response = new SampleApp.ViewModels.Protos.SetNameToValueResponse();
        
        try
        {
            // Executes command: IRelayCommand<string?>
            var value = request.Value;
            _viewModel.SetNameToValueCommand?.Execute(value);
            Debug.WriteLine("[GrpcService:SampleViewModel] Executed command SetNameToValue");
        }
        catch (Exception ex)
        {
            Debug.WriteLine("[GrpcService:SampleViewModel] Error executing command SetNameToValue: " + ex);
            _logger?.LogError(ex, "Error executing command SetNameToValue");
        }
        
        return Task.FromResult(response);
    }

    public override Task<SampleApp.ViewModels.Protos.ConnectionStatusResponse> Ping(Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
    {
        var response = new SampleApp.ViewModels.Protos.ConnectionStatusResponse
        {
            Status = SampleApp.ViewModels.Protos.ConnectionStatus.Connected
        };

        Debug.WriteLine($"[GrpcService:SampleViewModel] Ping received, responding with Connected status");
        return Task.FromResult(response);
    }

}