// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

#nullable enable
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Grpc.Core;
using Grpc.Net.Client;
using Generated.Protos;
using Google.Protobuf.WellKnownTypes;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Diagnostics;
using SimpleViewModelTest.ViewModels;
#if WPF_DISPATCHER
using System.Windows;
#endif

namespace SimpleViewModelTest.ViewModels.RemoteClients
{
    public partial class MainViewModelRemoteClient : ObservableObject, IDisposable
    {
        private readonly Generated.Protos.MainViewModelService.MainViewModelServiceClient _grpcClient;
        private CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _isInitialized = false;
        private bool _isDisposed = false;

        private string _connectionStatus = "Unknown";
        public string ConnectionStatus
        {
            get => _connectionStatus;
            private set => SetProperty(ref _connectionStatus, value);
        }

        private System.Collections.Generic.List<SimpleViewModelTest.ViewModels.DeviceInfo> _devices = default!;
        public System.Collections.Generic.List<SimpleViewModelTest.ViewModels.DeviceInfo> Devices
        {
            get => _devices;
            private set
            {
                var oldValue = _devices;
                if (SetProperty(ref _devices, value))
                {
                    OnDevicesChanged(oldValue, value);
                }
            }
        }

        partial void OnDevicesChanged(System.Collections.Generic.List<SimpleViewModelTest.ViewModels.DeviceInfo> oldValue, System.Collections.Generic.List<SimpleViewModelTest.ViewModels.DeviceInfo> newValue);

        public IRelayCommand<SimpleViewModelTest.ViewModels.DeviceStatus> UpdateStatusCommand { get; }

        public MainViewModelRemoteClient(Generated.Protos.MainViewModelService.MainViewModelServiceClient grpcClient)
        {
            _grpcClient = grpcClient ?? throw new ArgumentNullException(nameof(grpcClient));
            UpdateStatusCommand = new RelayCommand<SimpleViewModelTest.ViewModels.DeviceStatus>(RemoteExecute_UpdateStatus);
        }

        /// <summary>
        /// Updates a property value on the server. Called automatically when bindable properties are changed locally.
        /// </summary>
        /// <param name="propertyName">The name of the property to update</param>
        /// <param name="value">The new value to set</param>
        public async Task UpdatePropertyValueAsync(string propertyName, object? value)
        {
            if (!_isInitialized || _isDisposed)
            {
                Debug.WriteLine($"[ClientProxy:MainViewModel] UpdatePropertyValueAsync for {propertyName} skipped - not initialized or disposed");
                return;
            }

            try
            {
                Debug.WriteLine($"[ClientProxy:MainViewModel] Updating server property {propertyName} = {value}");
                var request = new Generated.Protos.UpdatePropertyValueRequest
                {
                    PropertyName = propertyName,
                    ArrayIndex = -1,
                    NewValue = PackValueToAny(value)
                };

                var response = await _grpcClient.UpdatePropertyValueAsync(request, cancellationToken: _cts.Token);
                Debug.WriteLine($"[ClientProxy:MainViewModel] Property {propertyName} updated successfully on server");
            }
            catch (RpcException ex)
            {
                Debug.WriteLine($"[ClientProxy:MainViewModel] Error updating property {propertyName}: {ex.Status.StatusCode} - {ex.Status.Detail}");
            }
            catch (OperationCanceledException)
            {
                Debug.WriteLine($"[ClientProxy:MainViewModel] Property update {propertyName} cancelled");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ClientProxy:MainViewModel] Unexpected error updating property {propertyName}: {ex.Message}");
            }
        }

        /// <summary>
        /// Packs a .NET value into a protobuf Any message for transmission to the server.
        /// </summary>
        private static Any PackValueToAny(object? value)
        {
            return value switch
            {
                null => Any.Pack(new StringValue { Value = "" }),
                string s => Any.Pack(new StringValue { Value = s }),
                int i => Any.Pack(new Int32Value { Value = i }),
                long l => Any.Pack(new Int64Value { Value = l }),
                uint ui => Any.Pack(new UInt32Value { Value = ui }),
                ulong ul => Any.Pack(new UInt64Value { Value = ul }),
                float f => Any.Pack(new FloatValue { Value = f }),
                double d => Any.Pack(new DoubleValue { Value = d }),
                bool b => Any.Pack(new BoolValue { Value = b }),
                DateTime dt => Any.Pack(Timestamp.FromDateTime(dt.Kind == DateTimeKind.Unspecified ? DateTime.SpecifyKind(dt, DateTimeKind.Utc) : dt.ToUniversalTime())),
                DateTimeOffset dto => Any.Pack(Timestamp.FromDateTime(dto.UtcDateTime)),
                TimeSpan ts => Any.Pack(Google.Protobuf.WellKnownTypes.Duration.FromTimeSpan(ts)),
                Guid g => Any.Pack(new StringValue { Value = g.ToString() }),
                decimal dec => Any.Pack(new StringValue { Value = dec.ToString() }),
                char c => Any.Pack(new StringValue { Value = c.ToString() }),
                System.Enum e => Any.Pack(new Int32Value { Value = Convert.ToInt32(e) }),
                _ => Any.Pack(new StringValue { Value = value?.ToString() ?? "" })
            };
        }

        private async Task StartPingLoopAsync()
        {
            string lastStatus = ConnectionStatus;
            while (!_isDisposed)
            {
                try
                {
                    var response = await _grpcClient.PingAsync(new Google.Protobuf.WellKnownTypes.Empty(), cancellationToken: _cts.Token);
                    if (response.Status == Generated.Protos.ConnectionStatus.Connected)
                    {
                        if (lastStatus != "Connected")
                        {
                            try
                            {
                                var state = await _grpcClient.GetStateAsync(new Empty(), cancellationToken: _cts.Token);
                                this.Devices = new System.Collections.Generic.List<SimpleViewModelTest.ViewModels.DeviceInfo>(state.Devices.Select(ProtoStateConverters.FromProto));
                                Debug.WriteLine("[ClientProxy] State re-synced after reconnect.");
                            }
                            catch (Exception ex)
                            {
                                Debug.WriteLine($"[ClientProxy] Error re-syncing state after reconnect: {ex.Message}");
                            }
                        }
                        ConnectionStatus = "Connected";
                        lastStatus = "Connected";
                    }
                    else
                    {
                        ConnectionStatus = "Disconnected";
                        lastStatus = "Disconnected";
                    }
                }
                catch (Exception ex)
                {
                    ConnectionStatus = "Disconnected";
                    lastStatus = "Disconnected";
                    Debug.WriteLine($"[ClientProxy] Ping failed: {ex.Message}. Attempting to reconnect...");
                }
                await Task.Delay(5000);
            }
        }

        public async Task InitializeRemoteAsync(CancellationToken cancellationToken = default)
        {
            if (_isInitialized || _isDisposed) return;
            Debug.WriteLine("[MainViewModelRemoteClient] Initializing...");
            try
            {
                using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cts.Token);
                var state = await _grpcClient.GetStateAsync(new Empty(), cancellationToken: linkedCts.Token);
                Debug.WriteLine("[MainViewModelRemoteClient] Initial state received.");
                this.Devices = new System.Collections.Generic.List<SimpleViewModelTest.ViewModels.DeviceInfo>(state.Devices.Select(ProtoStateConverters.FromProto));
                _isInitialized = true;
                Debug.WriteLine("[MainViewModelRemoteClient] Initialized successfully.");
                StartListeningToPropertyChanges(_cts.Token);
                _ = StartPingLoopAsync();
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:MainViewModel] Failed to initialize: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:MainViewModel] Initialization cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:MainViewModel] Unexpected error during initialization: " + ex.Message); }
        }

        private void RemoteExecute_UpdateStatus(SimpleViewModelTest.ViewModels.DeviceStatus status)
        {
            if (!_isInitialized || _isDisposed) { Debug.WriteLine("[ClientProxy:MainViewModel] Not initialized or disposed, command UpdateStatus skipped."); return; }
            Debug.WriteLine("[ClientProxy:MainViewModel] Executing command UpdateStatus remotely...");
            try
            {
                _ = _grpcClient.UpdateStatusAsync(new Generated.Protos.UpdateStatusRequest { Status = (int)status }, cancellationToken: _cts.Token);
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:MainViewModel] Error executing command UpdateStatus: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:MainViewModel] Command UpdateStatus cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:MainViewModel] Unexpected error executing command UpdateStatus: " + ex.Message); }
        }

        private void StartListeningToPropertyChanges(CancellationToken cancellationToken)
        {
            _ = Task.Run(async () =>
            {
                if (_isDisposed) return;
                Debug.WriteLine("[MainViewModelRemoteClient] Starting property change listener...");
                try
                {
                    var subscribeRequest = new Generated.Protos.SubscribeRequest { ClientId = Guid.NewGuid().ToString() };
                    using var call = _grpcClient.SubscribeToPropertyChanges(subscribeRequest, cancellationToken: cancellationToken);
                    Debug.WriteLine("[MainViewModelRemoteClient] Subscribed to property changes. Waiting for updates...");
                    int updateCount = 0;
                    await foreach (var update in call.ResponseStream.ReadAllAsync(cancellationToken))
                    {
                        updateCount++;
                        if (_isDisposed) { Debug.WriteLine("[MainViewModelRemoteClient] Disposed during update " + updateCount + ", exiting property update loop."); break; }
                        Debug.WriteLine($"[MainViewModelRemoteClient] RAW UPDATE #" + updateCount + " RECEIVED: PropertyName=\"" + update.PropertyName + "\", ValueTypeUrl=\"" + (update.NewValue?.TypeUrl ?? "null_type_url") + "\"");
                        Action updateAction = () =>
                        {
                           try
                           {
                               Debug.WriteLine("[MainViewModelRemoteClient] Dispatcher: Attempting to update \"" + update.PropertyName + "\" (Update #" + updateCount + ").");
                               switch (update.PropertyName)
                               {
                                   case nameof(Devices):
                                       Debug.WriteLine("[ClientProxy:MainViewModel] Unpacking for Devices with WKT Any not fully implemented or is Any."); break;
                                   default: Debug.WriteLine("[ClientProxy:MainViewModel] Unknown property in notification: \"" + update.PropertyName + "\""); break;
                               }
                           }
                           catch (Exception exInAction) { Debug.WriteLine("[ClientProxy:MainViewModel] EXCEPTION INSIDE updateAction for \"" + update.PropertyName + "\": " + exInAction.ToString()); }
                        };
                        #if WPF_DISPATCHER
                        Application.Current?.Dispatcher.Invoke(updateAction);
                        #else
                        updateAction();
                        #endif
                        Debug.WriteLine("[MainViewModelRemoteClient] Processed update #" + updateCount + " for \"" + update.PropertyName + "\". Still listening...");
                    }
                    Debug.WriteLine("[MainViewModelRemoteClient] ReadAllAsync completed or cancelled after " + updateCount + " updates.");
                }
                catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled) { Debug.WriteLine("[ClientProxy:MainViewModel] Property subscription RpcException Cancelled."); }
                catch (OperationCanceledException) { Debug.WriteLine($"[ClientProxy:MainViewModel] Property subscription OperationCanceledException."); }
                catch (Exception ex) { if (!_isDisposed) Debug.WriteLine("[ClientProxy:MainViewModel] Error in property listener: " + ex.GetType().Name + " - " + ex.Message + "\nStackTrace: " + ex.StackTrace); }
                Debug.WriteLine("[MainViewModelRemoteClient] Property change listener task finished.");
            }, cancellationToken);
        }

        public void Dispose()
        {
            if (_isDisposed) return;
            _isDisposed = true;
            Debug.WriteLine("[MainViewModelRemoteClient] Disposing...");
            _cts.Cancel();
            _cts.Dispose();
        }
    }
}
