// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

#nullable enable
using Grpc.Core;
using Test.Protos;
using Generated.ViewModels;
using Google.Protobuf.WellKnownTypes;
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading.Channels;
using Channel = System.Threading.Channels.Channel;
using Microsoft.Extensions.Logging;

public partial class TestViewModelGrpcServiceImpl : TestViewModelService.TestViewModelServiceBase
{
    public static event System.EventHandler<int>? ClientCountChanged;
    private static int _clientCount = -1;
    public static int ClientCount
    {
        get => _clientCount;
        private set
        {
            if (_clientCount != value)
            {
                _clientCount = value;
                ClientCountChanged?.Invoke(null, value);
            }
        }
    }

    static TestViewModelGrpcServiceImpl()
    {
        ClientCount = 0;
    }

    private readonly TestViewModel _viewModel;
    private static readonly ConcurrentDictionary<IServerStreamWriter<Test.Protos.PropertyChangeNotification>, Channel<Test.Protos.PropertyChangeNotification>> _subscriberChannels = new ConcurrentDictionary<IServerStreamWriter<Test.Protos.PropertyChangeNotification>, Channel<Test.Protos.PropertyChangeNotification>>();
    private readonly ILogger? _logger;

    public TestViewModelGrpcServiceImpl(TestViewModel viewModel, ILogger<TestViewModelGrpcServiceImpl>? logger = null)
    {
        _viewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        _logger = logger;
        if (_viewModel is INotifyPropertyChanged inpc) { inpc.PropertyChanged += ViewModel_PropertyChanged; }
    }

    public override Task<TestViewModelState> GetState(Empty request, ServerCallContext context)
    {
        var state = new TestViewModelState();
        // Mapping property: ZoneList to state.ZoneList
        try
        {
            var propValue = _viewModel.ZoneList;
            if (propValue != null) state.ZoneList.AddRange(propValue.Where(e => e != null).Select(Generated.ViewModels.ProtoStateConverters.ToProto).Where(s => s != null));
        }
        catch (Exception ex) { Debug.WriteLine("[GrpcService:TestViewModel] Error mapping property ZoneList to state.ZoneList: " + ex.Message); Debug.WriteLine("[GrpcService:TestViewModel] Exception details: " + ex.ToString()); }
        // Mapping property: Status to state.Status
        try
        {
            var propValue = _viewModel.Status;
            state.Status = propValue;
        }
        catch (Exception ex) { Debug.WriteLine("[GrpcService:TestViewModel] Error mapping property Status to state.Status: " + ex.Message); Debug.WriteLine("[GrpcService:TestViewModel] Exception details: " + ex.ToString()); }
        return Task.FromResult(state);
    }

    public override async Task SubscribeToPropertyChanges(Test.Protos.SubscribeRequest request, IServerStreamWriter<Test.Protos.PropertyChangeNotification> responseStream, ServerCallContext context)
    {
        var channel = Channel.CreateUnbounded<Test.Protos.PropertyChangeNotification>(new UnboundedChannelOptions { SingleReader = true, SingleWriter = false });
        _subscriberChannels.TryAdd(responseStream, channel);
        ClientCount = _subscriberChannels.Count;
        try
        {
            await foreach (var notification in channel.Reader.ReadAllAsync(context.CancellationToken))
            {
                await responseStream.WriteAsync(notification);
            }
        }
        finally
        {
            _subscriberChannels.TryRemove(responseStream, out _);
            channel.Writer.TryComplete();
            ClientCount = _subscriberChannels.Count;
        }
    }

    public override async Task<Empty> UpdatePropertyValue(Test.Protos.UpdatePropertyValueRequest request, ServerCallContext context)
    {
        try
        {
            var propertyInfo = _viewModel.GetType().GetProperty(request.PropertyName);
            if (propertyInfo != null && propertyInfo.CanWrite)
            {
                try {
                if (request.NewValue.Is(StringValue.Descriptor) && propertyInfo.PropertyType == typeof(string)) propertyInfo.SetValue(_viewModel, request.NewValue.Unpack<StringValue>().Value);
                else if (request.NewValue.Is(Int32Value.Descriptor) && propertyInfo.PropertyType == typeof(int)) propertyInfo.SetValue(_viewModel, request.NewValue.Unpack<Int32Value>().Value);
                else if (request.NewValue.Is(Int64Value.Descriptor) && propertyInfo.PropertyType == typeof(long)) propertyInfo.SetValue(_viewModel, request.NewValue.Unpack<Int64Value>().Value);
                else if (request.NewValue.Is(UInt32Value.Descriptor) && propertyInfo.PropertyType == typeof(uint)) propertyInfo.SetValue(_viewModel, request.NewValue.Unpack<UInt32Value>().Value);
                else if (request.NewValue.Is(FloatValue.Descriptor) && propertyInfo.PropertyType == typeof(float)) propertyInfo.SetValue(_viewModel, request.NewValue.Unpack<FloatValue>().Value);
                else if (request.NewValue.Is(DoubleValue.Descriptor) && propertyInfo.PropertyType == typeof(double)) propertyInfo.SetValue(_viewModel, request.NewValue.Unpack<DoubleValue>().Value);
                else if (request.NewValue.Is(BoolValue.Descriptor) && propertyInfo.PropertyType == typeof(bool)) propertyInfo.SetValue(_viewModel, request.NewValue.Unpack<BoolValue>().Value);
                else { Debug.WriteLine("[GrpcService:TestViewModel] UpdatePropertyValue: Unpacking not implemented for property " + request.PropertyName + " and type " + request.NewValue.TypeUrl + "."); }
                } catch (Exception ex) { Debug.WriteLine("[GrpcService:TestViewModel] Error setting property " + request.PropertyName + ": " + ex.Message); }
            }
            else { Debug.WriteLine("[GrpcService:TestViewModel] UpdatePropertyValue: Property " + request.PropertyName + " not found or not writable."); }
        }
        catch (Exception ex) { Debug.WriteLine("[GrpcService:TestViewModel] Exception during UpdatePropertyValue: " + ex.ToString()); }
        return new Empty();
    }

    public override Task<ConnectionStatusResponse> Ping(Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
    {
        var status = ClientCount > 0 ? ConnectionStatus.Connected : ConnectionStatus.Disconnected;
        return Task.FromResult(new ConnectionStatusResponse { Status = status });
    }

    private async void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (string.IsNullOrEmpty(e.PropertyName)) return;
        object? newValue = null;
        try { newValue = sender?.GetType().GetProperty(e.PropertyName)?.GetValue(sender); }
        catch (Exception ex) { Debug.WriteLine("[GrpcService:TestViewModel] Error getting property value for " + e.PropertyName + ": " + ex.Message); return; }

        var notification = new Test.Protos.PropertyChangeNotification { PropertyName = e.PropertyName };
        notification.NewValue = PackToAny(newValue);

        foreach (var channelWriter in _subscriberChannels.Values.Select(c => c.Writer))
        {
            try { await channelWriter.WriteAsync(notification); }
            catch (ChannelClosedException) { Debug.WriteLine("[GrpcService:TestViewModel] Channel closed for a subscriber, cannot write notification for '" + e.PropertyName + "'. Subscriber likely disconnected."); }
            catch (Exception ex) { Debug.WriteLine("[GrpcService:TestViewModel] Error writing to subscriber channel for '" + e.PropertyName + "': " + ex.Message); }
        }
    }

    private static Any PackToAny(object? value)
    {
        if (value == null) return Any.Pack(new Empty());
        switch (value)
        {
            case string s: return Any.Pack(new StringValue { Value = s });
            case int i: return Any.Pack(new Int32Value { Value = i });
            case uint ui: return Any.Pack(new UInt32Value { Value = ui });
            case bool b: return Any.Pack(new BoolValue { Value = b });
            case double d: return Any.Pack(new DoubleValue { Value = d });
            case float f: return Any.Pack(new FloatValue { Value = f });
            case long l: return Any.Pack(new Int64Value { Value = l });
            case DateTime dt: return Any.Pack(Timestamp.FromDateTime(dt.ToUniversalTime()));
            case global::System.Enum e: return Any.Pack(new Int32Value { Value = Convert.ToInt32(e) });
        }
        if (value is IDictionary dict)
        {
            var sv = new Struct();
            foreach (DictionaryEntry entry in dict)
                sv.Fields[entry.Key?.ToString() ?? string.Empty] = ToValue(entry.Value);
            return Any.Pack(sv);
        }
        if (value is IEnumerable enumerable && value is not string)
        {
            var lv = new ListValue();
            foreach (var item in enumerable)
                lv.Values.Add(ToValue(item));
            return Any.Pack(lv);
        }
        var structValue = new Struct();
        foreach (var prop in value.GetType().GetProperties())
            structValue.Fields[prop.Name] = ToValue(prop.GetValue(value));
        return Any.Pack(structValue);
    }

    private static Value ToValue(object? value)
    {
        if (value == null) return Value.ForNull();
        switch (value)
        {
            case string s: return Value.ForString(s);
            case bool b: return Value.ForBool(b);
            case int i: return Value.ForNumber(i);
            case uint ui: return Value.ForNumber(ui);
            case long l: return Value.ForNumber(l);
            case double d: return Value.ForNumber(d);
            case float f: return Value.ForNumber(f);
            case global::System.Enum e: return Value.ForNumber(Convert.ToInt32(e));
            case DateTime dt: return Value.ForString(dt.ToUniversalTime().ToString("o"));
        }
        if (value is IDictionary dict)
        {
            var sv = new Struct();
            foreach (DictionaryEntry entry in dict)
                sv.Fields[entry.Key?.ToString() ?? string.Empty] = ToValue(entry.Value);
            return Value.ForStruct(sv);
        }
        if (value is IEnumerable enumerable && value is not string)
        {
            var lv = new List<Value>();
            foreach (var item in enumerable)
                lv.Add(ToValue(item));
            return Value.ForList(lv.ToArray());
        }
        var structValue = new Struct();
        foreach (var prop in value.GetType().GetProperties())
            structValue.Fields[prop.Name] = ToValue(prop.GetValue(value));
        return Value.ForStruct(structValue);
    }
}
