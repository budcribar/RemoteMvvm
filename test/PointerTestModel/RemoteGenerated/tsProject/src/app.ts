// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

import { PointerViewModelServiceClient } from './generated/PointerViewModelServiceClientPb';
import { PointerViewModelRemoteClient } from './PointerViewModelRemoteClient';

const grpcHost = 'http://localhost:50052';
const grpcClient = new PointerViewModelServiceClient(grpcHost);
const vm = new PointerViewModelRemoteClient(grpcClient);

// Centralized error reporting
function handleError(err: any, context?: string) {
    try {
        const msg = err?.message ?? String(err);
        console.error(context ? `${context}:` : 'Error:', err);
        const statusEl = document.getElementById('connection-status');
        if (statusEl) {
            statusEl.textContent = context ? `${context}: ${msg}` : msg;
        }
    } catch { /* no-op */ }
}


async function render() {
    (document.getElementById('show') as HTMLInputElement).value = JSON.stringify(vm.show);
    (document.getElementById('showSpinner') as HTMLInputElement).value = JSON.stringify(vm.showSpinner);
    (document.getElementById('clicksToPass') as HTMLInputElement).value = JSON.stringify(vm.clicksToPass);
    (document.getElementById('is3Btn') as HTMLInputElement).value = JSON.stringify(vm.is3Btn);
    (document.getElementById('testTimeoutSec') as HTMLInputElement).value = JSON.stringify(vm.testTimeoutSec);
    (document.getElementById('instructions') as HTMLInputElement).value = vm.instructions;
    (document.getElementById('showCursorTest') as HTMLInputElement).value = JSON.stringify(vm.showCursorTest);
    (document.getElementById('showConfigSelection') as HTMLInputElement).value = JSON.stringify(vm.showConfigSelection);
    (document.getElementById('showClickInstructions') as HTMLInputElement).value = JSON.stringify(vm.showClickInstructions);
    (document.getElementById('showTimer') as HTMLInputElement).value = JSON.stringify(vm.showTimer);
    (document.getElementById('showBottom') as HTMLInputElement).value = JSON.stringify(vm.showBottom);
    (document.getElementById('timerText') as HTMLInputElement).value = vm.timerText;
    (document.getElementById('selectedDevice') as HTMLInputElement).value = vm.selectedDevice;
    (document.getElementById('lastClickCount') as HTMLInputElement).value = JSON.stringify(vm.lastClickCount);
    (document.getElementById('connection-status') as HTMLElement).textContent = vm.connectionStatus;
}

async function init() {
    try {
        await vm.initializeRemote();
        vm.addChangeListener(render);
        await render();
    } catch (err) {
        handleError(err, 'Initialize remote');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    init();
    (document.getElementById('show') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.show;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            vm.updatePropertyValueDebounced('Show', newValue.toLowerCase() === 'true');
        }
    });
    (document.getElementById('showSpinner') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.showSpinner;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            vm.updatePropertyValueDebounced('ShowSpinner', newValue.toLowerCase() === 'true');
        }
    });
    (document.getElementById('clicksToPass') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.clicksToPass;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            vm.updatePropertyValueDebounced('ClicksToPass', Number(newValue));
        }
    });
    (document.getElementById('is3Btn') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.is3Btn;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            vm.updatePropertyValueDebounced('Is3Btn', newValue.toLowerCase() === 'true');
        }
    });
    (document.getElementById('testTimeoutSec') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.testTimeoutSec;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            vm.updatePropertyValueDebounced('TestTimeoutSec', Number(newValue));
        }
    });
    (document.getElementById('instructions') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.instructions;
        // Only update if value actually changed
        if (newValue !== currentValue) {
            vm.updatePropertyValueDebounced('Instructions', newValue);
        }
    });
    (document.getElementById('showCursorTest') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.showCursorTest;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            vm.updatePropertyValueDebounced('ShowCursorTest', newValue.toLowerCase() === 'true');
        }
    });
    (document.getElementById('showConfigSelection') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.showConfigSelection;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            vm.updatePropertyValueDebounced('ShowConfigSelection', newValue.toLowerCase() === 'true');
        }
    });
    (document.getElementById('showClickInstructions') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.showClickInstructions;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            vm.updatePropertyValueDebounced('ShowClickInstructions', newValue.toLowerCase() === 'true');
        }
    });
    (document.getElementById('showTimer') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.showTimer;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            vm.updatePropertyValueDebounced('ShowTimer', newValue.toLowerCase() === 'true');
        }
    });
    (document.getElementById('showBottom') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.showBottom;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            vm.updatePropertyValueDebounced('ShowBottom', newValue.toLowerCase() === 'true');
        }
    });
    (document.getElementById('timerText') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.timerText;
        // Only update if value actually changed
        if (newValue !== currentValue) {
            vm.updatePropertyValueDebounced('TimerText', newValue);
        }
    });
    (document.getElementById('selectedDevice') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.selectedDevice;
        // Only update if value actually changed
        if (newValue !== currentValue) {
            vm.updatePropertyValueDebounced('SelectedDevice', newValue);
        }
    });
    (document.getElementById('lastClickCount') as HTMLInputElement).addEventListener('change', (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.lastClickCount;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            vm.updatePropertyValueDebounced('LastClickCount', Number(newValue));
        }
    });
    (document.getElementById('initialize-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.initialize();
        } catch (err) {
            handleError(err, 'Execute Initialize');
        }
    });
    (document.getElementById('onCursorTest-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.onCursorTest();
        } catch (err) {
            handleError(err, 'Execute OnCursorTest');
        }
    });
    (document.getElementById('onClickTest-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.onClickTest(0);
        } catch (err) {
            handleError(err, 'Execute OnClickTest');
        }
    });
    (document.getElementById('onSelectDevice-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.onSelectDevice('sample');
        } catch (err) {
            handleError(err, 'Execute OnSelectDevice');
        }
    });
    (document.getElementById('onSelectNumButtons-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.onSelectNumButtons(0);
        } catch (err) {
            handleError(err, 'Execute OnSelectNumButtons');
        }
    });
    (document.getElementById('getClicksWithoutNotification-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.getClicksWithoutNotification('sample');
        } catch (err) {
            handleError(err, 'Execute GetClicksWithoutNotification');
        }
    });
    (document.getElementById('resetClicks-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.resetClicks();
        } catch (err) {
            handleError(err, 'Execute ResetClicks');
        }
    });
    (document.getElementById('cancelTest-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.cancelTest();
        } catch (err) {
            handleError(err, 'Execute CancelTest');
        }
    });
    (document.getElementById('finishTest-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.finishTest();
        } catch (err) {
            handleError(err, 'Execute FinishTest');
        }
    });
});
