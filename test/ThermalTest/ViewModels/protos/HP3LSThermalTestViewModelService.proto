// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

syntax = "proto3";

package generated_protos;

option csharp_namespace = "Generated.Protos";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Message representing the full state of the HP3LSThermalTestViewModel
message HP3LSThermalTestViewModelState {
  string instructions = 1; // Original C#: string Instructions
  int32 cpu_temperature_threshold = 2; // Original C#: int CpuTemperatureThreshold
  int32 cpu_load_threshold = 3; // Original C#: int CpuLoadThreshold
  int32 cpu_load_time_span = 4; // Original C#: int CpuLoadTimeSpan
  repeated ThermalZoneComponentViewModelState zones = 5; // Original C#: HPSystemsTools.ViewModels.ZoneCollection Zones
  TestSettingsModelState test_settings = 6; // Original C#: HPSystemsTools.Models.TestSettingsModel TestSettings
  bool show_description = 7; // Original C#: bool ShowDescription
  bool show_readme = 8; // Original C#: bool ShowReadme
}

message ThermalZoneComponentViewModelState {
  int32 zone = 1; // Original C#: HP.Telemetry.Zone Zone
  bool is_active = 2; // Original C#: bool IsActive
  string device_name = 3; // Original C#: string DeviceName
  int32 temperature = 4; // Original C#: int Temperature
  int32 processor_load = 5; // Original C#: int ProcessorLoad
  int32 fan_speed = 6; // Original C#: int FanSpeed
  int32 seconds_in_state = 7; // Original C#: int SecondsInState
  google.protobuf.Timestamp first_seen_in_state = 8; // Original C#: System.DateTime FirstSeenInState
  int32 progress = 9; // Original C#: int Progress
  string background = 10; // Original C#: string Background
  int32 status = 11; // Original C#: HPSystemsTools.Models.ThermalStateEnum Status
  int32 state = 12; // Original C#: HPSystemsTools.Models.ThermalStateEnum State
  string state_description = 13; // Original C#: string StateDescription
  string status_description = 14; // Original C#: string StatusDescription
}

message TestSettingsModelState {
  int32 cpu_temperature_threshold = 1; // Original C#: int CpuTemperatureThreshold
  int32 cpu_load_threshold = 2; // Original C#: int CpuLoadThreshold
  int32 cpu_load_time_span = 3; // Original C#: int CpuLoadTimeSpan
}

message UpdatePropertyValueRequest {
  string property_name = 1;
  google.protobuf.Any new_value = 2;
  // Optional fields for complex property updates
  string property_path = 3;          // For nested properties like "User.Address.Street"
  string collection_key = 4;         // For dictionary keys
  string operation_type = 5;         // "set", "add", "remove", "clear", "insert"
  string client_id = 6;             // Originating client identifier
}

message UpdatePropertyValueResponse {
  bool success = 1;
  string error_message = 2;          // Error details if success=false
  string validation_errors = 3;      // Validation error details
  google.protobuf.Any old_value = 4; // Previous value for undo operations
}

message PropertyChangeNotification {
  string property_name = 1;
  google.protobuf.Any new_value = 2;
  // Enhanced notification details
  string property_path = 3;          // Full path for nested changes
  string change_type = 4;            // "property", "collection", "nested"
  google.protobuf.Any old_value = 5; // Previous value
}

message StateChangedRequest {
  int32 state = 1; // Original C#: HPSystemsTools.Models.ThermalStateEnum state
}
message StateChangedResponse {}

message CancelTestRequest {}
message CancelTestResponse {}

message SubscribeRequest {
  string client_id = 1;
}

enum ConnectionStatus {
  UNKNOWN = 0;
  CONNECTED = 1;
  DISCONNECTED = 2;
}

message ConnectionStatusResponse {
  ConnectionStatus status = 1;
}

service HP3LSThermalTestViewModelService {
  rpc GetState (google.protobuf.Empty) returns (HP3LSThermalTestViewModelState);
  rpc UpdatePropertyValue (UpdatePropertyValueRequest) returns (UpdatePropertyValueResponse);
  rpc SubscribeToPropertyChanges (SubscribeRequest) returns (stream PropertyChangeNotification);
  rpc StateChanged (StateChangedRequest) returns (StateChangedResponse);
  rpc CancelTest (CancelTestRequest) returns (CancelTestResponse);
  rpc Ping (google.protobuf.Empty) returns (ConnectionStatusResponse);
}

