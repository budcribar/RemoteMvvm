// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

import { HP3LSThermalTestViewModelServiceClient } from './generated/HP3LSThermalTestViewModelServiceServiceClientPb';
import { HP3LSThermalTestViewModelRemoteClient } from './HP3LSThermalTestViewModelRemoteClient';

const grpcHost = 'http://localhost:50052';
const grpcClient = new HP3LSThermalTestViewModelServiceClient(grpcHost);
const vm = new HP3LSThermalTestViewModelRemoteClient(grpcClient);

// Centralized error reporting
function handleError(err: any, context?: string) {
    try {
        const msg = err?.message ?? String(err);
        console.error(context ? `${context}:` : 'Error:', err);
        const statusEl = document.getElementById('connection-status');
        if (statusEl) {
            statusEl.textContent = context ? `${context}: ${msg}` : msg;
        }
    } catch { /* no-op */ }
}


async function render() {
    (document.getElementById('instructions') as HTMLInputElement).value = vm.instructions;
    (document.getElementById('cpuTemperatureThreshold') as HTMLInputElement).value = String(vm.cpuTemperatureThreshold);
    (document.getElementById('cpuLoadThreshold') as HTMLInputElement).value = String(vm.cpuLoadThreshold);
    (document.getElementById('cpuLoadTimeSpan') as HTMLInputElement).value = String(vm.cpuLoadTimeSpan);
    const zonesEl = document.getElementById('zones') as HTMLElement;
    const zonesRootOpen = (zonesEl.querySelector('details[data-root]') as HTMLDetailsElement)?.open ?? true;
    zonesEl.innerHTML = '';
    const zonesDetails = document.createElement('details');
    zonesDetails.setAttribute('data-root', '');
    zonesDetails.open = zonesRootOpen;
    const zonesSummary = document.createElement('summary');
    zonesSummary.textContent = 'Zones';
    zonesDetails.appendChild(zonesSummary);
    const container = document.createElement('div');
    Object.entries(vm.zones as any).forEach(([key, value]) => {
        const field = document.createElement('div');
        field.className = 'field';
        const label = document.createElement('span');
        label.textContent = key;
        const input = document.createElement('input');
        if (typeof value === 'boolean') {
            input.type = 'checkbox';
            input.checked = Boolean(value);
        } else {
            input.type = typeof value === 'number' ? 'number' : 'text';
            input.value = typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);
        }
        input.addEventListener('change', async (e) => {
            const tgt = e.target as HTMLInputElement;
            let parsed: any;
            if (typeof value === 'number') parsed = tgt.valueAsNumber;
            else if (typeof value === 'boolean') parsed = tgt.checked;
            else { try { parsed = JSON.parse(tgt.value); } catch { parsed = tgt.value; } }
            const newObj = Object.assign({}, vm.zones);
            if (JSON.stringify((newObj as any)[key]) !== JSON.stringify(parsed)) {
                (newObj as any)[key] = parsed;
                try { await vm.updatePropertyValueDebounced('Zones', newObj); }
                catch (err) { handleError(err, 'Update Zones'); }
            }
        });
        field.appendChild(label);
        field.appendChild(input);
        container.appendChild(field);
    });
    zonesDetails.appendChild(container);
    zonesEl.appendChild(zonesDetails);
    const testSettingsEl = document.getElementById('testSettings') as HTMLElement;
    const testSettingsRootOpen = (testSettingsEl.querySelector('details[data-root]') as HTMLDetailsElement)?.open ?? true;
    testSettingsEl.innerHTML = '';
    const testSettingsDetails = document.createElement('details');
    testSettingsDetails.setAttribute('data-root', '');
    testSettingsDetails.open = testSettingsRootOpen;
    const testSettingsSummary = document.createElement('summary');
    testSettingsSummary.textContent = 'TestSettings';
    testSettingsDetails.appendChild(testSettingsSummary);
    const container = document.createElement('div');
    Object.entries(vm.testSettings as any).forEach(([key, value]) => {
        const field = document.createElement('div');
        field.className = 'field';
        const label = document.createElement('span');
        label.textContent = key;
        const input = document.createElement('input');
        if (typeof value === 'boolean') {
            input.type = 'checkbox';
            input.checked = Boolean(value);
        } else {
            input.type = typeof value === 'number' ? 'number' : 'text';
            input.value = typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);
        }
        input.addEventListener('change', async (e) => {
            const tgt = e.target as HTMLInputElement;
            let parsed: any;
            if (typeof value === 'number') parsed = tgt.valueAsNumber;
            else if (typeof value === 'boolean') parsed = tgt.checked;
            else { try { parsed = JSON.parse(tgt.value); } catch { parsed = tgt.value; } }
            const newObj = Object.assign({}, vm.testSettings);
            if (JSON.stringify((newObj as any)[key]) !== JSON.stringify(parsed)) {
                (newObj as any)[key] = parsed;
                try { await vm.updatePropertyValueDebounced('TestSettings', newObj); }
                catch (err) { handleError(err, 'Update TestSettings'); }
            }
        });
        field.appendChild(label);
        field.appendChild(input);
        container.appendChild(field);
    });
    testSettingsDetails.appendChild(container);
    testSettingsEl.appendChild(testSettingsDetails);
    (document.getElementById('showDescription') as HTMLInputElement).checked = vm.showDescription;
    (document.getElementById('showReadme') as HTMLInputElement).checked = vm.showReadme;
    (document.getElementById('connection-status') as HTMLElement).textContent = vm.connectionStatus;
}

async function init() {
    try {
        await vm.initializeRemote();
        vm.addChangeListener(render);
        await render();
    } catch (err) {
        handleError(err, 'Initialize remote');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    init();
    (document.getElementById('instructions') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.instructions;
        // Only update if value actually changed
        if (newValue !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('Instructions', newValue);
            } catch (err) {
                handleError(err, 'Update Instructions');
            }
        }
    });
    (document.getElementById('cpuTemperatureThreshold') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.cpuTemperatureThreshold;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('CpuTemperatureThreshold', Number(newValue));
            } catch (err) {
                handleError(err, 'Update CpuTemperatureThreshold');
            }
        }
    });
    (document.getElementById('cpuLoadThreshold') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.cpuLoadThreshold;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('CpuLoadThreshold', Number(newValue));
            } catch (err) {
                handleError(err, 'Update CpuLoadThreshold');
            }
        }
    });
    (document.getElementById('cpuLoadTimeSpan') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.cpuLoadTimeSpan;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('CpuLoadTimeSpan', Number(newValue));
            } catch (err) {
                handleError(err, 'Update CpuLoadTimeSpan');
            }
        }
    });
    (document.getElementById('showDescription') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).checked;
        const currentValue = vm.showDescription;
        // Only update if value actually changed
        if (Boolean(newValue) !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('ShowDescription', newValue);
            } catch (err) {
                handleError(err, 'Update ShowDescription');
            }
        }
    });
    (document.getElementById('showReadme') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).checked;
        const currentValue = vm.showReadme;
        // Only update if value actually changed
        if (Boolean(newValue) !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('ShowReadme', newValue);
            } catch (err) {
                handleError(err, 'Update ShowReadme');
            }
        }
    });
    (document.getElementById('stateChanged-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.stateChanged(undefined);
        } catch (err) {
            handleError(err, 'Execute StateChanged');
        }
    });
    (document.getElementById('cancelTest-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.cancelTest();
        } catch (err) {
            handleError(err, 'Execute CancelTest');
        }
    });
});
