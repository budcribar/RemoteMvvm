// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

import { HP3LSThermalTestViewModelServiceClient } from './generated/HP3LSThermalTestViewModelServiceServiceClientPb';
import { HP3LSThermalTestViewModelRemoteClient } from './HP3LSThermalTestViewModelRemoteClient';

const grpcHost = 'http://localhost:50052';
const grpcClient = new HP3LSThermalTestViewModelServiceClient(grpcHost);
const vm = new HP3LSThermalTestViewModelRemoteClient(grpcClient);

// Centralized error reporting
function handleError(err: any, context?: string) {
    try {
        const msg = err?.message ?? String(err);
        console.error(context ? `${context}:` : 'Error:', err);
        const statusEl = document.getElementById('connection-status');
        if (statusEl) {
            statusEl.textContent = context ? `${context}: ${msg}` : msg;
        }
    } catch { /* no-op */ }
}


async function render() {
    (document.getElementById('instructions') as HTMLInputElement).value = vm.instructions;
    (document.getElementById('cpuTemperatureThreshold') as HTMLInputElement).value = String(vm.cpuTemperatureThreshold);
    (document.getElementById('cpuLoadThreshold') as HTMLInputElement).value = String(vm.cpuLoadThreshold);
    (document.getElementById('cpuLoadTimeSpan') as HTMLInputElement).value = String(vm.cpuLoadTimeSpan);
    (document.getElementById('zoneList') as HTMLInputElement).value = JSON.stringify(vm.zoneList, null, 2);
    (document.getElementById('testSettings') as HTMLInputElement).value = JSON.stringify(vm.testSettings, null, 2);
    (document.getElementById('showDescription') as HTMLInputElement).value = String(vm.showDescription);
    (document.getElementById('showReadme') as HTMLInputElement).value = String(vm.showReadme);
    (document.getElementById('connection-status') as HTMLElement).textContent = vm.connectionStatus;
}

async function init() {
    try {
        await vm.initializeRemote();
        vm.addChangeListener(render);
        await render();
    } catch (err) {
        handleError(err, 'Initialize remote');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    init();
    (document.getElementById('instructions') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.instructions;
        // Only update if value actually changed
        if (newValue !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('Instructions', newValue);
            } catch (err) {
                handleError(err, 'Update Instructions');
            }
        }
    });
    (document.getElementById('cpuTemperatureThreshold') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.cpuTemperatureThreshold;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('CpuTemperatureThreshold', Number(newValue));
            } catch (err) {
                handleError(err, 'Update CpuTemperatureThreshold');
            }
        }
    });
    (document.getElementById('cpuLoadThreshold') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.cpuLoadThreshold;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('CpuLoadThreshold', Number(newValue));
            } catch (err) {
                handleError(err, 'Update CpuLoadThreshold');
            }
        }
    });
    (document.getElementById('cpuLoadTimeSpan') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.cpuLoadTimeSpan;
        // Only update if value actually changed
        if (Number(newValue) !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('CpuLoadTimeSpan', Number(newValue));
            } catch (err) {
                handleError(err, 'Update CpuLoadTimeSpan');
            }
        }
    });
    (document.getElementById('zoneList') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.zoneList;
        // Only update if value actually changed
        if (JSON.stringify(currentValue, null, 2) !== newValue) {
            try {
                await vm.updatePropertyValueDebounced('ZoneList', JSON.parse(newValue));
            } catch (err) {
                handleError(err, 'Update ZoneList');
            }
        }
    });
    (document.getElementById('testSettings') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.testSettings;
        // Only update if value actually changed
        if (JSON.stringify(currentValue, null, 2) !== newValue) {
            try {
                await vm.updatePropertyValueDebounced('TestSettings', JSON.parse(newValue));
            } catch (err) {
                handleError(err, 'Update TestSettings');
            }
        }
    });
    (document.getElementById('showDescription') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.showDescription;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('ShowDescription', newValue.toLowerCase() === 'true');
            } catch (err) {
                handleError(err, 'Update ShowDescription');
            }
        }
    });
    (document.getElementById('showReadme') as HTMLInputElement).addEventListener('change', async (e) => {
        const newValue = (e.target as HTMLInputElement).value;
        const currentValue = vm.showReadme;
        // Only update if value actually changed
        if (Boolean(newValue.toLowerCase() === 'true') !== currentValue) {
            try {
                await vm.updatePropertyValueDebounced('ShowReadme', newValue.toLowerCase() === 'true');
            } catch (err) {
                handleError(err, 'Update ShowReadme');
            }
        }
    });
    (document.getElementById('stateChanged-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.stateChanged(undefined);
        } catch (err) {
            handleError(err, 'Execute StateChanged');
        }
    });
    (document.getElementById('cancelTest-btn') as HTMLButtonElement).addEventListener('click', async () => {
        try {
            await vm.cancelTest();
        } catch (err) {
            handleError(err, 'Execute CancelTest');
        }
    });
});
