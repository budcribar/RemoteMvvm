// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

import { HP3LSThermalTestViewModelServiceClient } from './generated/HP3LSThermalTestViewModelServiceServiceClientPb';
import { HP3LSThermalTestViewModelRemoteClient } from './HP3LSThermalTestViewModelRemoteClient';

const grpcHost = 'http://localhost:50052';
const grpcClient = new HP3LSThermalTestViewModelServiceClient(grpcHost);
const vm = new HP3LSThermalTestViewModelRemoteClient(grpcClient);

async function render() {
    (document.getElementById('zones') as HTMLInputElement).value = JSON.stringify(vm.zones);
    (document.getElementById('testSettings') as HTMLInputElement).value = JSON.stringify(vm.testSettings);
    (document.getElementById('showDescription') as HTMLInputElement).value = JSON.stringify(vm.showDescription);
    (document.getElementById('showReadme') as HTMLInputElement).value = JSON.stringify(vm.showReadme);
    (document.getElementById('connection-status') as HTMLElement).textContent = vm.connectionStatus;
}

async function init() {
    await vm.initializeRemote();
    vm.addChangeListener(render);
    await render();
}

document.addEventListener('DOMContentLoaded', () => {
    init();
    (document.getElementById('zones') as HTMLInputElement).addEventListener('change', async () => {
        await vm.updatePropertyValue('Zones', (document.getElementById('zones') as HTMLInputElement).value);
    });
    (document.getElementById('testSettings') as HTMLInputElement).addEventListener('change', async () => {
        await vm.updatePropertyValue('TestSettings', (document.getElementById('testSettings') as HTMLInputElement).value);
    });
    (document.getElementById('showDescription') as HTMLInputElement).addEventListener('change', async () => {
        await vm.updatePropertyValue('ShowDescription', (document.getElementById('showDescription') as HTMLInputElement).value);
    });
    (document.getElementById('showReadme') as HTMLInputElement).addEventListener('change', async () => {
        await vm.updatePropertyValue('ShowReadme', (document.getElementById('showReadme') as HTMLInputElement).value);
    });
    (document.getElementById('stateChanged-btn') as HTMLButtonElement).addEventListener('click', async () => {
        await vm.stateChanged(undefined);
    });
    (document.getElementById('cancelTest-btn') as HTMLButtonElement).addEventListener('click', async () => {
        await vm.cancelTest();
    });
});
