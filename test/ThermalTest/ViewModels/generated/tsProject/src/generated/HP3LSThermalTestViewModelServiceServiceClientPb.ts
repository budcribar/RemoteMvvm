/**
 * @fileoverview gRPC-Web generated client stub for generated_protos
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: HP3LSThermalTestViewModelService.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as HP3LSThermalTestViewModelService_pb from './HP3LSThermalTestViewModelService_pb'; // proto import: "HP3LSThermalTestViewModelService.proto"
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"


export class HP3LSThermalTestViewModelServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetState = new grpcWeb.MethodDescriptor(
    '/generated_protos.HP3LSThermalTestViewModelService/GetState',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState.deserializeBinary
  );

  getState(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState>;

  getState(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => void): grpcWeb.ClientReadableStream<HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState>;

  getState(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => void) {
    if (callback !== undefined) {
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.HP3LSThermalTestViewModelState) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.getState RPC error:', err);
        }
        callback(err, response);
      };
      return this.client_.rpcCall(
        this.hostname_ +
          '/generated_protos.HP3LSThermalTestViewModelService/GetState',
        request,
        metadata || {},
        this.methodDescriptorGetState,
        wrappedCallback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/generated_protos.HP3LSThermalTestViewModelService/GetState',
    request,
    metadata || {},
    this.methodDescriptorGetState).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.getState Promise error:', err);
      throw err;
    });
  }

  methodDescriptorUpdatePropertyValue = new grpcWeb.MethodDescriptor(
    '/generated_protos.HP3LSThermalTestViewModelService/UpdatePropertyValue',
    grpcWeb.MethodType.UNARY,
    HP3LSThermalTestViewModelService_pb.UpdatePropertyValueRequest,
    google_protobuf_empty_pb.Empty,
    (request: HP3LSThermalTestViewModelService_pb.UpdatePropertyValueRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  updatePropertyValue(
    request: HP3LSThermalTestViewModelService_pb.UpdatePropertyValueRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  updatePropertyValue(
    request: HP3LSThermalTestViewModelService_pb.UpdatePropertyValueRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  updatePropertyValue(
    request: HP3LSThermalTestViewModelService_pb.UpdatePropertyValueRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: google_protobuf_empty_pb.Empty) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue RPC error:', err);
        }
        callback(err, response);
      };
      return this.client_.rpcCall(
        this.hostname_ +
          '/generated_protos.HP3LSThermalTestViewModelService/UpdatePropertyValue',
        request,
        metadata || {},
        this.methodDescriptorUpdatePropertyValue,
        wrappedCallback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/generated_protos.HP3LSThermalTestViewModelService/UpdatePropertyValue',
    request,
    metadata || {},
    this.methodDescriptorUpdatePropertyValue).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.updatePropertyValue Promise error:', err);
      throw err;
    });
  }

  methodDescriptorSubscribeToPropertyChanges = new grpcWeb.MethodDescriptor(
    '/generated_protos.HP3LSThermalTestViewModelService/SubscribeToPropertyChanges',
    grpcWeb.MethodType.SERVER_STREAMING,
    HP3LSThermalTestViewModelService_pb.SubscribeRequest,
    HP3LSThermalTestViewModelService_pb.PropertyChangeNotification,
    (request: HP3LSThermalTestViewModelService_pb.SubscribeRequest) => {
      return request.serializeBinary();
    },
    HP3LSThermalTestViewModelService_pb.PropertyChangeNotification.deserializeBinary
  );

  subscribeToPropertyChanges(
    request: HP3LSThermalTestViewModelService_pb.SubscribeRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<HP3LSThermalTestViewModelService_pb.PropertyChangeNotification> {
    const stream = this.client_.serverStreaming(
      this.hostname_ +
        '/generated_protos.HP3LSThermalTestViewModelService/SubscribeToPropertyChanges',
      request,
      metadata || {},
      this.methodDescriptorSubscribeToPropertyChanges);
    if (stream && typeof (stream as any).on === 'function') {
      (stream as any).on('error', (err: any) => {
        console.error('HP3LSThermalTestViewModelServiceClient.subscribeToPropertyChanges stream error:', err);
      });
    }
    return stream;
  }

  methodDescriptorStateChanged = new grpcWeb.MethodDescriptor(
    '/generated_protos.HP3LSThermalTestViewModelService/StateChanged',
    grpcWeb.MethodType.UNARY,
    HP3LSThermalTestViewModelService_pb.StateChangedRequest,
    HP3LSThermalTestViewModelService_pb.StateChangedResponse,
    (request: HP3LSThermalTestViewModelService_pb.StateChangedRequest) => {
      return request.serializeBinary();
    },
    HP3LSThermalTestViewModelService_pb.StateChangedResponse.deserializeBinary
  );

  stateChanged(
    request: HP3LSThermalTestViewModelService_pb.StateChangedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<HP3LSThermalTestViewModelService_pb.StateChangedResponse>;

  stateChanged(
    request: HP3LSThermalTestViewModelService_pb.StateChangedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => void): grpcWeb.ClientReadableStream<HP3LSThermalTestViewModelService_pb.StateChangedResponse>;

  stateChanged(
    request: HP3LSThermalTestViewModelService_pb.StateChangedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => void) {
    if (callback !== undefined) {
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.StateChangedResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.stateChanged RPC error:', err);
        }
        callback(err, response);
      };
      return this.client_.rpcCall(
        this.hostname_ +
          '/generated_protos.HP3LSThermalTestViewModelService/StateChanged',
        request,
        metadata || {},
        this.methodDescriptorStateChanged,
        wrappedCallback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/generated_protos.HP3LSThermalTestViewModelService/StateChanged',
    request,
    metadata || {},
    this.methodDescriptorStateChanged).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.stateChanged Promise error:', err);
      throw err;
    });
  }

  methodDescriptorCancelTest = new grpcWeb.MethodDescriptor(
    '/generated_protos.HP3LSThermalTestViewModelService/CancelTest',
    grpcWeb.MethodType.UNARY,
    HP3LSThermalTestViewModelService_pb.CancelTestRequest,
    HP3LSThermalTestViewModelService_pb.CancelTestResponse,
    (request: HP3LSThermalTestViewModelService_pb.CancelTestRequest) => {
      return request.serializeBinary();
    },
    HP3LSThermalTestViewModelService_pb.CancelTestResponse.deserializeBinary
  );

  cancelTest(
    request: HP3LSThermalTestViewModelService_pb.CancelTestRequest,
    metadata?: grpcWeb.Metadata | null): Promise<HP3LSThermalTestViewModelService_pb.CancelTestResponse>;

  cancelTest(
    request: HP3LSThermalTestViewModelService_pb.CancelTestRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => void): grpcWeb.ClientReadableStream<HP3LSThermalTestViewModelService_pb.CancelTestResponse>;

  cancelTest(
    request: HP3LSThermalTestViewModelService_pb.CancelTestRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => void) {
    if (callback !== undefined) {
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.CancelTestResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.cancelTest RPC error:', err);
        }
        callback(err, response);
      };
      return this.client_.rpcCall(
        this.hostname_ +
          '/generated_protos.HP3LSThermalTestViewModelService/CancelTest',
        request,
        metadata || {},
        this.methodDescriptorCancelTest,
        wrappedCallback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/generated_protos.HP3LSThermalTestViewModelService/CancelTest',
    request,
    metadata || {},
    this.methodDescriptorCancelTest).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.cancelTest Promise error:', err);
      throw err;
    });
  }

  methodDescriptorPing = new grpcWeb.MethodDescriptor(
    '/generated_protos.HP3LSThermalTestViewModelService/Ping',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse.deserializeBinary
  );

  ping(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse>;

  ping(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => void): grpcWeb.ClientReadableStream<HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse>;

  ping(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => void) {
    if (callback !== undefined) {
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      const wrappedCallback = (err: grpcWeb.RpcError,
                               response: HP3LSThermalTestViewModelService_pb.ConnectionStatusResponse) => {
        if (err) {
          console.error('HP3LSThermalTestViewModelServiceClient.ping RPC error:', err);
        }
        callback(err, response);
      };
      return this.client_.rpcCall(
        this.hostname_ +
          '/generated_protos.HP3LSThermalTestViewModelService/Ping',
        request,
        metadata || {},
        this.methodDescriptorPing,
        wrappedCallback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/generated_protos.HP3LSThermalTestViewModelService/Ping',
    request,
    metadata || {},
    this.methodDescriptorPing).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {).catch((err: any) => {
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
      console.error('HP3LSThermalTestViewModelServiceClient.ping Promise error:', err);
      throw err;
    });
  }

}

