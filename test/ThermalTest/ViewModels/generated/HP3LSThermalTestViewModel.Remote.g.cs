// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

#nullable enable
using Grpc.Core;
using Grpc.Net.Client;
using Generated.Protos;
using HPSystemsTools.ViewModels.RemoteClients;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Hosting;
using System.Diagnostics;
using System.Windows.Threading;
using PeakSWC.Mvvm.Remote;

namespace HPSystemsTools.ViewModels
{
    public partial class HP3LSThermalTestViewModel : CommunityToolkit.Mvvm.ComponentModel.ObservableObject, IDisposable
    {
        private HP3LSThermalTestViewModelGrpcServiceImpl? _grpcService;
                private readonly Dispatcher _dispatcher;
        private IHost? _aspNetCoreHost;
        private GrpcChannel? _channel;
        private HPSystemsTools.ViewModels.RemoteClients.HP3LSThermalTestViewModelRemoteClient? _remoteClient;
        
        public HP3LSThermalTestViewModel(ServerOptions options) : this()
        {
            if (options == null) throw new ArgumentNullException(nameof(options));
                        _dispatcher = Dispatcher.CurrentDispatcher;
            // Always create service without dispatcher - MVVM Toolkit handles threading automatically
            _grpcService = new HP3LSThermalTestViewModelGrpcServiceImpl(this);
            
            // Always use ASP.NET Core with Kestrel to support gRPC-Web
            StartAspNetCoreServer(options);
        }

        private void StartAspNetCoreServer(ServerOptions options)
        {
            var builder = WebApplication.CreateBuilder();

            // Add services to the container
            builder.Services.AddGrpc();

            // Add CORS support for gRPC-Web
            builder.Services.AddCors(o => o.AddPolicy("AllowAll", builder =>
            {
                builder.AllowAnyOrigin()
                       .AllowAnyMethod()
                       .AllowAnyHeader()
                       .WithExposedHeaders("Grpc-Status", "Grpc-Message", "Grpc-Encoding", "Grpc-Accept-Encoding");
            }));

            // Register the gRPC service implementation with ASP.NET Core DI
            builder.Services.AddSingleton(_grpcService!);

            // Configure Kestrel to listen on the specified port based on UseHttps
            builder.WebHost.ConfigureKestrel(kestrelOptions =>
            {
                kestrelOptions.ListenLocalhost(options.Port, listenOptions =>
                {
                    if (options.UseHttps)
                    {
                        listenOptions.UseHttps(); // Use development certificate
                        listenOptions.Protocols = Microsoft.AspNetCore.Server.Kestrel.Core.HttpProtocols.Http1AndHttp2;
                    }
                    else
                    {
                        listenOptions.Protocols = Microsoft.AspNetCore.Server.Kestrel.Core.HttpProtocols.Http1;
                    }
                });
            });

            // Build the application
            var app = builder.Build();

            // Configure the HTTP request pipeline
            app.UseRouting();

            // Use CORS middleware
            app.UseCors("AllowAll");

            // Enable gRPC-Web middleware
            app.UseGrpcWeb(new GrpcWebOptions { DefaultEnabled = true });

            // Map gRPC services
            app.MapGet("/status", () => "Server is running.");
            app.MapGrpcService<HP3LSThermalTestViewModelGrpcServiceImpl>()
               .EnableGrpcWeb()
               .RequireCors("AllowAll");

            // Start the server
            _aspNetCoreHost = app;
            Task.Run(() => app.RunAsync()); // Run the server in a background thread
        }

        public HP3LSThermalTestViewModel(ClientOptions options) : this()
        {
            if (options == null) throw new ArgumentNullException(nameof(options));
                        _dispatcher = null!;
            _channel = GrpcChannel.ForAddress(options.Address);
            var client = new Generated.Protos.HP3LSThermalTestViewModelService.HP3LSThermalTestViewModelServiceClient(_channel);
            _remoteClient = new HP3LSThermalTestViewModelRemoteClient(client);
        }

        

        public async Task<HP3LSThermalTestViewModelRemoteClient> GetRemoteModel()
        {
            if (_remoteClient == null) throw new InvalidOperationException("Client options not provided");
            await _remoteClient.InitializeRemoteAsync();
            return _remoteClient;
        }

        public void Dispose()
        {
            _channel?.ShutdownAsync().GetAwaiter().GetResult();
            _aspNetCoreHost?.StopAsync().GetAwaiter().GetResult();
            _aspNetCoreHost?.Dispose();
        }
    }
}
