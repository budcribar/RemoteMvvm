// <auto-generated>
// Generated by RemoteMvvmTool.
// </auto-generated>

#nullable enable
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Grpc.Core;
using Grpc.Net.Client;
using Generated.Protos;
using Google.Protobuf.WellKnownTypes;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Diagnostics;
using System.ComponentModel;
using HPSystemsTools.ViewModels;

namespace HPSystemsTools.ViewModels.RemoteClients
{
    public partial class HP3LSThermalTestViewModelRemoteClient : ObservableObject, IDisposable
    {
        private readonly Generated.Protos.HP3LSThermalTestViewModelService.HP3LSThermalTestViewModelServiceClient _grpcClient;
        private readonly SynchronizationContext? _syncContext;
        private CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _isInitialized = false;
        private bool _isDisposed = false;
        private readonly string _clientId = Guid.NewGuid().ToString();
        private bool _suppressLocalUpdates = false;

        private string _connectionStatus = "Unknown";
        public string ConnectionStatus
        {
            get => _connectionStatus;
            private set => SetProperty(ref _connectionStatus, value);
        }

        private string _instructions = default!;
        public string Instructions
        {
            get => _instructions;
            private set => SetProperty(ref _instructions, value);
        }

        private int _cpuTemperatureThreshold = default!;
        public int CpuTemperatureThreshold
        {
            get => _cpuTemperatureThreshold;
            set
            {
                if (SetProperty(ref _cpuTemperatureThreshold, value) && _isInitialized)
                {
                    _ = UpdatePropertyValueAsync("CpuTemperatureThreshold", value);
                }
            }
        }

        private int _cpuLoadThreshold = default!;
        public int CpuLoadThreshold
        {
            get => _cpuLoadThreshold;
            set
            {
                if (SetProperty(ref _cpuLoadThreshold, value) && _isInitialized)
                {
                    _ = UpdatePropertyValueAsync("CpuLoadThreshold", value);
                }
            }
        }

        private int _cpuLoadTimeSpan = default!;
        public int CpuLoadTimeSpan
        {
            get => _cpuLoadTimeSpan;
            set
            {
                if (SetProperty(ref _cpuLoadTimeSpan, value) && _isInitialized)
                {
                    _ = UpdatePropertyValueAsync("CpuLoadTimeSpan", value);
                }
            }
        }

        private HPSystemsTools.ViewModels.ZoneCollection _zones = default!;
        public HPSystemsTools.ViewModels.ZoneCollection Zones
        {
            get => _zones;
            private set => SetProperty(ref _zones, value);
        }

        private HPSystemsTools.Models.TestSettingsModel _testSettings = default!;
        public HPSystemsTools.Models.TestSettingsModel TestSettings
        {
            get => _testSettings;
            private set => SetProperty(ref _testSettings, value);
        }

        private bool _showDescription = default!;
        public bool ShowDescription
        {
            get => _showDescription;
            set
            {
                if (SetProperty(ref _showDescription, value) && _isInitialized)
                {
                    _ = UpdatePropertyValueAsync("ShowDescription", value);
                }
            }
        }

        private bool _showReadme = default!;
        public bool ShowReadme
        {
            get => _showReadme;
            set
            {
                if (SetProperty(ref _showReadme, value) && _isInitialized)
                {
                    _ = UpdatePropertyValueAsync("ShowReadme", value);
                }
            }
        }

        public IRelayCommand<HPSystemsTools.Models.ThermalStateEnum> StateChangedCommand { get; }
        public IRelayCommand CancelTestCommand { get; }

        public HP3LSThermalTestViewModelRemoteClient(Generated.Protos.HP3LSThermalTestViewModelService.HP3LSThermalTestViewModelServiceClient grpcClient)
        {
            _grpcClient = grpcClient ?? throw new ArgumentNullException(nameof(grpcClient));
            _syncContext = SynchronizationContext.Current;
            StateChangedCommand = new RelayCommand<HPSystemsTools.Models.ThermalStateEnum>(RemoteExecute_StateChanged);
            CancelTestCommand = new RelayCommand(RemoteExecute_CancelTest);
        }

        /// <summary>
        /// Updates a property value on the server. Called automatically when bindable properties are changed locally.
        /// </summary>
        /// <param name="propertyName">The name of the property to update</param>
        /// <param name="value">The new value to set</param>
        public async Task UpdatePropertyValueAsync(string propertyPath, object? value)
        {
            if (!_isInitialized || _isDisposed)
            {
                Debug.WriteLine($"[ClientProxy:HP3LSThermalTestViewModel] UpdatePropertyValueAsync for {propertyPath} skipped - not initialized or disposed");
                return;
            }

            try
            {
                Debug.WriteLine($"[ClientProxy:HP3LSThermalTestViewModel] Updating server property {propertyPath} = {value}");
                var topLevel = propertyPath.Split(new[] {'.','['}, 2)[0];
                var request = new Generated.Protos.UpdatePropertyValueRequest
                {
                    PropertyName = topLevel,
                    PropertyPath = propertyPath,
                    ArrayIndex = -1,
                    ClientId = _clientId,
                    NewValue = PackValueToAny(value)
                };

                var response = await _grpcClient.UpdatePropertyValueAsync(request, cancellationToken: _cts.Token);
                Debug.WriteLine($"[ClientProxy:HP3LSThermalTestViewModel] Property {propertyPath} updated successfully on server");
            }
            catch (RpcException ex)
            {
                Debug.WriteLine($"[ClientProxy:HP3LSThermalTestViewModel] Error updating property {propertyPath}: {ex.Status.StatusCode} - {ex.Status.Detail}");
            }
            catch (OperationCanceledException)
            {
                Debug.WriteLine($"[ClientProxy:HP3LSThermalTestViewModel] Property update {propertyPath} cancelled");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ClientProxy:HP3LSThermalTestViewModel] Unexpected error updating property {propertyPath}: {ex.Message}");
            }
        }

        /// <summary>
        /// Packs a .NET value into a protobuf Any message for transmission to the server.
        /// </summary>
        private static Any PackValueToAny(object? value)
        {
            return value switch
            {
                null => Any.Pack(new StringValue { Value = "" }),
                string s => Any.Pack(new StringValue { Value = s }),
                int i => Any.Pack(new Int32Value { Value = i }),
                long l => Any.Pack(new Int64Value { Value = l }),
                uint ui => Any.Pack(new UInt32Value { Value = ui }),
                ulong ul => Any.Pack(new UInt64Value { Value = ul }),
                float f => Any.Pack(new FloatValue { Value = f }),
                double d => Any.Pack(new DoubleValue { Value = d }),
                bool b => Any.Pack(new BoolValue { Value = b }),
                DateTime dt => Any.Pack(Timestamp.FromDateTime(dt.Kind == DateTimeKind.Unspecified ? DateTime.SpecifyKind(dt, DateTimeKind.Utc) : dt.ToUniversalTime())),
                DateTimeOffset dto => Any.Pack(Timestamp.FromDateTime(dto.UtcDateTime)),
                TimeSpan ts => Any.Pack(Google.Protobuf.WellKnownTypes.Duration.FromTimeSpan(ts)),
                Guid g => Any.Pack(new StringValue { Value = g.ToString() }),
                decimal dec => Any.Pack(new StringValue { Value = dec.ToString() }),
                char c => Any.Pack(new StringValue { Value = c.ToString() }),
                System.Enum e => Any.Pack(new Int32Value { Value = Convert.ToInt32(e) }),
                _ => Any.Pack(new StringValue { Value = value?.ToString() ?? "" })
            };
        }

        private static object? UnpackAny(Any value)
        {
            if (value.Is(StringValue.Descriptor)) return value.Unpack<StringValue>().Value;
            if (value.Is(Int32Value.Descriptor)) return value.Unpack<Int32Value>().Value;
            if (value.Is(Int64Value.Descriptor)) return value.Unpack<Int64Value>().Value;
            if (value.Is(UInt32Value.Descriptor)) return value.Unpack<UInt32Value>().Value;
            if (value.Is(UInt64Value.Descriptor)) return value.Unpack<UInt64Value>().Value;
            if (value.Is(FloatValue.Descriptor)) return value.Unpack<FloatValue>().Value;
            if (value.Is(DoubleValue.Descriptor)) return value.Unpack<DoubleValue>().Value;
            if (value.Is(BoolValue.Descriptor)) return value.Unpack<BoolValue>().Value;
            if (value.Is(Timestamp.Descriptor)) return value.Unpack<Timestamp>().ToDateTime();
            if (value.Is(Google.Protobuf.WellKnownTypes.Duration.Descriptor)) return value.Unpack<Google.Protobuf.WellKnownTypes.Duration>().ToTimeSpan();
            return null;
        }

        private static void SetValueByPath(object target, string path, object? newValue)
        {
            var segments = path.Split('.');
            object? current = target;

            for (int i = 0; i < segments.Length; i++)
            {
                var part = segments[i];
                int bracket = part.IndexOf('[');
                if (bracket >= 0)
                {
                    var propName = part[..bracket];
                    var end = part.IndexOf(']', bracket);
                    if (end < 0) return;
                    var indexStr = part[(bracket + 1)..end];
                    var prop = current?.GetType().GetProperty(propName);
                    if (prop?.GetValue(current) is System.Collections.IList list && int.TryParse(indexStr, out int idx))
                    {
                        if (idx < 0 || idx >= list.Count) return;
                        if (i == segments.Length - 1)
                        {
                            list[idx] = newValue;
                            if (target is HP3LSThermalTestViewModelRemoteClient rc)
                            {
                                rc.AttachLocalPropertyChangedHandlers(list[idx], path);
                            }
                            return;
                        }
                        current = list[idx];
                    }
                    else
                    {
                        return;
                    }
                }
                else
                {
                    if (i == segments.Length - 1)
                    {
                        var prop = current?.GetType().GetProperty(part);
                        prop?.SetValue(current, newValue);
                        if (target is HP3LSThermalTestViewModelRemoteClient rc)
                        {
                            rc.AttachLocalPropertyChangedHandlers(newValue, path);
                        }
                        return;
                    }
                    else
                    {
                        var prop = current?.GetType().GetProperty(part);
                        current = prop?.GetValue(current);
                    }
                }

                if (current == null) return;
            }
        }

        private void AttachLocalPropertyChangedHandlers(object? obj, string prefix)
        {
            if (obj == null) return;

            if (obj is INotifyPropertyChanged inpc)
            {
                inpc.PropertyChanged += async (s, e) =>
                {
                    if (_suppressLocalUpdates) return;
                    var prop = s?.GetType().GetProperty(e.PropertyName);
                    if (prop == null) return;
                    var value = prop.GetValue(s);
                    var path = string.IsNullOrEmpty(prefix) ? e.PropertyName : prefix + "." + e.PropertyName;
                    await UpdatePropertyValueAsync(path, value);
                };
            }

            if (obj is System.Collections.IEnumerable enumerable && obj is not string)
            {
                int index = 0;
                foreach (var item in enumerable)
                {
                    var childPrefix = string.IsNullOrEmpty(prefix) ? $"[{index}]" : prefix + $"[{index}]";
                    AttachLocalPropertyChangedHandlers(item, childPrefix);
                    index++;
                }
                return;
            }

            foreach (var p in obj.GetType().GetProperties())
            {
                var val = p.GetValue(obj);
                var childPrefix = string.IsNullOrEmpty(prefix) ? p.Name : prefix + "." + p.Name;
                AttachLocalPropertyChangedHandlers(val, childPrefix);
            }
        }

        private async Task StartPingLoopAsync()
        {
            string lastStatus = ConnectionStatus;
            while (!_isDisposed)
            {
                try
                {
                    var response = await _grpcClient.PingAsync(new Google.Protobuf.WellKnownTypes.Empty(), cancellationToken: _cts.Token);
                    if (response.Status == Generated.Protos.ConnectionStatus.Connected)
                    {
                        if (lastStatus != "Connected")
                        {
                            try
                            {
                                var state = await _grpcClient.GetStateAsync(new Empty(), cancellationToken: _cts.Token);
                                this.Instructions = state.Instructions;
                                this.CpuTemperatureThreshold = state.CpuTemperatureThreshold;
                                this.CpuLoadThreshold = state.CpuLoadThreshold;
                                this.CpuLoadTimeSpan = state.CpuLoadTimeSpan;
                                this.Zones = new HPSystemsTools.ViewModels.ZoneCollection();
                                foreach (var e in state.Zones.Select(ProtoStateConverters.FromProto)) this.Zones.Add(e);
                                this.TestSettings = ProtoStateConverters.FromProto(state.TestSettings);
                                this.ShowDescription = state.ShowDescription;
                                this.ShowReadme = state.ShowReadme;
                                Debug.WriteLine("[ClientProxy] State re-synced after reconnect.");
                            }
                            catch (Exception ex)
                            {
                                Debug.WriteLine($"[ClientProxy] Error re-syncing state after reconnect: {ex.Message}");
                            }
                        }
                        ConnectionStatus = "Connected";
                        lastStatus = "Connected";
                    }
                    else
                    {
                        ConnectionStatus = "Disconnected";
                        lastStatus = "Disconnected";
                    }
                }
                catch (Exception ex)
                {
                    ConnectionStatus = "Disconnected";
                    lastStatus = "Disconnected";
                    Debug.WriteLine($"[ClientProxy] Ping failed: {ex.Message}. Attempting to reconnect...");
                }
                await Task.Delay(5000);
            }
        }

        public async Task InitializeRemoteAsync(CancellationToken cancellationToken = default)
        {
            if (_isInitialized || _isDisposed) return;
            Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Initializing...");
            try
            {
                using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cts.Token);
                var state = await _grpcClient.GetStateAsync(new Empty(), cancellationToken: linkedCts.Token);
                Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Initial state received.");
                _suppressLocalUpdates = true;
                this.Instructions = state.Instructions;
                this.CpuTemperatureThreshold = state.CpuTemperatureThreshold;
                this.CpuLoadThreshold = state.CpuLoadThreshold;
                this.CpuLoadTimeSpan = state.CpuLoadTimeSpan;
                this.Zones = new HPSystemsTools.ViewModels.ZoneCollection();
                foreach (var e in state.Zones.Select(ProtoStateConverters.FromProto)) this.Zones.Add(e);
                this.TestSettings = ProtoStateConverters.FromProto(state.TestSettings);
                this.ShowDescription = state.ShowDescription;
                this.ShowReadme = state.ShowReadme;
                _suppressLocalUpdates = false;
                AttachLocalPropertyChangedHandlers(this, string.Empty);
                _isInitialized = true;
                Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Initialized successfully.");
                StartListeningToPropertyChanges(_cts.Token);
                _ = StartPingLoopAsync();
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Failed to initialize: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Initialization cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Unexpected error during initialization: " + ex.Message); }
        }

        private void RemoteExecute_StateChanged(HPSystemsTools.Models.ThermalStateEnum state)
        {
            if (!_isInitialized || _isDisposed) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Not initialized or disposed, command StateChanged skipped."); return; }
            Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Executing command StateChanged remotely...");
            try
            {
                _ = _grpcClient.StateChangedAsync(new Generated.Protos.StateChangedRequest { State = (int)state }, cancellationToken: _cts.Token);
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Error executing command StateChanged: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Command StateChanged cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Unexpected error executing command StateChanged: " + ex.Message); }
        }

        private void RemoteExecute_CancelTest()
        {
            if (!_isInitialized || _isDisposed) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Not initialized or disposed, command CancelTest skipped."); return; }
            Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Executing command CancelTest remotely...");
            try
            {
                _ = _grpcClient.CancelTestAsync(new Generated.Protos.CancelTestRequest(), cancellationToken: _cts.Token);
            }
            catch (RpcException ex) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Error executing command CancelTest: " + ex.Status.StatusCode + " - " + ex.Status.Detail); }
            catch (OperationCanceledException) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Command CancelTest cancelled."); }
            catch (Exception ex) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Unexpected error executing command CancelTest: " + ex.Message); }
        }

        private void StartListeningToPropertyChanges(CancellationToken cancellationToken)
        {
            _ = Task.Run(async () =>
            {
                if (_isDisposed) return;
                Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Starting property change listener...");
                try
                {
                    var subscribeRequest = new Generated.Protos.SubscribeRequest { ClientId = _clientId };
                    using var call = _grpcClient.SubscribeToPropertyChanges(subscribeRequest, cancellationToken: cancellationToken);
                    Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Subscribed to property changes. Waiting for updates...");
                    int updateCount = 0;
                    await foreach (var update in call.ResponseStream.ReadAllAsync(cancellationToken))
                    {
                        updateCount++;
                        if (_isDisposed) { Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Disposed during update " + updateCount + ", exiting property update loop."); break; }
                        Debug.WriteLine($"[HP3LSThermalTestViewModelRemoteClient] RAW UPDATE #" + updateCount + " RECEIVED: PropertyName=\"" + update.PropertyName + "\", ValueTypeUrl=\"" + (update.NewValue?.TypeUrl ?? "null_type_url") + "\"");
                        Action updateAction = () =>
                        {
                           try
                           {
                               Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Dispatcher: Attempting to update \"" + update.PropertyName + "\" (Update #" + updateCount + ").");
                               _suppressLocalUpdates = true;
                               if (update.ChangeType == "nested")
                               {
                                   var val = UnpackAny(update.NewValue);
                                   SetValueByPath(this, update.PropertyPath, val);
                               }
                               else
                               {
                                   switch (update.PropertyName)
                                   {
                                   case nameof(Instructions):
                 if (update.NewValue!.Is(StringValue.Descriptor)) this.Instructions = update.NewValue.Unpack<StringValue>().Value; break;
                                   case nameof(CpuTemperatureThreshold):
                     if (update.NewValue!.Is(Int32Value.Descriptor)) this.CpuTemperatureThreshold = (int)update.NewValue.Unpack<Int32Value>().Value; break;
                                   case nameof(CpuLoadThreshold):
                     if (update.NewValue!.Is(Int32Value.Descriptor)) this.CpuLoadThreshold = (int)update.NewValue.Unpack<Int32Value>().Value; break;
                                   case nameof(CpuLoadTimeSpan):
                     if (update.NewValue!.Is(Int32Value.Descriptor)) this.CpuLoadTimeSpan = (int)update.NewValue.Unpack<Int32Value>().Value; break;
                                   case nameof(Zones):
                                       Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Unpacking for Zones with WKT Any not fully implemented or is Any."); break;
                                   case nameof(TestSettings):
                                       Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Unpacking for TestSettings with WKT Any not fully implemented or is Any."); break;
                                   case nameof(ShowDescription):
                    if (update.NewValue!.Is(BoolValue.Descriptor)) this.ShowDescription = update.NewValue.Unpack<BoolValue>().Value; break;
                                   case nameof(ShowReadme):
                    if (update.NewValue!.Is(BoolValue.Descriptor)) this.ShowReadme = update.NewValue.Unpack<BoolValue>().Value; break;
                                       default: Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Unknown property in notification: \"" + update.PropertyName + "\""); break;
                                   }
                               }
                           }
                           catch (Exception exInAction) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] EXCEPTION INSIDE updateAction for \"" + update.PropertyName + "\": " + exInAction.ToString()); }
                           finally { _suppressLocalUpdates = false; }
                        };
                        if (_syncContext != null)
                            _syncContext.Post(_ => updateAction(), null);
                        else
                            updateAction();
                        Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Processed update #" + updateCount + " for \"" + update.PropertyName + "\". Still listening...");
                    }
                    Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] ReadAllAsync completed or cancelled after " + updateCount + " updates.");
                }
                catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled) { Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Property subscription RpcException Cancelled."); }
                catch (OperationCanceledException) { Debug.WriteLine($"[ClientProxy:HP3LSThermalTestViewModel] Property subscription OperationCanceledException."); }
                catch (Exception ex) { if (!_isDisposed) Debug.WriteLine("[ClientProxy:HP3LSThermalTestViewModel] Error in property listener: " + ex.GetType().Name + " - " + ex.Message + "\nStackTrace: " + ex.StackTrace); }
                Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Property change listener task finished.");
            }, cancellationToken);
        }

        public void Dispose()
        {
            if (_isDisposed) return;
            _isDisposed = true;
            Debug.WriteLine("[HP3LSThermalTestViewModelRemoteClient] Disposing...");
            _cts.Cancel();
            _cts.Dispose();
        }
    }
}
