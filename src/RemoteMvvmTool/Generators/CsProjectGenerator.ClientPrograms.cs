using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GrpcRemoteMvvmModelUtil;

namespace RemoteMvvmTool.Generators;

public static partial class CsProjectGenerator
{
    // ---------------- Client Program Generators ----------------
    public static string GenerateGuiClientProgram(string projectName, string runType, string protoNs, string serviceName, string clientNs, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        bool isWpf = runType.Equals("wpf", StringComparison.OrdinalIgnoreCase);
        bool isWinForms = runType.Equals("winforms", StringComparison.OrdinalIgnoreCase);
        var modelName = serviceName.EndsWith("Service", StringComparison.Ordinal) ? serviceName[..^"Service".Length] : serviceName;
        var clientClassName = modelName + "RemoteClient";
        var sb = new StringBuilder();
        
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Net.Http;");
        sb.AppendLine("using Grpc.Net.Client;");
        sb.AppendLine($"using {protoNs};");
        sb.AppendLine("using Generated.Clients;");
        sb.AppendLine("using Generated.ViewModels;");
        
        if (isWpf) sb.AppendLine("using System.Windows;");
        if (isWinForms)
        {
            sb.AppendLine("using System.Windows.Forms;");
            sb.AppendLine("using System.ComponentModel;");
            sb.AppendLine("using System.Linq;");
            sb.AppendLine("using System.Threading;");
        }
        
        sb.AppendLine();
        sb.AppendLine("namespace GuiClientApp");
        sb.AppendLine("{");
        sb.AppendLine("    public class Program");
        sb.AppendLine("    {");
        sb.AppendLine("        [STAThread]");
        sb.AppendLine("        public static void Main(string[] args)");
        sb.AppendLine("        {");
        sb.AppendLine("            try");
        sb.AppendLine("            {");
        sb.AppendLine("                int port = 50052;");
        sb.AppendLine("                if (args.Length > 0 && int.TryParse(args[0], out var p)) port = p;");
        sb.AppendLine();
        sb.AppendLine("                var handler = new HttpClientHandler();");
        sb.AppendLine("                handler.ServerCertificateCustomValidationCallback = System.Net.Http.HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;");
        sb.AppendLine("                var channel = GrpcChannel.ForAddress(new Uri(\"https://localhost:\" + port + \"/\"), new GrpcChannelOptions { HttpHandler = handler });");
        sb.AppendLine($"                var grpcClient = new {serviceName}.{serviceName}Client(channel);");
        sb.AppendLine($"                var vm = new {clientClassName}(grpcClient);");
        sb.AppendLine("                vm.InitializeRemoteAsync().GetAwaiter().GetResult();");
        sb.AppendLine();

        if (isWpf)
        {
            sb.AppendLine("                var app = new Application();");
            sb.AppendLine("                var win = new MainWindow(vm);");
            sb.AppendLine("                app.Run(win);");
        }
        else if (isWinForms)
        {
            sb.AppendLine("                WinFormsGui.Run(vm);");
        }
        else
        {
            sb.AppendLine("                Console.WriteLine(\"Unsupported GUI platform\");");
        }
        
        sb.AppendLine("            }");
        sb.AppendLine("            catch (Exception ex)");
        sb.AppendLine("            {");
        sb.AppendLine("                Console.WriteLine(\"SERVER_ERROR_START\");");
        sb.AppendLine("                Console.WriteLine(ex);");
        sb.AppendLine("                Console.WriteLine(\"SERVER_ERROR_END\");");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    // ---------------- WinForms Helper Generator ----------------
    public static string GenerateWinFormsGui(string projectName, string serviceName, string clientClassName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated> WinForms GUI </auto-generated>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Windows.Forms;");
        sb.AppendLine("using System.ComponentModel;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Drawing;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using Generated.Clients;");  // Add this namespace for RemoteClient classes
        sb.AppendLine();
        sb.AppendLine("namespace GuiClientApp");
        sb.AppendLine("{");
        
        // Generate PropertyNodeInfo class first (outside of the WinFormsGui class)
        sb.AppendLine("    // Property node information class");
        sb.AppendLine("    class PropertyNodeInfo");
        sb.AppendLine("    {");
        sb.AppendLine("        public string PropertyName { get; set; } = string.Empty;");
        sb.AppendLine("        public object? Object { get; set; }");
        sb.AppendLine("        public bool IsSimpleProperty { get; set; }");
        sb.AppendLine("        public bool IsBooleanProperty { get; set; }");
        sb.AppendLine("        public bool IsEnumProperty { get; set; }");
        sb.AppendLine("        public bool IsCollectionProperty { get; set; }");
        sb.AppendLine("        public bool IsComplexProperty { get; set; }");
        sb.AppendLine("        public bool IsCollectionItem { get; set; }");
        sb.AppendLine("        public int CollectionIndex { get; set; }");
        sb.AppendLine("    }");
        sb.AppendLine();
        
        sb.AppendLine("    public static class WinFormsGui");
        sb.AppendLine("    {");
        sb.AppendLine($"        public static void Run({clientClassName} vm)");
        sb.AppendLine("        {");
        sb.AppendLine("            Application.EnableVisualStyles();");
        sb.AppendLine($"            var form = new Form {{ Text = \"{projectName} GUI Client\", Width = 1150, Height = 780, StartPosition = FormStartPosition.CenterScreen }};");
        sb.AppendLine();
        sb.AppendLine("            var split = new SplitContainer { Dock = DockStyle.Fill, SplitterDistance = 400 };");
        sb.AppendLine("            form.Controls.Add(split);");
        sb.AppendLine();
        sb.AppendLine("            var statusStrip = new StatusStrip();");
        sb.AppendLine("            var statusLbl = new ToolStripStatusLabel();");
        sb.AppendLine("            statusStrip.Items.Add(statusLbl);");
        sb.AppendLine("            form.Controls.Add(statusStrip);");
        sb.AppendLine("            statusStrip.Dock = DockStyle.Bottom;");
        sb.AppendLine("            statusLbl.Text = \"Ready\";");
        sb.AppendLine();
        
        // Generate PropertyDiscoveryUtility tree view code but extract just the UI setup without methods
        var analysis = PropertyDiscoveryUtility.AnalyzeProperties(props);
        
        // Generate tree setup
        sb.AppendLine("            // Tree view for client properties");
        sb.AppendLine("            var tree = new TreeView { Dock = DockStyle.Fill, HideSelection = false };");
        sb.AppendLine("            split.Panel1.Controls.Add(tree);");
        sb.AppendLine();
        
        // Generate tree control buttons
        sb.AppendLine("            // Add tree view control buttons");
        sb.AppendLine("            var treeButtonsPanel = new FlowLayoutPanel");
        sb.AppendLine("            {");
        sb.AppendLine("                Height = 35,");
        sb.AppendLine("                FlowDirection = FlowDirection.LeftToRight,");
        sb.AppendLine("                AutoSize = false,");
        sb.AppendLine("                Dock = DockStyle.Bottom");
        sb.AppendLine("            };");
        sb.AppendLine("            split.Panel1.Controls.Add(treeButtonsPanel);");
        sb.AppendLine();
        sb.AppendLine("            var refreshBtn = new Button { Text = \"Refresh\", Width = 70, Height = 25 };");
        sb.AppendLine("            var expandBtn = new Button { Text = \"Expand All\", Width = 80, Height = 25 };");
        sb.AppendLine("            var collapseBtn = new Button { Text = \"Collapse\", Width = 70, Height = 25 };");
        sb.AppendLine("            treeButtonsPanel.Controls.Add(refreshBtn);");
        sb.AppendLine("            treeButtonsPanel.Controls.Add(expandBtn);");
        sb.AppendLine("            treeButtonsPanel.Controls.Add(collapseBtn);");
        sb.AppendLine();
        
        // Generate the LoadTree method inline (simplified)
        sb.AppendLine("            // Property loading method");
        sb.AppendLine("            Action LoadTree = () =>");
        sb.AppendLine("            {");
        sb.AppendLine("                try");
        sb.AppendLine("                {");
        sb.AppendLine("                    tree.BeginUpdate();");
        sb.AppendLine("                    tree.Nodes.Clear();");
        sb.AppendLine("                    var rootNode = new TreeNode(\"Client ViewModel Properties\");");
        sb.AppendLine("                    tree.Nodes.Add(rootNode);");
        
        // Generate property categorization
        if (analysis.SimpleProperties.Any())
        {
            sb.AppendLine("                    var simplePropsNode = new TreeNode(\"Simple Properties\");");
            sb.AppendLine("                    rootNode.Nodes.Add(simplePropsNode);");
            foreach (var prop in analysis.SimpleProperties)
            {
                sb.AppendLine($"                    try");
                sb.AppendLine("                    {");
                // Fix: Handle value types properly - don't use null-conditional operator on value types
                // Also add extra defensive coding for Memory<T> and potential method groups
                if (IsValueType(prop.TypeString) || prop.TypeString.Contains("Memory<") || prop.TypeString.Contains("Span<"))
                {
                    sb.AppendLine($"                        var {prop.Name.ToLower()}Value = vm.{prop.Name}.ToString();");
                }
                else
                {
                    // For reference types, use defensive null handling but also check for method groups
                    sb.AppendLine($"                        object propValue = vm.{prop.Name};");
                    sb.AppendLine($"                        var {prop.Name.ToLower()}Value = propValue?.ToString() ?? \"<null>\";");
                }
                sb.AppendLine($"                        var {prop.Name.ToLower()}Node = new TreeNode(\"{prop.Name}: \" + {prop.Name.ToLower()}Value);");
                sb.AppendLine($"                        {prop.Name.ToLower()}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", Object = vm, IsSimpleProperty = true }};");
                sb.AppendLine($"                        simplePropsNode.Nodes.Add({prop.Name.ToLower()}Node);");
                sb.AppendLine("                    }");
                sb.AppendLine($"                    catch (Exception ex)");
                sb.AppendLine("                    {");
                sb.AppendLine($"                        var {prop.Name.ToLower()}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
                sb.AppendLine($"                        simplePropsNode.Nodes.Add({prop.Name.ToLower()}ErrorNode);");
                sb.AppendLine("                    }");
            }
        }
        
        if (analysis.BooleanProperties.Any())
        {
            sb.AppendLine("                    var boolPropsNode = new TreeNode(\"Boolean Properties\");");
            sb.AppendLine("                    rootNode.Nodes.Add(boolPropsNode);");
            foreach (var prop in analysis.BooleanProperties)
            {
                sb.AppendLine($"                    try");
                sb.AppendLine("                    {");
                sb.AppendLine($"                        var {prop.Name.ToLower()}Node = new TreeNode(\"{prop.Name}: \" + vm.{prop.Name});");
                sb.AppendLine($"                        {prop.Name.ToLower()}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", Object = vm, IsBooleanProperty = true }};");
                sb.AppendLine($"                        boolPropsNode.Nodes.Add({prop.Name.ToLower()}Node);");
                sb.AppendLine("                    }");
                sb.AppendLine($"                    catch (Exception ex)");
                sb.AppendLine("                    {");
                sb.AppendLine($"                        var {prop.Name.ToLower()}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
                sb.AppendLine($"                        boolPropsNode.Nodes.Add({prop.Name.ToLower()}ErrorNode);");
                sb.AppendLine("                    }");
            }
        }
        
        if (analysis.CollectionProperties.Any())
        {
            sb.AppendLine("                    var collectionPropsNode = new TreeNode(\"Collections\");");
            sb.AppendLine("                    rootNode.Nodes.Add(collectionPropsNode);");
            foreach (var prop in analysis.CollectionProperties)
            {
                sb.AppendLine($"                    try");
                sb.AppendLine("                    {");
                sb.AppendLine($"                        object collectionValue = vm.{prop.Name};");
                sb.AppendLine($"                        int itemCount = 0;");
                sb.AppendLine($"                        if (collectionValue is System.Collections.ICollection collection)");
                sb.AppendLine("                        {");
                sb.AppendLine("                            itemCount = collection.Count;");
                sb.AppendLine("                        }");
                sb.AppendLine($"                        else if (collectionValue != null)");
                sb.AppendLine("                        {");
                sb.AppendLine($"                            // Try to get count via reflection for other collection-like types");
                sb.AppendLine($"                            try");
                sb.AppendLine("                            {");
                sb.AppendLine($"                                var countProp = collectionValue.GetType().GetProperty(\"Count\") ?? collectionValue.GetType().GetProperty(\"Length\");");
                sb.AppendLine($"                                if (countProp != null)");
                sb.AppendLine("                                {");
                sb.AppendLine($"                                    itemCount = (int)(countProp.GetValue(collectionValue) ?? 0);");
                sb.AppendLine("                                }");
                sb.AppendLine("                            }");
                sb.AppendLine("                            catch { }");
                sb.AppendLine("                        }");
                sb.AppendLine($"                        var {prop.Name.ToLower()}Node = new TreeNode(\"{prop.Name} [\" + itemCount + \" items]\");");
                sb.AppendLine($"                        {prop.Name.ToLower()}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", Object = vm, IsCollectionProperty = true }};");
                sb.AppendLine($"                        collectionPropsNode.Nodes.Add({prop.Name.ToLower()}Node);");
                sb.AppendLine("                    }");
                sb.AppendLine($"                    catch (Exception ex)");
                sb.AppendLine("                    {");
                sb.AppendLine($"                        var {prop.Name.ToLower()}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
                sb.AppendLine($"                        collectionPropsNode.Nodes.Add({prop.Name.ToLower()}ErrorNode);");
                sb.AppendLine("                    }");
            }
        }
        
        if (analysis.EnumProperties.Any())
        {
            sb.AppendLine("                    var enumPropsNode = new TreeNode(\"Enum Properties\");");
            sb.AppendLine("                    rootNode.Nodes.Add(enumPropsNode);");
            foreach (var prop in analysis.EnumProperties)
            {
                sb.AppendLine($"                    try");
                sb.AppendLine("                    {");
                sb.AppendLine($"                        var {prop.Name.ToLower()}Node = new TreeNode(\"{prop.Name}: \" + vm.{prop.Name});");
                sb.AppendLine($"                        {prop.Name.ToLower()}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", Object = vm, IsEnumProperty = true }};");
                sb.AppendLine($"                        enumPropsNode.Nodes.Add({prop.Name.ToLower()}Node);");
                sb.AppendLine("                    }");
                sb.AppendLine($"                    catch (Exception ex)");
                sb.AppendLine("                    {");
                sb.AppendLine($"                        var {prop.Name.ToLower()}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
                sb.AppendLine($"                        enumPropsNode.Nodes.Add({prop.Name.ToLower()}ErrorNode);");
                sb.AppendLine("                    }");
            }
        }
        
        sb.AppendLine("                    rootNode.Expand();");
        sb.AppendLine("                }");
        sb.AppendLine("                catch { }");
        sb.AppendLine("                finally");
        sb.AppendLine("                {");
        sb.AppendLine("                    tree.EndUpdate();");
        sb.AppendLine("                }");
        sb.AppendLine("            };");
        sb.AppendLine();
        
        // Wire up tree events
        sb.AppendLine("            refreshBtn.Click += (_, __) => LoadTree();");
        sb.AppendLine("            expandBtn.Click += (_, __) => tree.ExpandAll();");
        sb.AppendLine("            collapseBtn.Click += (_, __) => tree.CollapseAll();");
        sb.AppendLine();
        
        // Property change monitoring
        sb.AppendLine("            if (vm is INotifyPropertyChanged inpc)");
        sb.AppendLine("            {");
        sb.AppendLine("                inpc.PropertyChanged += (_, e) =>");
        sb.AppendLine("                {");
        sb.AppendLine("                    try { LoadTree(); }");
        sb.AppendLine("                    catch { }");
        sb.AppendLine("                };");
        sb.AppendLine("            }");
        sb.AppendLine();
        
        // Load initial tree
        sb.AppendLine("            LoadTree();");
        sb.AppendLine();
        
        sb.AppendLine("            // Right panel for property details");
        sb.AppendLine("            var rightPanel = new Panel { Dock = DockStyle.Fill, AutoScroll = true };");
        sb.AppendLine("            split.Panel2.Controls.Add(rightPanel);");
        sb.AppendLine();
        sb.AppendLine("            var flow = new FlowLayoutPanel");
        sb.AppendLine("            {");
        sb.AppendLine("                Dock = DockStyle.Top,");
        sb.AppendLine("                AutoSize = true,");
        sb.AppendLine("                FlowDirection = FlowDirection.TopDown,");
        sb.AppendLine("                WrapContents = false");
        sb.AppendLine("            };");
        sb.AppendLine("            rightPanel.Controls.Add(flow);");
        sb.AppendLine();
        
        // Connection status display
        sb.AppendLine("            var status = new Label { AutoSize = true, Font = new System.Drawing.Font(\"Segoe UI\", 9, System.Drawing.FontStyle.Bold) };");
        sb.AppendLine("            try");
        sb.AppendLine("            {");
        sb.AppendLine("                status.DataBindings.Add(\"Text\", vm, \"ConnectionStatus\");");
        sb.AppendLine("            }");
        sb.AppendLine("            catch");
        sb.AppendLine("            {");
        sb.AppendLine("                status.Text = \"Connection status not available\";");
        sb.AppendLine("            }");
        sb.AppendLine("            flow.Controls.Add(status);");
        sb.AppendLine();
        
        // Generate commands section if commands exist
        if (cmds.Any())
        {
            sb.AppendLine("            var cmdGroup = new GroupBox");
            sb.AppendLine("            {");
            sb.AppendLine("                Text = \"Commands\",");
            sb.AppendLine("                AutoSize = true,");
            sb.AppendLine("                AutoSizeMode = AutoSizeMode.GrowAndShrink,");
            sb.AppendLine("                Padding = new Padding(10)");
            sb.AppendLine("            };");
            sb.AppendLine("            flow.Controls.Add(cmdGroup);");
            sb.AppendLine();
            sb.AppendLine("            var cmdFlow = new FlowLayoutPanel");
            sb.AppendLine("            {");
            sb.AppendLine("                Dock = DockStyle.Top,");
            sb.AppendLine("                AutoSize = true,");
            sb.AppendLine("                FlowDirection = FlowDirection.LeftToRight,");
            sb.AppendLine("                WrapContents = true");
            sb.AppendLine("            };");
            sb.AppendLine("            cmdGroup.Controls.Add(cmdFlow);");
            
            int cmdIndex = 0;
            foreach (var c in cmds)
            {
                var baseName = c.MethodName.EndsWith("Async", StringComparison.Ordinal) ? c.MethodName[..^5] : c.MethodName;
                sb.AppendLine();
                sb.AppendLine($"            var btn{cmdIndex} = new Button {{ Text = \"{baseName}\", Width = 140, Height = 30 }};");
                sb.AppendLine($"            btn{cmdIndex}.Click += (_, __) =>");
                sb.AppendLine("            {");
                sb.AppendLine("                try");
                sb.AppendLine("                {");
                sb.AppendLine($"                    vm.{c.CommandPropertyName}?.Execute(null);");
                sb.AppendLine("                }");
                sb.AppendLine("                catch (Exception ex)");
                sb.AppendLine("                {");
                sb.AppendLine($"                    MessageBox.Show($\"Error executing {baseName}: {{ex.Message}}\", \"Command Error\", MessageBoxButtons.OK, MessageBoxIcon.Warning);");
                sb.AppendLine("                }");
                sb.AppendLine("            };");
                sb.AppendLine($"            cmdFlow.Controls.Add(btn{cmdIndex});");
                cmdIndex++;
            }
        }
        
        sb.AppendLine();
        sb.AppendLine("            Application.Run(form);");
        sb.AppendLine("        }");
        
        // Helper method to determine if a type is a value type
        sb.AppendLine();
        sb.AppendLine("        private static bool IsValueType(string typeName)");
        sb.AppendLine("        {");
        sb.AppendLine("            return typeName == \"int\" || typeName == \"double\" || typeName == \"float\" ||");
        sb.AppendLine("                   typeName == \"decimal\" || typeName == \"long\" || typeName == \"short\" ||");
        sb.AppendLine("                   typeName == \"byte\" || typeName == \"sbyte\" || typeName == \"uint\" ||");
        sb.AppendLine("                   typeName == \"ulong\" || typeName == \"ushort\" || typeName == \"nuint\" ||");
        sb.AppendLine("                   typeName == \"nint\" || typeName == \"char\" || typeName == \"bool\" ||");
        sb.AppendLine("                   typeName == \"DateTime\" || typeName == \"DateOnly\" || typeName == \"TimeOnly\" ||");
        sb.AppendLine("                   typeName == \"Guid\" || typeName == \"TimeSpan\" || typeName == \"Half\" ||");
        sb.AppendLine("                   typeName.StartsWith(\"Memory<\") || typeName.StartsWith(\"ReadOnlyMemory<\") ||");
        sb.AppendLine("                   typeName.StartsWith(\"Span<\") || typeName.StartsWith(\"ReadOnlySpan<\");");
        sb.AppendLine("        }");
        
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    // Helper method to check if a type string represents a value type
    private static bool IsValueType(string typeString)
    {
        // Handle basic value types
        if (typeString == "int" || typeString == "double" || typeString == "float" ||
            typeString == "decimal" || typeString == "long" || typeString == "short" ||
            typeString == "byte" || typeString == "sbyte" || typeString == "uint" ||
            typeString == "ulong" || typeString == "ushort" || typeString == "nuint" ||
            typeString == "nint" || typeString == "char" || typeString == "bool" ||
            typeString == "DateTime" || typeString == "DateOnly" || typeString == "TimeOnly" ||
            typeString == "Guid" || typeString == "TimeSpan" || typeString == "Half")
        {
            return true;
        }
        
        // Handle Memory<T> and Span<T> types (these are value types/structs)
        if (typeString.StartsWith("Memory<") || typeString.StartsWith("ReadOnlyMemory<") ||
            typeString.StartsWith("Span<") || typeString.StartsWith("ReadOnlySpan<"))
        {
            return true;
        }
        
        // Handle nullable value types (e.g., "int?", "DateTime?")
        if (typeString.EndsWith("?"))
        {
            var baseType = typeString.TrimEnd('?');
            return IsValueType(baseType);
        }
        
        return false;
    }
}