using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GrpcRemoteMvvmModelUtil;

namespace RemoteMvvmTool.Generators;

public static partial class CsProjectGenerator
{
    // ---------------- Client Program Generators ----------------
    public static string GenerateGuiClientProgram(string projectName, string runType, string protoNs, string serviceName, string clientNs, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        bool isWpf = runType.Equals("wpf", StringComparison.OrdinalIgnoreCase);
        bool isWinForms = runType.Equals("winforms", StringComparison.OrdinalIgnoreCase);
        var modelName = serviceName.EndsWith("Service", StringComparison.Ordinal) ? serviceName[..^"Service".Length] : serviceName;
        var clientClassName = modelName + "RemoteClient";
        var sb = new StringBuilder();
        
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Net.Http;");
        sb.AppendLine("using Grpc.Net.Client;");
        sb.AppendLine($"using {protoNs};");
        sb.AppendLine("using Generated.Clients;");
        sb.AppendLine("using Generated.ViewModels;");
        
        if (isWpf) sb.AppendLine("using System.Windows;");
        if (isWinForms)
        {
            sb.AppendLine("using System.Windows.Forms;");
            sb.AppendLine("using System.ComponentModel;");
            sb.AppendLine("using System.Linq;");
            sb.AppendLine("using System.Threading;");
        }
        
        sb.AppendLine();
        sb.AppendLine("namespace GuiClientApp");
        sb.AppendLine("{");
        sb.AppendLine("    public class Program");
        sb.AppendLine("    {");
        sb.AppendLine("        [STAThread]");
        sb.AppendLine("        public static void Main(string[] args)");
        sb.AppendLine("        {");
        sb.AppendLine("            try");
        sb.AppendLine("            {");
        sb.AppendLine("                int port = 50052;");
        sb.AppendLine("                if (args.Length > 0 && int.TryParse(args[0], out var p)) port = p;");
        sb.AppendLine();
        sb.AppendLine("                var handler = new HttpClientHandler();");
        sb.AppendLine("                handler.ServerCertificateCustomValidationCallback = System.Net.Http.HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;");
        sb.AppendLine("                var channel = GrpcChannel.ForAddress(new Uri(\"https://localhost:\" + port + \"/\"), new GrpcChannelOptions { HttpHandler = handler });");
        sb.AppendLine($"                var grpcClient = new {serviceName}.{serviceName}Client(channel);");
        sb.AppendLine($"                var vm = new {clientClassName}(grpcClient);");
        sb.AppendLine("                vm.InitializeRemoteAsync().GetAwaiter().GetResult();");
        sb.AppendLine();

        if (isWpf)
        {
            sb.AppendLine("                var app = new Application();");
            sb.AppendLine("                var win = new MainWindow(vm);");
            sb.AppendLine("                app.Run(win);");
        }
        else if (isWinForms)
        {
            sb.AppendLine("                WinFormsGui.Run(vm);");
        }
        else
        {
            sb.AppendLine("                Console.WriteLine(\"Unsupported GUI platform\");");
        }
        
        sb.AppendLine("            }");
        sb.AppendLine("            catch (Exception ex)");
        sb.AppendLine("            {");
        sb.AppendLine("                Console.WriteLine(\"SERVER_ERROR_START\");");
        sb.AppendLine("                Console.WriteLine(ex);");
        sb.AppendLine("                Console.WriteLine(\"SERVER_ERROR_END\");");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    // ---------------- WinForms Helper Generator ----------------
    public static string GenerateWinFormsGui(string projectName, string serviceName, string clientClassName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        // Analyze properties for hierarchical UI generation using legacy analysis since the hierarchical analysis may be causing issues
        var analysis = PropertyDiscoveryUtility.AnalyzeProperties(props);
        
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated> WinForms GUI </auto-generated>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Windows.Forms;");
        sb.AppendLine("using System.ComponentModel;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Drawing;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using Generated.Clients;");  // Add this namespace for RemoteClient classes
        sb.AppendLine();
        sb.AppendLine("namespace GuiClientApp");
        sb.AppendLine("{");
        
        // Generate PropertyNodeInfo class first (outside of the WinFormsGui class)
        sb.AppendLine("    // Property node information class for UI binding");
        sb.AppendLine("    class PropertyNodeInfo");
        sb.AppendLine("    {");
        sb.AppendLine("        public string PropertyName { get; set; } = string.Empty;");
        sb.AppendLine("        public string PropertyPath { get; set; } = string.Empty;");
        sb.AppendLine("        public object? Object { get; set; }");
        sb.AppendLine("        public bool IsSimpleProperty { get; set; }");
        sb.AppendLine("        public bool IsBooleanProperty { get; set; }");
        sb.AppendLine("        public bool IsEnumProperty { get; set; }");
        sb.AppendLine("        public bool IsCollectionProperty { get; set; }");
        sb.AppendLine("        public bool IsComplexProperty { get; set; }");
        sb.AppendLine("        public bool IsCollectionItem { get; set; }");
        sb.AppendLine("        public int CollectionIndex { get; set; }");
        sb.AppendLine("        public int Depth { get; set; }");
        sb.AppendLine("    }");
        sb.AppendLine();
        
        sb.AppendLine("    public static class WinFormsGui");
        sb.AppendLine("    {");
        sb.AppendLine($"        public static void Run({clientClassName} vm)");
        sb.AppendLine("        {");
        sb.AppendLine("            Application.EnableVisualStyles();");
        sb.AppendLine($"            var form = new Form {{ Text = \"{projectName} GUI Client\", Width = 1150, Height = 780, StartPosition = FormStartPosition.CenterScreen }};");
        sb.AppendLine();
        sb.AppendLine("            var split = new SplitContainer { Dock = DockStyle.Fill, SplitterDistance = 400 };");
        sb.AppendLine("            form.Controls.Add(split);");
        sb.AppendLine();
        sb.AppendLine("            var statusStrip = new StatusStrip();");
        sb.AppendLine("            var statusLbl = new ToolStripStatusLabel();");
        sb.AppendLine("            statusStrip.Items.Add(statusLbl);");
        sb.AppendLine("            form.Controls.Add(statusStrip);");
        sb.AppendLine("            statusStrip.Dock = DockStyle.Bottom;");
        sb.AppendLine("            statusLbl.Text = \"Ready\";");
        sb.AppendLine();
        
        // Generate tree setup using legacy analysis to avoid syntax issues
        sb.AppendLine("            // Tree view for client properties using property analysis");
        sb.AppendLine("            var tree = new TreeView { Dock = DockStyle.Fill, HideSelection = false };");
        sb.AppendLine("            split.Panel1.Controls.Add(tree);");
        sb.AppendLine();
        
        // Generate tree control buttons
        sb.AppendLine("            // Add tree view control buttons");
        sb.AppendLine("            var treeButtonsPanel = new FlowLayoutPanel");
        sb.AppendLine("            {");
        sb.AppendLine("                Height = 35,");
        sb.AppendLine("                FlowDirection = FlowDirection.LeftToRight,");
        sb.AppendLine("                AutoSize = false,");
        sb.AppendLine("                Dock = DockStyle.Bottom");
        sb.AppendLine("            };");
        sb.AppendLine("            split.Panel1.Controls.Add(treeButtonsPanel);");
        sb.AppendLine();
        sb.AppendLine("            var refreshBtn = new Button { Text = \"Refresh\", Width = 70, Height = 25 };");
        sb.AppendLine("            var expandBtn = new Button { Text = \"Expand All\", Width = 80, Height = 25 };");
        sb.AppendLine("            var collapseBtn = new Button { Text = \"Collapse\", Width = 70, Height = 25 };");
        sb.AppendLine("            treeButtonsPanel.Controls.Add(refreshBtn);");
        sb.AppendLine("            treeButtonsPanel.Controls.Add(expandBtn);");
        sb.AppendLine("            treeButtonsPanel.Controls.Add(collapseBtn);");
        sb.AppendLine();
        
        // Generate the LoadTree method using simple property categorization to avoid syntax errors
        sb.AppendLine("            // Property loading method using legacy property analysis");
        sb.AppendLine("            Action LoadTree = () =>");
        sb.AppendLine("            {");
        sb.AppendLine("                try");
        sb.AppendLine("                {");
        sb.AppendLine("                    tree.BeginUpdate();");
        sb.AppendLine("                    tree.Nodes.Clear();");
        sb.AppendLine("                    var rootNode = new TreeNode(\"Client ViewModel Properties\");");
        sb.AppendLine("                    tree.Nodes.Add(rootNode);");
        
        // Generate property sections using the legacy analysis approach
        GenerateSimplePropertySection(sb, analysis.SimpleProperties, "vm");
        GenerateBooleanPropertySection(sb, analysis.BooleanProperties, "vm");
        GenerateEnumPropertySection(sb, analysis.EnumProperties, "vm");
        GenerateCollectionPropertySection(sb, analysis.CollectionProperties, "vm");
        GenerateComplexPropertySection(sb, analysis.ComplexProperties, "vm");
        
        sb.AppendLine("                    rootNode.Expand();");
        sb.AppendLine("                }");
        sb.AppendLine("                catch (Exception ex)");
        sb.AppendLine("                {");
        sb.AppendLine("                    tree.Nodes.Clear();");
        sb.AppendLine("                    tree.Nodes.Add(new TreeNode(\"Error loading properties: \" + ex.Message));");
        sb.AppendLine("                }");
        sb.AppendLine("                finally");
        sb.AppendLine("                {");
        sb.AppendLine("                    tree.EndUpdate();");
        sb.AppendLine("                }");
        sb.AppendLine("            };");
        sb.AppendLine();
        
        // Wire up tree events
        sb.AppendLine("            refreshBtn.Click += (_, __) => LoadTree();");
        sb.AppendLine("            expandBtn.Click += (_, __) => tree.ExpandAll();");
        sb.AppendLine("            collapseBtn.Click += (_, __) => tree.CollapseAll();");
        sb.AppendLine();
        
        // Property change monitoring
        sb.AppendLine("            if (vm is INotifyPropertyChanged inpc)");
        sb.AppendLine("            {");
        sb.AppendLine("                inpc.PropertyChanged += (_, e) =>");
        sb.AppendLine("                {");
        sb.AppendLine("                    try { LoadTree(); }");
        sb.AppendLine("                    catch { }");
        sb.AppendLine("                };");
        sb.AppendLine("            }");
        sb.AppendLine();
        
        // Load initial tree
        sb.AppendLine("            LoadTree();");
        sb.AppendLine();
        
        sb.AppendLine("            // Right panel for property details");
        sb.AppendLine("            var rightPanel = new Panel { Dock = DockStyle.Fill, AutoScroll = true };");
        sb.AppendLine("            split.Panel2.Controls.Add(rightPanel);");
        sb.AppendLine();
        sb.AppendLine("            var flow = new FlowLayoutPanel");
        sb.AppendLine("            {");
        sb.AppendLine("                Dock = DockStyle.Top,");
        sb.AppendLine("                AutoSize = true,");
        sb.AppendLine("                FlowDirection = FlowDirection.TopDown,");
        sb.AppendLine("                WrapContents = false");
        sb.AppendLine("            };");
        sb.AppendLine("            rightPanel.Controls.Add(flow);");
        sb.AppendLine();
        
        // Connection status display
        sb.AppendLine("            var status = new Label { AutoSize = true, Font = new System.Drawing.Font(\"Segoe UI\", 9, System.Drawing.FontStyle.Bold) };");
        sb.AppendLine("            try");
        sb.AppendLine("            {");
        sb.AppendLine("                status.DataBindings.Add(\"Text\", vm, \"ConnectionStatus\");");
        sb.AppendLine("            }");
        sb.AppendLine("            catch");
        sb.AppendLine("            {");
        sb.AppendLine("                status.Text = \"Connection status not available\";");
        sb.AppendLine("            }");
        sb.AppendLine("            flow.Controls.Add(status);");
        sb.AppendLine();
        
        // Generate commands section if commands exist
        if (cmds.Any())
        {
            sb.AppendLine("            var cmdGroup = new GroupBox");
            sb.AppendLine("            {");
            sb.AppendLine("                Text = \"Commands\",");
            sb.AppendLine("                AutoSize = true,");
            sb.AppendLine("                AutoSizeMode = AutoSizeMode.GrowAndShrink,");
            sb.AppendLine("                Padding = new Padding(10)");
            sb.AppendLine("            };");
            sb.AppendLine("            flow.Controls.Add(cmdGroup);");
            sb.AppendLine();
            sb.AppendLine("            var cmdFlow = new FlowLayoutPanel");
            sb.AppendLine("            {");
            sb.AppendLine("                Dock = DockStyle.Top,");
            sb.AppendLine("                AutoSize = true,");
            sb.AppendLine("                FlowDirection = FlowDirection.LeftToRight,");
            sb.AppendLine("                WrapContents = true");
            sb.AppendLine("            };");
            sb.AppendLine("            cmdGroup.Controls.Add(cmdFlow);");
            
            int cmdIndex = 0;
            foreach (var c in cmds)
            {
                var baseName = c.MethodName.EndsWith("Async", StringComparison.Ordinal) ? c.MethodName[..^5] : c.MethodName;
                sb.AppendLine();
                sb.AppendLine($"            var btn{cmdIndex} = new Button {{ Text = \"{baseName}\", Width = 140, Height = 30 }};");
                sb.AppendLine($"            btn{cmdIndex}.Click += (_, __) =>");
                sb.AppendLine("            {");
                sb.AppendLine("                try");
                sb.AppendLine("                {");
                sb.AppendLine($"                    vm.{c.CommandPropertyName}?.Execute(null);");
                sb.AppendLine("                }");
                sb.AppendLine("                catch (Exception ex)");
                sb.AppendLine("                {");
                sb.AppendLine($"                    MessageBox.Show($\"Error executing {baseName}: {{ex.Message}}\", \"Command Error\", MessageBoxButtons.OK, MessageBoxIcon.Warning);");
                sb.AppendLine("                }");
                sb.AppendLine("            };");
                sb.AppendLine($"            cmdFlow.Controls.Add(btn{cmdIndex});");
                cmdIndex++;
            }
        }
        
        sb.AppendLine();
        sb.AppendLine("            Application.Run(form);");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    // Generate property sections using safe legacy approach
    private static void GenerateSimplePropertySection(StringBuilder sb, List<PropertyInfo> properties, string viewModelVarName)
    {
        if (!properties.Any()) return;
        
        sb.AppendLine("                    // Simple Properties");
        sb.AppendLine("                    var simplePropsNode = new TreeNode(\"Simple Properties\");");
        sb.AppendLine("                    rootNode.Nodes.Add(simplePropsNode);");
        
        foreach (var prop in properties)
        {
            var metadata = PropertyDiscoveryUtility.AnalyzePropertyMetadata(prop);
            sb.AppendLine("                    try");
            sb.AppendLine("                    {");
            
            if (metadata.IsNonNullableValueType)
            {
                sb.AppendLine($"                        var {metadata.SafeVariableName}Value = {viewModelVarName}.{metadata.SafePropertyAccess}.ToString();");
            }
            else
            {
                sb.AppendLine($"                        var {metadata.SafeVariableName}Value = {viewModelVarName}.{metadata.SafePropertyAccess}?.ToString() ?? \"<null>\";");
            }
            
            sb.AppendLine($"                        var {metadata.SafeVariableName}Node = new TreeNode(\"{prop.Name}: \" + {metadata.SafeVariableName}Value);");
            sb.AppendLine($"                        {metadata.SafeVariableName}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", PropertyPath = \"{prop.Name}\", Object = {viewModelVarName}, IsSimpleProperty = true }};");
            sb.AppendLine($"                        simplePropsNode.Nodes.Add({metadata.SafeVariableName}Node);");
            sb.AppendLine("                    }");
            sb.AppendLine("                    catch (Exception ex)");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        var {metadata.SafeVariableName}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
            sb.AppendLine($"                        simplePropsNode.Nodes.Add({metadata.SafeVariableName}ErrorNode);");
            sb.AppendLine("                    }");
        }
    }
    
    private static void GenerateBooleanPropertySection(StringBuilder sb, List<PropertyInfo> properties, string viewModelVarName)
    {
        if (!properties.Any()) return;
        
        sb.AppendLine("                    // Boolean Properties");
        sb.AppendLine("                    var boolPropsNode = new TreeNode(\"Boolean Properties\");");
        sb.AppendLine("                    rootNode.Nodes.Add(boolPropsNode);");
        
        foreach (var prop in properties)
        {
            var metadata = PropertyDiscoveryUtility.AnalyzePropertyMetadata(prop);
            sb.AppendLine("                    try");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        var {metadata.SafeVariableName}Node = new TreeNode(\"{prop.Name}: \" + {viewModelVarName}.{metadata.SafePropertyAccess}.ToString());");
            sb.AppendLine($"                        {metadata.SafeVariableName}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", PropertyPath = \"{prop.Name}\", Object = {viewModelVarName}, IsBooleanProperty = true }};");
            sb.AppendLine($"                        boolPropsNode.Nodes.Add({metadata.SafeVariableName}Node);");
            sb.AppendLine("                    }");
            sb.AppendLine("                    catch (Exception ex)");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        var {metadata.SafeVariableName}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
            sb.AppendLine($"                        boolPropsNode.Nodes.Add({metadata.SafeVariableName}ErrorNode);");
            sb.AppendLine("                    }");
        }
    }
    
    private static void GenerateEnumPropertySection(StringBuilder sb, List<PropertyInfo> properties, string viewModelVarName)
    {
        if (!properties.Any()) return;
        
        sb.AppendLine("                    // Enum Properties");
        sb.AppendLine("                    var enumPropsNode = new TreeNode(\"Enum Properties\");");
        sb.AppendLine("                    rootNode.Nodes.Add(enumPropsNode);");
        
        foreach (var prop in properties)
        {
            var metadata = PropertyDiscoveryUtility.AnalyzePropertyMetadata(prop);
            sb.AppendLine("                    try");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        var {metadata.SafeVariableName}Node = new TreeNode(\"{prop.Name}: \" + {viewModelVarName}.{metadata.SafePropertyAccess}.ToString());");
            sb.AppendLine($"                        {metadata.SafeVariableName}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", PropertyPath = \"{prop.Name}\", Object = {viewModelVarName}, IsEnumProperty = true }};");
            sb.AppendLine($"                        enumPropsNode.Nodes.Add({metadata.SafeVariableName}Node);");
            sb.AppendLine("                    }");
            sb.AppendLine("                    catch (Exception ex)");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        var {metadata.SafeVariableName}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
            sb.AppendLine($"                        enumPropsNode.Nodes.Add({metadata.SafeVariableName}ErrorNode);");
            sb.AppendLine("                    }");
        }
    }
    
    private static void GenerateCollectionPropertySection(StringBuilder sb, List<PropertyInfo> properties, string viewModelVarName)
    {
        if (!properties.Any()) return;
        
        sb.AppendLine("                    // Collections");
        sb.AppendLine("                    var collPropsNode = new TreeNode(\"Collections\");");
        sb.AppendLine("                    rootNode.Nodes.Add(collPropsNode);");
        
        foreach (var prop in properties)
        {
            var metadata = PropertyDiscoveryUtility.AnalyzePropertyMetadata(prop);
            sb.AppendLine("                    try");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        if ({viewModelVarName}.{metadata.SafePropertyAccess} != null)");
            sb.AppendLine("                        {");
            
            // Use safe collection access without array syntax issues
            sb.AppendLine($"                            var {metadata.SafeVariableName}Count = {viewModelVarName}.{metadata.SafePropertyAccess}.{metadata.CountProperty};");
            sb.AppendLine($"                            var {metadata.SafeVariableName}Node = new TreeNode(\"{prop.Name} [\" + {metadata.SafeVariableName}Count + \" items]\");");
            sb.AppendLine($"                            {metadata.SafeVariableName}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", PropertyPath = \"{prop.Name}\", Object = {viewModelVarName}, IsCollectionProperty = true }};");
            sb.AppendLine($"                            collPropsNode.Nodes.Add({metadata.SafeVariableName}Node);");
            
            // Check collection type more carefully
            bool isDictionaryItself = (prop.TypeString.Contains("Dictionary<") || 
                                     prop.TypeString.Contains("IDictionary<")) &&
                                     !prop.TypeString.Contains("List<") &&
                                     !prop.TypeString.Contains("IEnumerable<") &&
                                     !prop.TypeString.Contains("Collection<");
                                   
            bool isKeyValuePairCollection = prop.TypeString.Contains("KeyValuePair<");
            
            bool isCollectionOfDictionaries = (prop.TypeString.Contains("List<Dictionary<") ||
                                              prop.TypeString.Contains("IEnumerable<Dictionary<") ||
                                              prop.TypeString.Contains("Collection<Dictionary<"));
            
            // Add sample items if collection is not empty (with proper type handling)
            sb.AppendLine($"                            if ({metadata.SafeVariableName}Count > 0)");
            sb.AppendLine("                            {");
            
            if (isDictionaryItself)
            {
                // For Dictionary<K,V> itself, FirstOrDefault returns KeyValuePair<K,V>
                sb.AppendLine($"                                var {metadata.SafeVariableName}FirstEntry = {viewModelVarName}.{metadata.SafePropertyAccess}.FirstOrDefault();");
                sb.AppendLine($"                                var {metadata.SafeVariableName}SampleNode = new TreeNode(\"[Sample Entry]: \" + {metadata.SafeVariableName}FirstEntry.Key + \" -> \" + {metadata.SafeVariableName}FirstEntry.Value);");
                sb.AppendLine($"                                {metadata.SafeVariableName}Node.Nodes.Add({metadata.SafeVariableName}SampleNode);");
            }
            else if (isCollectionOfDictionaries)
            {
                // For List<Dictionary<K,V>>, FirstOrDefault returns Dictionary<K,V>, then we get its first KeyValuePair
                sb.AppendLine($"                                var {metadata.SafeVariableName}FirstDict = {viewModelVarName}.{metadata.SafePropertyAccess}.FirstOrDefault();");
                sb.AppendLine($"                                if ({metadata.SafeVariableName}FirstDict != null && {metadata.SafeVariableName}FirstDict.Count > 0)");
                sb.AppendLine("                                {");
                sb.AppendLine($"                                    var {metadata.SafeVariableName}FirstEntry = {metadata.SafeVariableName}FirstDict.FirstOrDefault();");
                sb.AppendLine($"                                    var {metadata.SafeVariableName}SampleNode = new TreeNode(\"[Sample Dict Entry]: \" + {metadata.SafeVariableName}FirstEntry.Key + \" -> \" + {metadata.SafeVariableName}FirstEntry.Value);");
                sb.AppendLine($"                                    {metadata.SafeVariableName}Node.Nodes.Add({metadata.SafeVariableName}SampleNode);");
                sb.AppendLine("                                }");
            }
            else if (isKeyValuePairCollection)
            {
                // For collections of KeyValuePair, FirstOrDefault returns KeyValuePair<K,V>
                sb.AppendLine($"                                var {metadata.SafeVariableName}FirstEntry = {viewModelVarName}.{metadata.SafePropertyAccess}.FirstOrDefault();");
                sb.AppendLine($"                                var {metadata.SafeVariableName}SampleNode = new TreeNode(\"[Sample Entry]: \" + {metadata.SafeVariableName}FirstEntry.Key + \" -> \" + {metadata.SafeVariableName}FirstEntry.Value);");
                sb.AppendLine($"                                {metadata.SafeVariableName}Node.Nodes.Add({metadata.SafeVariableName}SampleNode);");
            }
            else if (metadata.IsArrayType)
            {
                // For arrays, access first element safely
                sb.AppendLine($"                                var {metadata.SafeVariableName}FirstItem = {viewModelVarName}.{metadata.SafePropertyAccess}[0];");
                sb.AppendLine($"                                if ({metadata.SafeVariableName}FirstItem != null)");
                sb.AppendLine("                                {");
                sb.AppendLine($"                                    var {metadata.SafeVariableName}SampleNode = new TreeNode(\"[Sample Item]: \" + {metadata.SafeVariableName}FirstItem.ToString());");
                sb.AppendLine($"                                    {metadata.SafeVariableName}Node.Nodes.Add({metadata.SafeVariableName}SampleNode);");
                sb.AppendLine("                                }");
            }
            else
            {
                // For other collections, use LINQ FirstOrDefault
                sb.AppendLine($"                                var {metadata.SafeVariableName}FirstItem = {viewModelVarName}.{metadata.SafePropertyAccess}.FirstOrDefault();");
                
                // Check if the collection contains KeyValuePair (which is a struct and can't be null)
                bool isKeyValuePairType = prop.TypeString.Contains("KeyValuePair<");
                if (isKeyValuePairType)
                {
                    // For KeyValuePair structs, check if collection has items instead of null check
                    sb.AppendLine($"                                if ({viewModelVarName}.{metadata.SafePropertyAccess}.{metadata.CountProperty} > 0)");
                    sb.AppendLine("                                {");
                    sb.AppendLine($"                                    var {metadata.SafeVariableName}SampleNode = new TreeNode(\"[Sample Item]: \" + {metadata.SafeVariableName}FirstItem.ToString());");
                    sb.AppendLine($"                                    {metadata.SafeVariableName}Node.Nodes.Add({metadata.SafeVariableName}SampleNode);");
                    sb.AppendLine("                                }");
                }
                else
                {
                    // For reference types or non-KeyValuePair structs, use appropriate check
                    bool mightBeReferenceType = !prop.TypeString.Contains("<int>") && !prop.TypeString.Contains("<double>") && 
                                               !prop.TypeString.Contains("<float>") && !prop.TypeString.Contains("<bool>") &&
                                               !prop.TypeString.Contains("<decimal>") && !prop.TypeString.Contains("<Guid>") &&
                                               !prop.TypeString.Contains("<DateTime>");
                    if (mightBeReferenceType)
                    {
                        // For reference types, use null check
                        sb.AppendLine($"                                if ({metadata.SafeVariableName}FirstItem != null)");
                        sb.AppendLine("                                {");
                        sb.AppendLine($"                                    var {metadata.SafeVariableName}SampleNode = new TreeNode(\"[Sample Item]: \" + {metadata.SafeVariableName}FirstItem.ToString());");
                        sb.AppendLine($"                                    {metadata.SafeVariableName}Node.Nodes.Add({metadata.SafeVariableName}SampleNode);");
                        sb.AppendLine("                                }");
                    }
                    else
                    {
                        // For value type collections, use count check instead
                        sb.AppendLine($"                                if ({viewModelVarName}.{metadata.SafePropertyAccess}.{metadata.CountProperty} > 0)");
                        sb.AppendLine("                                {");
                        sb.AppendLine($"                                    var {metadata.SafeVariableName}SampleNode = new TreeNode(\"[Sample Item]: \" + {metadata.SafeVariableName}FirstItem.ToString());");
                        sb.AppendLine($"                                    {metadata.SafeVariableName}Node.Nodes.Add({metadata.SafeVariableName}SampleNode);");
                        sb.AppendLine("                                }");
                    }
                }
            }
            
            sb.AppendLine("                            }");
            sb.AppendLine("                        }");
            sb.AppendLine("                    }");
            sb.AppendLine("                    catch (Exception ex)");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        var {metadata.SafeVariableName}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
            sb.AppendLine($"                        collPropsNode.Nodes.Add({metadata.SafeVariableName}ErrorNode);");
            sb.AppendLine("                    }");
        }
    }
    
    private static void GenerateComplexPropertySection(StringBuilder sb, List<PropertyInfo> properties, string viewModelVarName)
    {
        if (!properties.Any()) return;
        
        sb.AppendLine("                    // Complex Properties");
        sb.AppendLine("                    var complexPropsNode = new TreeNode(\"Complex Properties\");");
        sb.AppendLine("                    rootNode.Nodes.Add(complexPropsNode);");
        
        foreach (var prop in properties)
        {
            var metadata = PropertyDiscoveryUtility.AnalyzePropertyMetadata(prop);
            sb.AppendLine("                    try");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        if ({viewModelVarName}.{metadata.SafePropertyAccess} != null)");
            sb.AppendLine("                        {");
            sb.AppendLine($"                            var {metadata.SafeVariableName}Node = new TreeNode(\"{prop.Name}\");");
            sb.AppendLine($"                            {metadata.SafeVariableName}Node.Tag = new PropertyNodeInfo {{ PropertyName = \"{prop.Name}\", PropertyPath = \"{prop.Name}\", Object = {viewModelVarName}.{metadata.SafePropertyAccess}, IsComplexProperty = true }};");
            sb.AppendLine($"                            complexPropsNode.Nodes.Add({metadata.SafeVariableName}Node);");
            sb.AppendLine("                        }");
            sb.AppendLine("                        else");
            sb.AppendLine("                        {");
            sb.AppendLine($"                            var {metadata.SafeVariableName}Node = new TreeNode(\"{prop.Name} [null]\");");
            sb.AppendLine($"                            complexPropsNode.Nodes.Add({metadata.SafeVariableName}Node);");
            sb.AppendLine("                        }");
            sb.AppendLine("                    }");
            sb.AppendLine("                    catch (Exception ex)");
            sb.AppendLine("                    {");
            sb.AppendLine($"                        var {metadata.SafeVariableName}ErrorNode = new TreeNode(\"{prop.Name}: <error - \" + ex.GetType().Name + \">\");");
            sb.AppendLine($"                        complexPropsNode.Nodes.Add({metadata.SafeVariableName}ErrorNode);");
            sb.AppendLine("                    }");
        }
    }
}