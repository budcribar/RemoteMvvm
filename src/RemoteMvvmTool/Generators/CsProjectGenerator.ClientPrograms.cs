using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GrpcRemoteMvvmModelUtil;

namespace RemoteMvvmTool.Generators;

public static partial class CsProjectGenerator
{
    // ---------------- Client Program Generators ----------------
    public static string GenerateGuiClientProgram(string projectName, string runType, string protoNs, string serviceName, string clientNs, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        bool isWpf = runType.Equals("wpf", StringComparison.OrdinalIgnoreCase);
        bool isWinForms = runType.Equals("winforms", StringComparison.OrdinalIgnoreCase);
        var modelName = serviceName.EndsWith("Service", StringComparison.Ordinal) ? serviceName[..^"Service".Length] : serviceName;
        var clientClassName = modelName + "RemoteClient";
        var sb = new StringBuilder();
        
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Net.Http;");
        sb.AppendLine("using Grpc.Net.Client;");
        sb.AppendLine($"using {protoNs};");
        sb.AppendLine("using Generated.Clients;");
        sb.AppendLine("using Generated.ViewModels;");
        
        if (isWpf) sb.AppendLine("using System.Windows;");
        if (isWinForms)
        {
            sb.AppendLine("using System.Windows.Forms;");
            sb.AppendLine("using System.ComponentModel;");
            sb.AppendLine("using System.Linq;");
            sb.AppendLine("using System.Threading;");
        }
        
        sb.AppendLine();
        sb.AppendLine("namespace GuiClientApp");
        sb.AppendLine("{");
        sb.AppendLine("    public class Program");
        sb.AppendLine("    {");
        sb.AppendLine("        [STAThread]");
        sb.AppendLine("        public static void Main(string[] args)");
        sb.AppendLine("        {");
        sb.AppendLine("            try");
        sb.AppendLine("            {");
        sb.AppendLine("                int port = 50052;");
        sb.AppendLine("                if (args.Length > 0 && int.TryParse(args[0], out var p)) port = p;");
        sb.AppendLine();
        sb.AppendLine("                var handler = new HttpClientHandler();");
        sb.AppendLine("                handler.ServerCertificateCustomValidationCallback = System.Net.Http.HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;");
        sb.AppendLine("                var channel = GrpcChannel.ForAddress(new Uri(\"https://localhost:\" + port + \"/\"), new GrpcChannelOptions { HttpHandler = handler });");
        sb.AppendLine($"                var grpcClient = new {serviceName}.{serviceName}Client(channel);");
        sb.AppendLine($"                var vm = new {clientClassName}(grpcClient);");
        sb.AppendLine("                vm.InitializeRemoteAsync().GetAwaiter().GetResult();");
        sb.AppendLine();

        if (isWpf)
        {
            sb.AppendLine("                var app = new Application();");
            sb.AppendLine("                var win = new MainWindow(vm);");
            sb.AppendLine("                app.Run(win);");
        }
        else if (isWinForms)
        {
            sb.AppendLine("                WinFormsGui.Run(vm);");
        }
        else
        {
            sb.AppendLine("                Console.WriteLine(\"Unsupported GUI platform\");");
        }
        
        sb.AppendLine("            }");
        sb.AppendLine("            catch (Exception ex)");
        sb.AppendLine("            {");
        sb.AppendLine("                Console.WriteLine(\"SERVER_ERROR_START\");");
        sb.AppendLine("                Console.WriteLine(ex);");
        sb.AppendLine("                Console.WriteLine(\"SERVER_ERROR_END\");");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    // ---------------- WinForms Helper Generator ----------------
    public static string GenerateWinFormsGui(string projectName, string serviceName, string clientClassName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated> WinForms GUI </auto-generated>");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Windows.Forms;");
        sb.AppendLine("using System.ComponentModel;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Drawing;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using Generated.Clients;");  // Add this namespace for RemoteClient classes
        sb.AppendLine();
        sb.AppendLine("namespace GuiClientApp");
        sb.AppendLine("{");
        sb.AppendLine("    public static class WinFormsGui");
        sb.AppendLine("    {");
        sb.AppendLine($"        public static void Run({clientClassName} vm)");
        sb.AppendLine("        {");
        sb.AppendLine("            Application.EnableVisualStyles();");
        sb.AppendLine($"            var form = new Form {{ Text = \"{projectName} GUI Client\", Width = 1150, Height = 780, StartPosition = FormStartPosition.CenterScreen }};");
        sb.AppendLine();
        sb.AppendLine("            var split = new SplitContainer { Dock = DockStyle.Fill, SplitterDistance = 400 };");
        sb.AppendLine("            form.Controls.Add(split);");
        sb.AppendLine();
        sb.AppendLine("            var statusStrip = new StatusStrip();");
        sb.AppendLine("            var statusLbl = new ToolStripStatusLabel();");
        sb.AppendLine("            statusStrip.Items.Add(statusLbl);");
        sb.AppendLine("            form.Controls.Add(statusStrip);");
        sb.AppendLine("            statusStrip.Dock = DockStyle.Bottom;");
        sb.AppendLine("            statusLbl.Text = \"Ready\";");
        sb.AppendLine();
        
        // Generate simple tree view inline
        sb.AppendLine("            // Tree view for client properties");
        sb.AppendLine("            var tree = new TreeView { Dock = DockStyle.Fill, HideSelection = false };");
        sb.AppendLine("            split.Panel1.Controls.Add(tree);");
        sb.AppendLine();
        sb.AppendLine("            // Simple property display");
        sb.AppendLine("            var rootNode = new TreeNode(\"Client Properties\");");
        sb.AppendLine("            tree.Nodes.Add(rootNode);");
        sb.AppendLine();
        sb.AppendLine("            // Connection status node");
        sb.AppendLine("            try");
        sb.AppendLine("            {");
        sb.AppendLine("                var connectionNode = new TreeNode(\"ConnectionStatus: \" + (vm.ConnectionStatus ?? \"Unknown\"));");
        sb.AppendLine("                rootNode.Nodes.Add(connectionNode);");
        sb.AppendLine("            }");
        sb.AppendLine("            catch { }");
        sb.AppendLine();
        
        // Add basic property nodes
        int propIndex = 0;
        foreach (var prop in props.Take(5)) // Limit to avoid complexity
        {
            sb.AppendLine($"            try");
            sb.AppendLine("            {");
            // Use simple ToString() without null-conditional operator to avoid issues with value types
            sb.AppendLine($"                var prop{propIndex}Value = vm.{prop.Name}.ToString();");
            sb.AppendLine($"                var prop{propIndex}Node = new TreeNode(\"{prop.Name}: \" + prop{propIndex}Value);");
            sb.AppendLine($"                rootNode.Nodes.Add(prop{propIndex}Node);");
            sb.AppendLine("            }");
            sb.AppendLine("            catch (Exception ex)");
            sb.AppendLine("            {");
            sb.AppendLine($"                var prop{propIndex}ErrorNode = new TreeNode(\"{prop.Name}: <error>\");");
            sb.AppendLine($"                rootNode.Nodes.Add(prop{propIndex}ErrorNode);");
            sb.AppendLine("            }");
            propIndex++;
        }
        
        sb.AppendLine("            rootNode.Expand();");
        sb.AppendLine();
        
        sb.AppendLine("            // Right panel for property details");
        sb.AppendLine("            var rightPanel = new Panel { Dock = DockStyle.Fill, AutoScroll = true };");
        sb.AppendLine("            split.Panel2.Controls.Add(rightPanel);");
        sb.AppendLine();
        sb.AppendLine("            var flow = new FlowLayoutPanel");
        sb.AppendLine("            {");
        sb.AppendLine("                Dock = DockStyle.Top,");
        sb.AppendLine("                AutoSize = true,");
        sb.AppendLine("                FlowDirection = FlowDirection.TopDown,");
        sb.AppendLine("                WrapContents = false");
        sb.AppendLine("            };");
        sb.AppendLine("            rightPanel.Controls.Add(flow);");
        sb.AppendLine();
        
        // Connection status display
        sb.AppendLine("            var status = new Label { AutoSize = true, Font = new System.Drawing.Font(\"Segoe UI\", 9, System.Drawing.FontStyle.Bold) };");
        sb.AppendLine("            try");
        sb.AppendLine("            {");
        sb.AppendLine("                status.DataBindings.Add(\"Text\", vm, \"ConnectionStatus\");");
        sb.AppendLine("            }");
        sb.AppendLine("            catch");
        sb.AppendLine("            {");
        sb.AppendLine("                status.Text = \"Connection status not available\";");
        sb.AppendLine("            }");
        sb.AppendLine("            flow.Controls.Add(status);");
        sb.AppendLine();
        
        // Generate commands section if commands exist
        if (cmds.Any())
        {
            sb.AppendLine("            var cmdGroup = new GroupBox");
            sb.AppendLine("            {");
            sb.AppendLine("                Text = \"Commands\",");
            sb.AppendLine("                AutoSize = true,");
            sb.AppendLine("                AutoSizeMode = AutoSizeMode.GrowAndShrink,");
            sb.AppendLine("                Padding = new Padding(10)");
            sb.AppendLine("            };");
            sb.AppendLine("            flow.Controls.Add(cmdGroup);");
            sb.AppendLine();
            sb.AppendLine("            var cmdFlow = new FlowLayoutPanel");
            sb.AppendLine("            {");
            sb.AppendLine("                Dock = DockStyle.Top,");
            sb.AppendLine("                AutoSize = true,");
            sb.AppendLine("                FlowDirection = FlowDirection.LeftToRight,");
            sb.AppendLine("                WrapContents = true");
            sb.AppendLine("            };");
            sb.AppendLine("            cmdGroup.Controls.Add(cmdFlow);");
            
            int cmdIndex = 0;
            foreach (var c in cmds)
            {
                var baseName = c.MethodName.EndsWith("Async", StringComparison.Ordinal) ? c.MethodName[..^5] : c.MethodName;
                sb.AppendLine();
                sb.AppendLine($"            var btn{cmdIndex} = new Button {{ Text = \"{baseName}\", Width = 140, Height = 30 }};");
                sb.AppendLine($"            btn{cmdIndex}.Click += (_, __) =>");
                sb.AppendLine("            {");
                sb.AppendLine("                try");
                sb.AppendLine("                {");
                sb.AppendLine($"                    vm.{c.CommandPropertyName}?.Execute(null);");
                sb.AppendLine("                }");
                sb.AppendLine("                catch (Exception ex)");
                sb.AppendLine("                {");
                sb.AppendLine($"                    MessageBox.Show($\"Error executing {baseName}: {{ex.Message}}\", \"Command Error\", MessageBoxButtons.OK, MessageBoxIcon.Warning);");
                sb.AppendLine("                }");
                sb.AppendLine("            };");
                sb.AppendLine($"            cmdFlow.Controls.Add(btn{cmdIndex});");
                cmdIndex++;
            }
        }
        
        sb.AppendLine();
        sb.AppendLine("            Application.Run(form);");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }
}