using GrpcRemoteMvvmModelUtil;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RemoteMvvmTool.Generators;

public static class TsProjectGenerator
{
    public static string GenerateAppTs(string vmName, string serviceName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        
        // Fix the duplicate "Service" issue in the import path
        var clientImportPath = serviceName.EndsWith("Service") 
            ? serviceName.Substring(0, serviceName.Length - "Service".Length) + "ServiceClientPb"
            : serviceName + "ServiceClientPb";
            
        sb.AppendLine($"import {{ {serviceName}Client }} from './generated/{clientImportPath}';");
        sb.AppendLine($"import {{ {vmName}RemoteClient }} from './{vmName}RemoteClient';");
        sb.AppendLine();
        sb.AppendLine("const grpcHost = 'http://localhost:50052';");
        sb.AppendLine($"const grpcClient = new {serviceName}Client(grpcHost);");
        sb.AppendLine($"const vm = new {vmName}RemoteClient(grpcClient);");
        sb.AppendLine();
        sb.AppendLine("// Centralized error reporting");
        sb.AppendLine("function handleError(err: any, context?: string) {");
        sb.AppendLine("    try {");
        sb.AppendLine("        const msg = err?.message ?? String(err);");
        sb.AppendLine("        console.error(context ? `${context}:` : 'Error:', err);");
        sb.AppendLine("        const statusEl = document.getElementById('connection-status');");
        sb.AppendLine("        if (statusEl) {");
        sb.AppendLine("            statusEl.textContent = context ? `${context}: ${msg}` : msg;");
        sb.AppendLine("        }");
        sb.AppendLine("    } catch { /* no-op */ }");
        sb.AppendLine("}");
        sb.AppendLine();
        sb.AppendLine();
        sb.AppendLine("async function render() {");
        foreach (var p in props)
        {
            string camel = GeneratorHelpers.ToCamelCase(p.Name);
            string typeStr = p.TypeString.ToLowerInvariant();
            if (IsPrimitiveType(typeStr))
            {
                string assignExpr;
                if (typeStr.Contains("string"))
                    assignExpr = $"vm.{camel}";
                else
                    assignExpr = $"String(vm.{camel})";
                sb.AppendLine($"    (document.getElementById('{camel}') as HTMLInputElement).value = {assignExpr};");
            }
            else if (IsCollectionType(typeStr))
            {
                sb.AppendLine($"    const {camel}El = document.getElementById('{camel}') as HTMLElement;");
                sb.AppendLine($"    const {camel}RootOpen = ({camel}El.querySelector('details[data-root]') as HTMLDetailsElement)?.open ?? true;");
                sb.AppendLine($"    const {camel}ItemOpen: boolean[] = Array.from({camel}El.querySelectorAll('details[data-index]')).map(d => (d as HTMLDetailsElement).open);");
                sb.AppendLine($"    {camel}El.innerHTML = '';");
                sb.AppendLine($"    const {camel}Details = document.createElement('details');");
                sb.AppendLine($"    {camel}Details.setAttribute('data-root', '');");
                sb.AppendLine($"    {camel}Details.open = {camel}RootOpen;");
                sb.AppendLine($"    const {camel}Summary = document.createElement('summary');");
                sb.AppendLine($"    {camel}Summary.textContent = '{p.Name}';");
                sb.AppendLine($"    {camel}Details.appendChild({camel}Summary);");
                sb.AppendLine($"    vm.{camel}.forEach((item: any, index: number) => {{");
                sb.AppendLine($"        const itemDetails = document.createElement('details');");
        
                sb.AppendLine($"        itemDetails.setAttribute('data-index', String(index));");
                sb.AppendLine($"        itemDetails.open = {camel}ItemOpen[index] ?? false;");
                sb.AppendLine($"        const itemSummary = document.createElement('summary');");
                sb.AppendLine($"        itemSummary.textContent = `{p.Name}[${{index}}]`;");
                sb.AppendLine($"        itemDetails.appendChild(itemSummary);");
                sb.AppendLine($"        const container = document.createElement('div');");
                sb.AppendLine($"        Object.entries(item).forEach(([key, value]) => {{");
                sb.AppendLine($"            const field = document.createElement('div');");
                sb.AppendLine($"            field.className = 'field';");
                sb.AppendLine($"            const label = document.createElement('span');");
                sb.AppendLine("            label.textContent = key;");
                sb.AppendLine($"            const input = document.createElement('input');");
                sb.AppendLine($"            input.value = typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);");
                sb.AppendLine($"            input.addEventListener('change', async (e) => {{");
                sb.AppendLine($"                const newVal = (e.target as HTMLInputElement).value;");
                sb.AppendLine($"                let parsed: any;");
                sb.AppendLine($"                if (typeof value === 'number') parsed = Number(newVal);");
                sb.AppendLine($"                else if (typeof value === 'boolean') parsed = newVal.toLowerCase() === 'true';");
                sb.AppendLine($"                else {{ try {{ parsed = JSON.parse(newVal); }} catch {{ parsed = newVal; }} }}");
                sb.AppendLine($"                const newCollection = vm.{camel}.map((z: any) => Object.assign({{}}, z));");
                sb.AppendLine($"                if (JSON.stringify(newCollection[index][key]) !== JSON.stringify(parsed)) {{");
                sb.AppendLine($"                    (newCollection[index] as any)[key] = parsed;");
                sb.AppendLine($"                    try {{ await vm.updatePropertyValueDebounced('{p.Name}', newCollection); }}");
                sb.AppendLine($"                    catch (err) {{ handleError(err, 'Update {p.Name}'); }}");
                sb.AppendLine($"                }}");
                sb.AppendLine($"            }});");
                sb.AppendLine($"            field.appendChild(label);");
                sb.AppendLine($"            field.appendChild(input);");
                sb.AppendLine($"            container.appendChild(field);");
                sb.AppendLine($"        }});");
                sb.AppendLine($"        itemDetails.appendChild(container);");
                sb.AppendLine($"        {camel}Details.appendChild(itemDetails);");
                sb.AppendLine($"    }});");
                sb.AppendLine($"    {camel}El.appendChild({camel}Details);");
            }
            else
            {
                sb.AppendLine($"    const {camel}El = document.getElementById('{camel}') as HTMLElement;");
                sb.AppendLine($"    const {camel}RootOpen = ({camel}El.querySelector('details[data-root]') as HTMLDetailsElement)?.open ?? true;");
                sb.AppendLine($"    {camel}El.innerHTML = '';");
                sb.AppendLine($"    const {camel}Details = document.createElement('details');");
                sb.AppendLine($"    {camel}Details.setAttribute('data-root', '');");
                sb.AppendLine($"    {camel}Details.open = {camel}RootOpen;");
                sb.AppendLine($"    const {camel}Summary = document.createElement('summary');");
                sb.AppendLine($"    {camel}Summary.textContent = '{p.Name}';");
                sb.AppendLine($"    {camel}Details.appendChild({camel}Summary);");
                sb.AppendLine($"    const container = document.createElement('div');");
                sb.AppendLine($"    Object.entries(vm.{camel} as any).forEach(([key, value]) => {{");
                sb.AppendLine($"        const field = document.createElement('div');");
                sb.AppendLine($"        field.className = 'field';");
                sb.AppendLine($"        const label = document.createElement('span');");
                sb.AppendLine("        label.textContent = key;");
                sb.AppendLine($"        const input = document.createElement('input');");
                sb.AppendLine($"        input.value = typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);");
                sb.AppendLine($"        input.addEventListener('change', async (e) => {{");
                sb.AppendLine($"            const newVal = (e.target as HTMLInputElement).value;");
                sb.AppendLine($"            let parsed: any;");
                sb.AppendLine($"            if (typeof value === 'number') parsed = Number(newVal);");
                sb.AppendLine($"            else if (typeof value === 'boolean') parsed = newVal.toLowerCase() === 'true';");
                sb.AppendLine($"            else {{ try {{ parsed = JSON.parse(newVal); }} catch {{ parsed = newVal; }} }}");
                sb.AppendLine($"            const newObj = Object.assign({{}}, vm.{camel});");
                sb.AppendLine($"            if (JSON.stringify((newObj as any)[key]) !== JSON.stringify(parsed)) {{");
                sb.AppendLine($"                (newObj as any)[key] = parsed;");
                sb.AppendLine($"                try {{ await vm.updatePropertyValueDebounced('{p.Name}', newObj); }}");
                sb.AppendLine($"                catch (err) {{ handleError(err, 'Update {p.Name}'); }}");
                sb.AppendLine($"            }}");
                sb.AppendLine($"        }});");
                sb.AppendLine($"        field.appendChild(label);");
                sb.AppendLine($"        field.appendChild(input);");
                sb.AppendLine($"        container.appendChild(field);");
                sb.AppendLine($"    }});");
                sb.AppendLine($"    {camel}Details.appendChild(container);");
                sb.AppendLine($"    {camel}El.appendChild({camel}Details);");
            }
        }
        sb.AppendLine("    (document.getElementById('connection-status') as HTMLElement).textContent = vm.connectionStatus;");
        sb.AppendLine("}");
        sb.AppendLine();
        sb.AppendLine("async function init() {");
        sb.AppendLine("    try {");
        sb.AppendLine("        await vm.initializeRemote();");
        sb.AppendLine("        vm.addChangeListener(render);");
        sb.AppendLine("        await render();");
        sb.AppendLine("    } catch (err) {");
        sb.AppendLine("        handleError(err, 'Initialize remote');");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();
        sb.AppendLine("document.addEventListener('DOMContentLoaded', () => {");
        sb.AppendLine("    init();");
        foreach (var p in props)
        {
            string camel = GeneratorHelpers.ToCamelCase(p.Name);
            string typeStr = p.TypeString.ToLowerInvariant();
            if (!IsPrimitiveType(typeStr)) continue;
            sb.AppendLine($"    (document.getElementById('{camel}') as HTMLInputElement).addEventListener('change', async (e) => {{");
            sb.AppendLine($"        const newValue = (e.target as HTMLInputElement).value;");
            sb.AppendLine($"        const currentValue = vm.{camel};");
            sb.AppendLine("        // Only update if value actually changed");

            string comparison;
            string convertedValue;
            if (typeStr.Contains("int") || typeStr.Contains("number"))
            {
                convertedValue = "Number(newValue)";
                comparison = "Number(newValue) !== currentValue";
            }
            else if (typeStr.Contains("bool"))
            {
                convertedValue = "newValue.toLowerCase() === 'true'";
                comparison = "Boolean(newValue.toLowerCase() === 'true') !== currentValue";
            }
            else // string
            {
                convertedValue = "newValue";
                comparison = "newValue !== currentValue";
            }

            sb.AppendLine($"        if ({comparison}) {{");
            sb.AppendLine("            try {");
            sb.AppendLine($"                await vm.updatePropertyValueDebounced('{p.Name}', {convertedValue});");
            sb.AppendLine("            } catch (err) {");
            sb.AppendLine($"                handleError(err, 'Update {p.Name}');");
            sb.AppendLine("            }");
            sb.AppendLine("        }");
            sb.AppendLine("    });");
        }
        foreach (var cmd in cmds)
        {
            string camel = GeneratorHelpers.ToCamelCase(cmd.MethodName);
            sb.AppendLine($"    (document.getElementById('{camel}-btn') as HTMLButtonElement).addEventListener('click', async () => {{");
            sb.AppendLine("        try {");
            var sampleArgs = string.Join(", ", cmd.Parameters.Select(p => GetSampleValue(p.TypeString)));
            sb.AppendLine($"            await vm.{camel}({sampleArgs});");
            sb.AppendLine("        } catch (err) {");
            sb.AppendLine($"            handleError(err, 'Execute {cmd.MethodName}');");
            sb.AppendLine("        }");
            sb.AppendLine("    });");
        }
        sb.AppendLine("});");
        return sb.ToString();
    }

    private static string GetSampleValue(string typeString)
    {
        typeString = typeString.ToLowerInvariant();
        if (typeString.Contains("int")) return "0";
        if (typeString.Contains("bool")) return "false";
        if (typeString.Contains("string")) return "'sample'";
        return "undefined";
    }

    private static bool IsPrimitiveType(string typeStr)
    {
        typeStr = typeStr.ToLowerInvariant();
        return typeStr.Contains("string") || typeStr.Contains("bool") || typeStr.Contains("int") ||
               typeStr.Contains("number") || typeStr.Contains("double") || typeStr.Contains("float") ||
               typeStr.Contains("decimal") || typeStr.Contains("long");
    }

    private static bool IsCollectionType(string typeStr)
    {
        typeStr = typeStr.ToLowerInvariant();
        return typeStr.Contains("observablecollection") || typeStr.Contains("ienumerable") ||
               typeStr.Contains("icollection") || typeStr.Contains("list") || typeStr.EndsWith("[]");
    }

    public static string GenerateIndexHtml(string vmName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb, "<!-- ", " -->");
        sb.AppendLine("<!DOCTYPE html>");
        sb.AppendLine("<html lang=\"en\">\n<head>");
        sb.AppendLine("    <meta charset=\"utf-8\" />");
        sb.AppendLine($"    <title>{vmName} Client</title>");
        sb.AppendLine("    <style>");
        sb.AppendLine("        body { font-family: Arial, sans-serif; margin: 20px; }");
        sb.AppendLine("        .field { margin-bottom: 8px; display: flex; gap: 8px; align-items: center; }");
        sb.AppendLine("        .field label span, .field span { font-weight: 600; min-width: 150px; }");
        sb.AppendLine("        details { border: 1px solid #ccc; border-radius: 4px; padding: 8px; margin-bottom: 8px; }");
        sb.AppendLine("        details > summary { cursor: pointer; }");
        sb.AppendLine("        #connection-status { margin-top: 10px; font-weight: 600; }");
        sb.AppendLine("    </style>");
        sb.AppendLine("</head>\n<body>");
        sb.AppendLine("    <h3>Remote ViewModel</h3>");
        foreach (var p in props)
        {
            string camel = GeneratorHelpers.ToCamelCase(p.Name);
            string typeStr = p.TypeString.ToLowerInvariant();
            if (IsPrimitiveType(typeStr))
                sb.AppendLine($"    <div class='field'><label>{p.Name}: <input id='{camel}'/></label></div>");
            else
                sb.AppendLine($"    <div id='{camel}'></div>");
        }
        foreach (var cmd in cmds)
        {
            string camel = GeneratorHelpers.ToCamelCase(cmd.MethodName);
            sb.AppendLine($"    <button id='{camel}-btn'>{cmd.MethodName}</button>");
        }
        sb.AppendLine("    <div id='connection-status'></div>");
        sb.AppendLine("    <script src='bundle.js'></script>");
        sb.AppendLine("</body>\n</html>");
        return sb.ToString();
    }

    public static string GeneratePackageJson(string projectName)
    {
        var sb = new StringBuilder();
        sb.Append($"{{\n  \"name\": \"{projectName.ToLowerInvariant()}\",\n  \"version\": \"1.0.0\",\n  \"main\": \"wwwroot\\\\app.js\",\n  \"scripts\": {{\n    \"protoc\": \"protoc --plugin=protoc-gen-ts=\\\".\\\\node_modules\\\\.bin\\\\protoc-gen-ts.cmd\\\" --plugin=protoc-gen-grpc-web=\\\".\\\\node_modules\\\\protoc-gen-grpc-web\\\\bin\\\\protoc-gen-grpc-web.exe\\\" --js_out=\\\"import_style=commonjs,binary:./src/generated\\\" --grpc-web_out=\\\"import_style=typescript,mode=grpcwebtext,service_suffix=ClientPb:./src/generated\\\" -Iprotos -Inode_modules/protoc/protoc/include {projectName}Service.proto\",\n    \"build\": \"webpack --mode development\",\n    \"dev\": \"webpack serve --mode development --open\"\n  }},\n  \"devDependencies\": {{\n    \"ts-loader\": \"^9.5.2\",\n    \"typescript\": \"^5.0.0\",\n    \"webpack\": \"^5.0.0\",\n    \"webpack-cli\": \"^4.0.0\",\n    \"webpack-dev-server\": \"^4.0.0\",\n    \"ts-protoc-gen\": \"0.15.0\"\n  }},\n  \"dependencies\": {{\n    \"grpc-web\": \"^1.5.0\",\n    \"google-protobuf\": \"3.21.4\",\n    \"protoc\": \"^1.1.3\",\n    \"protoc-gen-grpc-web\": \"^1.5.0\"\n  }}\n}}");
        return sb.ToString();
    }

    public static string GenerateTsConfig()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.Append("{\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"module\": \"es2020\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true\n  }\n}");
        return sb.ToString();
    }

    public static string GenerateWebpackConfig()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.AppendLine("const path = require('path');");
        sb.AppendLine("module.exports = {");
        sb.AppendLine("  entry: './src/app.ts',");
        sb.AppendLine("  output: {");
        sb.AppendLine("    filename: 'bundle.js',");
        sb.AppendLine("    path: path.resolve(__dirname, 'wwwroot'),");
        sb.AppendLine("    clean: false,");
        sb.AppendLine("  },");
        sb.AppendLine("  resolve: { extensions: ['.ts', '.js'] },");
        sb.AppendLine("  module: { rules: [{ test: /\\.ts$/, use: 'ts-loader', exclude: /node_modules/ }] },");
        sb.AppendLine("  devtool: 'source-map',");
        sb.AppendLine("  devServer: { static: { directory: path.join(__dirname, 'wwwroot') }, hot: true, open: true, port: 3000 },");
        sb.AppendLine("  mode: 'development'");
        sb.AppendLine("};");
        return sb.ToString();
    }

    public static string GenerateLaunchJson()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.AppendLine("{");
        sb.AppendLine("  \"version\": \"0.2.0\",");
        sb.AppendLine("  \"configurations\": [");
        sb.AppendLine("    {");
        sb.AppendLine("      \"type\": \"node\",");
        sb.AppendLine("      \"request\": \"launch\",");
        sb.AppendLine("      \"name\": \"Launch Program\",");
        sb.AppendLine("      \"skipFiles\": [ \"<node_internals>/**\" ],");
        sb.AppendLine("      \"program\": \"${workspaceFolder}/src/app.js\",");
        sb.AppendLine("      \"cwd\": \"${workspaceFolder}\",");
        sb.AppendLine("      \"console\": \"externalTerminal\"");
        sb.AppendLine("    }");
        sb.AppendLine("  ]");
        sb.AppendLine("}");
        return sb.ToString();
    }

    public static string GenerateReadme(string projectName)
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb, "<!-- ", " -->");
        sb.AppendLine($"# {projectName} TypeScript Client");
        sb.AppendLine();
        sb.AppendLine("This project was generated by RemoteMvvmTool and uses gRPC-Web to communicate with the server.");
        sb.AppendLine();
        sb.AppendLine("## Setup");
        sb.AppendLine();
        sb.AppendLine("```bash");
        sb.AppendLine("npm install");
        sb.AppendLine("npm run protoc");
        sb.AppendLine("npm run build");
        sb.AppendLine("```");
        sb.AppendLine();
        sb.AppendLine("To regenerate the gRPC-Web stubs separately:");
        sb.AppendLine("```bash");
        sb.AppendLine("npm run protoc");
        sb.AppendLine("```");
        sb.AppendLine();
        sb.AppendLine("Start the development server:");
        sb.AppendLine("```bash");
        sb.AppendLine("npm run dev");
        sb.AppendLine("```");
        return sb.ToString();
    }
}
