using GrpcRemoteMvvmModelUtil;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RemoteMvvmTool.Generators;

public static class TsProjectGenerator
{
    public static string GenerateAppTs(string vmName, string serviceName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        var generator = new TypeScriptClientUIGenerator(vmName, vmName, props, cmds);
        return generator.GenerateAppSource(serviceName);
    }

    public static string GenerateIndexHtml(string vmName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        var generator = new TypeScriptClientUIGenerator(vmName, vmName, props, cmds);
        var bodyContent = generator.GenerateHtmlBody();

        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb, "<!-- ", " -->");
        sb.AppendLine("<!DOCTYPE html>");
        sb.AppendLine("<html lang=\"en\">");
        sb.AppendLine("<head>");
        sb.AppendLine("    <meta charset=\"utf-8\" />");
        sb.AppendLine($"    <title>{vmName} Client</title>");
        sb.AppendLine("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">");
        sb.AppendLine("    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>");
        sb.AppendLine("    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\" rel=\"stylesheet\">");
        sb.AppendLine("    <style>");
        sb.AppendLine("        body {");
        sb.AppendLine("            font-family: 'Roboto', sans-serif;");
        sb.AppendLine("            margin: 0;");
        sb.AppendLine("            padding: 24px;");
        sb.AppendLine("            background-color: #f4f7f6;");
        sb.AppendLine("            color: #333;");
        sb.AppendLine("        }");
        sb.AppendLine("        .container {");
        sb.AppendLine("            max-width: 960px;");
        sb.AppendLine("            margin: 0 auto;");
        sb.AppendLine("            background: #fff;");
        sb.AppendLine("            padding: 24px;");
        sb.AppendLine("            border-radius: 10px;");
        sb.AppendLine("            box-shadow: 0 2px 12px rgba(0,0,0,0.08);");
        sb.AppendLine("        }");
        sb.AppendLine("        h3 {");
        sb.AppendLine("            margin-top: 0;");
        sb.AppendLine("            font-weight: 500;");
        sb.AppendLine("            color: #0b5394;");
        sb.AppendLine("        }");
        sb.AppendLine("        .action-bar, .command-bar {");
        sb.AppendLine("            display: flex;");
        sb.AppendLine("            flex-wrap: wrap;");
        sb.AppendLine("            gap: 12px;");
        sb.AppendLine("            margin-bottom: 16px;");
        sb.AppendLine("        }");
        sb.AppendLine("        .content-layout {");
        sb.AppendLine("            display: grid;");
        sb.AppendLine("            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));");
        sb.AppendLine("            gap: 18px;");
        sb.AppendLine("            margin-bottom: 20px;");
        sb.AppendLine("        }");
        sb.AppendLine("        .tree-panel, .details-panel {");
        sb.AppendLine("            background: #f9fbfd;");
        sb.AppendLine("            border: 1px solid #dce6f2;");
        sb.AppendLine("            border-radius: 8px;");
        sb.AppendLine("            padding: 16px;");
        sb.AppendLine("            min-height: 220px;");
        sb.AppendLine("        }");
        sb.AppendLine("        details {");
        sb.AppendLine("            border: 1px solid #e0e6ef;");
        sb.AppendLine("            border-radius: 6px;");
        sb.AppendLine("            padding: 6px 10px;");
        sb.AppendLine("            margin-bottom: 8px;");
        sb.AppendLine("            background: #ffffff;");
        sb.AppendLine("        }");
        sb.AppendLine("        summary {");
        sb.AppendLine("            cursor: pointer;");
        sb.AppendLine("            font-weight: 600;");
        sb.AppendLine("            color: #0b5394;");
        sb.AppendLine("        }");
        sb.AppendLine("        .nested-container {");
        sb.AppendLine("            margin-left: 12px;");
        sb.AppendLine("            border-left: 2px solid #eef2f7;");
        sb.AppendLine("            padding-left: 12px;");
        sb.AppendLine("        }");
        sb.AppendLine("        button {");
        sb.AppendLine("            background-color: #0b5394;");
        sb.AppendLine("            color: #fff;");
        sb.AppendLine("            border: none;");
        sb.AppendLine("            padding: 10px 18px;");
        sb.AppendLine("            border-radius: 6px;");
        sb.AppendLine("            font-size: 14px;");
        sb.AppendLine("            cursor: pointer;");
        sb.AppendLine("            transition: background 0.2s ease-in-out;");
        sb.AppendLine("        }");
        sb.AppendLine("        button:hover { background-color: #073763; }");
        sb.AppendLine("        .status {");
        sb.AppendLine("            margin-top: 18px;");
        sb.AppendLine("            padding: 12px;");
        sb.AppendLine("            background-color: #eef4ff;");
        sb.AppendLine("            border: 1px solid #cfdcf8;");
        sb.AppendLine("            border-radius: 6px;");
        sb.AppendLine("            font-weight: 500;");
        sb.AppendLine("        }");
        sb.AppendLine("        pre {");
        sb.AppendLine("            background: #ffffff;");
        sb.AppendLine("            border: 1px solid #dce6f2;");
        sb.AppendLine("            border-radius: 4px;");
        sb.AppendLine("            padding: 8px;");
        sb.AppendLine("            overflow-x: auto;");
        sb.AppendLine("        }");
        sb.AppendLine("    </style>");
        sb.AppendLine("</head>");
        sb.AppendLine("<body>");
        sb.AppendLine(bodyContent.TrimEnd());
        sb.AppendLine("    <script src='bundle.js'></script>");
        sb.AppendLine("</body>");
        sb.AppendLine("</html>");
        return sb.ToString();
    }

    public static string GeneratePackageJson(string projectName)
    {
        var projectNameVar = projectName.ToLowerInvariant();
        return $$"""
{
  "name": "{{projectNameVar}}",
  "version": "1.0.0",
  "main": "wwwroot\\app.js",
  "scripts": {
    "protoc": "protoc --plugin=protoc-gen-ts=\".\\node_modules\\.bin\\protoc-gen-ts.cmd\" --plugin=protoc-gen-grpc-web=\".\\node_modules\\protoc-gen-grpc-web\\bin\\protoc-gen-grpc-web.exe\" --js_out=\"import_style=commonjs,binary:./src/generated\" --grpc-web_out=\"import_style=typescript,mode=grpcwebtext:./src/generated\" -Iprotos -Inode_modules/protoc/protoc/include {{projectName}}Service.proto",
    "build": "webpack --mode development",
    "dev": "webpack serve --mode development --open"
  },
  "devDependencies": {
    "ts-loader": "^9.5.2",
    "typescript": "^5.0.0",
    "webpack": "^5.0.0",
    "webpack-cli": "^4.0.0",
    "webpack-dev-server": "^4.0.0",
    "ts-protoc-gen": "0.15.0"
  },
  "dependencies": {
    "grpc-web": "^1.5.0",
    "google-protobuf": "3.21.4",
    "protoc": "^1.1.3",
    "protoc-gen-grpc-web": "^1.5.0"
  }
}
""";
    }

    public static string GenerateTsConfig()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.Append("""
{
  "compilerOptions": {
    "target": "es2020",
    "module": "es2020",
    "moduleResolution": "node",
    "sourceMap": true
  }
}
""");
        return sb.ToString();
    }

    public static string GenerateWebpackConfig()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.AppendLine("""
const path = require('path');

module.exports = {
  entry: './src/app.ts',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'wwwroot'),
    clean: false,
  },
  resolve: { extensions: ['.ts', '.js'] },
  module: { rules: [{ test: /\.ts$/, use: 'ts-loader', exclude: /node_modules/ }] },
  devtool: 'source-map',
  devServer: { static: { directory: path.join(__dirname, 'wwwroot') }, hot: true, open: true, port: 3000 },
  mode: 'development'
};
""");
        return sb.ToString();
    }

    public static string GenerateLaunchJson()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.AppendLine("""
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Launch Program",
      "skipFiles": [ "<node_internals>/**" ],
      "program": "${workspaceFolder}/src/app.js",
      "cwd": "${workspaceFolder}",
      "console": "externalTerminal"
    }
  ]
}
""");
        return sb.ToString();
    }

    public static string GenerateReadme(string projectName)
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb, "<!-- ", " -->");
        var projectNameVar = projectName;
        sb.AppendLine($$"""
# {{projectNameVar}} TypeScript Client

This project was generated by RemoteMvvmTool and uses gRPC-Web to communicate with the server.

## Setup

```bash
npm install
npm run protoc
npm run build
```

To regenerate the gRPC-Web stubs separately:
```bash
npm run protoc
```

Start the development server:
```bash
npm run dev
```
""");
        return sb.ToString();
    }
}
