using GrpcRemoteMvvmModelUtil;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RemoteMvvmTool.Generators;

public static class TsProjectGenerator
{
    public static string GenerateAppTs(string vmName, string serviceName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        var sb = new StringBuilder();

        static string GetStateName(INamedTypeSymbol t)
        {
            var name = t.Name;
            if (name.EndsWith("ComponentViewModel"))
                name = name[..^"ComponentViewModel".Length];
            else if (name.EndsWith("ViewModel"))
                name = name[..^"ViewModel".Length];
            else if (name.EndsWith("Model"))
                name = name[..^"Model".Length];
            return name + "State";
        }

        static INamedTypeSymbol? GetCollectionElementType(ITypeSymbol type)
        {
            if (type is IArrayTypeSymbol arr)
                return arr.ElementType as INamedTypeSymbol;
            ITypeSymbol? current = type;
            while (current is INamedTypeSymbol nt)
            {
                var iface = nt.AllInterfaces.FirstOrDefault(i => i.OriginalDefinition.SpecialType == SpecialType.System_Collections_Generic_IEnumerable_T);
                if (iface != null)
                    return iface.TypeArguments[0] as INamedTypeSymbol;
                if (nt.IsGenericType && nt.OriginalDefinition.SpecialType == SpecialType.System_Collections_Generic_IEnumerable_T)
                    return nt.TypeArguments[0] as INamedTypeSymbol;
                current = nt.BaseType;
            }
            return null;
        }
        INamedTypeSymbol? GetEnumType(ITypeSymbol type)
        {
            if (type is INamedTypeSymbol named)
            {
                if (named.TypeKind == TypeKind.Enum)
                    return named;
                if (named.IsGenericType && named.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T)
                {
                    var underlying = named.TypeArguments[0] as INamedTypeSymbol;
                    if (underlying?.TypeKind == TypeKind.Enum)
                        return underlying;
                }
            }
            return null;
        }

        var enumDisplayFuncs = new HashSet<string>();
        Dictionary<string, Dictionary<string, string>> collectionEnumMaps = new(StringComparer.Ordinal);
        Dictionary<string, Dictionary<string, string>> objectEnumMaps = new(StringComparer.Ordinal);

        Dictionary<string, string> GetEnumDisplayMap(INamedTypeSymbol type)
        {
            var map = new Dictionary<string, string>(StringComparer.Ordinal);
            foreach (var m in Helpers.GetAllMembers(type).OfType<IPropertySymbol>())
            {
                var enumType = GetEnumType(m.Type);
                if (enumType != null)
                {
                    var fn = $"get{enumType.Name}Display";
                    map[GeneratorHelpers.ToCamelCase(m.Name)] = fn;
                    enumDisplayFuncs.Add(fn);
                }
            }
            return map;
        }

        foreach (var p in props)
        {
            var typeStr = p.TypeString.ToLowerInvariant();
            if (IsCollectionType(typeStr))
            {
                var itemType = GetCollectionElementType(p.FullTypeSymbol);
                if (itemType != null)
                {
                    var map = GetEnumDisplayMap(itemType);
                    if (map.Count > 0)
                        collectionEnumMaps[p.Name] = map;
                }
            }
            else if (!IsPrimitiveType(typeStr) && p.FullTypeSymbol is INamedTypeSymbol named)
            {
                var map = GetEnumDisplayMap(named);
                if (map.Count > 0)
                    objectEnumMaps[p.Name] = map;
            }
        }
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);

        var clientImportPath = serviceName + "ServiceClientPb";

        sb.AppendLine($"import {{ {serviceName}Client }} from './generated/{clientImportPath}';");
        var clientImports = $"{vmName}RemoteClient, readOnlyMemberMap";
        if (enumDisplayFuncs.Count > 0)
            clientImports += ", " + string.Join(", ", enumDisplayFuncs);
        sb.AppendLine($"import {{ {clientImports} }} from './{vmName}RemoteClient';");
        sb.AppendLine();
        sb.AppendLine("const grpcHost = 'http://localhost:50052';");
        sb.AppendLine($"const grpcClient = new {serviceName}Client(grpcHost);");
        sb.AppendLine($"const vm = new {vmName}RemoteClient(grpcClient);");
        sb.AppendLine();
        sb.AppendLine("// Centralized error reporting");
        sb.AppendLine("function handleError(err: any, context?: string) {");
        sb.AppendLine("    try {");
        sb.AppendLine("        const msg = err?.message ?? String(err);");
        sb.AppendLine("        console.error(context ? `${context}:` : 'Error:', err);");
        sb.AppendLine("        const statusEl = document.getElementById('connection-status');");
        sb.AppendLine("        if (statusEl) {");
        sb.AppendLine("            statusEl.textContent = context ? `${context}: ${msg}` : msg;");
        sb.AppendLine("        }");
        sb.AppendLine("    } catch { /* no-op */ }");
        sb.AppendLine("}");
        sb.AppendLine();
        sb.AppendLine();
        sb.AppendLine("async function render() {");
        foreach (var p in props)
        {
            string camel = GeneratorHelpers.ToCamelCase(p.Name);
            string typeStr = p.TypeString.ToLowerInvariant();
            if (IsPrimitiveType(typeStr))
            {
                if (p.IsReadOnly)
                {
                    sb.AppendLine($"    (document.getElementById('{camel}') as HTMLElement).textContent = String(vm.{camel});");
                }
                else if (typeStr.Contains("bool"))
                {
                    sb.AppendLine($"    (document.getElementById('{camel}') as HTMLInputElement).checked = vm.{camel};");
                }
                else
                {
                    string assignExpr;
                    if (typeStr.Contains("string"))
                        assignExpr = $"vm.{camel}";
                    else
                        assignExpr = $"String(vm.{camel})";
                    sb.AppendLine($"    (document.getElementById('{camel}') as HTMLInputElement).value = {assignExpr};");
                }
            }
            else if (IsCollectionType(typeStr))
            {
                sb.AppendLine($"    const {camel}El = document.getElementById('{camel}') as HTMLElement;");
                sb.AppendLine($"    const {camel}RootOpen = ({camel}El.querySelector('details[data-root]') as HTMLDetailsElement)?.open ?? true;");
                sb.AppendLine($"    const {camel}ItemOpen: boolean[] = Array.from({camel}El.querySelectorAll('details[data-index]')).map(d => (d as HTMLDetailsElement).open);");
                sb.AppendLine($"    {camel}El.innerHTML = '';");
                sb.AppendLine($"    const {camel}Details = document.createElement('details');");
                sb.AppendLine($"    {camel}Details.setAttribute('data-root', '');");
                sb.AppendLine($"    {camel}Details.open = {camel}RootOpen;");
                sb.AppendLine($"    const {camel}Summary = document.createElement('summary');");
                sb.AppendLine($"    {camel}Summary.textContent = '{p.Name}';");
                sb.AppendLine($"    {camel}Details.appendChild({camel}Summary);");
                var itemType = GetCollectionElementType(p.FullTypeSymbol);
                if (itemType != null)
                    sb.AppendLine($"    const {camel}ItemRo = readOnlyMemberMap['{GetStateName(itemType)}'] ?? new Set<string>();");
                else
                    sb.AppendLine($"    const {camel}ItemRo = new Set<string>();");
                if (collectionEnumMaps.TryGetValue(p.Name, out var enumMap))
                {
                    sb.AppendLine($"    const {camel}EnumDisplay: Record<string, (v:number)=>string> = {{");
                    foreach (var kv in enumMap)
                        sb.AppendLine($"        '{kv.Key}': {kv.Value},");
                    sb.AppendLine("    };");
                }
                sb.AppendLine($"    vm.{camel}.forEach((item: any, index: number) => {{");
                sb.AppendLine($"        const itemDetails = document.createElement('details');");

                sb.AppendLine($"        itemDetails.setAttribute('data-index', String(index));");
                sb.AppendLine($"        itemDetails.open = {camel}ItemOpen[index] ?? false;");
                sb.AppendLine($"        const itemSummary = document.createElement('summary');");
                sb.AppendLine($"        itemSummary.textContent = `[${{index}}]`;");
                sb.AppendLine($"        itemDetails.appendChild(itemSummary);");
                sb.AppendLine($"        const container = document.createElement('div');");
                sb.AppendLine($"        Object.entries(item).forEach(([key, value]) => {{");
                sb.AppendLine($"            const field = document.createElement('div');");
                sb.AppendLine($"            field.className = 'field';");
                sb.AppendLine($"            const label = document.createElement('span');");
                sb.AppendLine($"            label.textContent = `${{key}}:`;");
                sb.AppendLine($"            let displayValue = value;");
                if (collectionEnumMaps.ContainsKey(p.Name))
                {
                    sb.AppendLine($"            const enumFn = {camel}EnumDisplay[key];");
                    sb.AppendLine($"            if (enumFn) displayValue = enumFn(Number(value));");
                }
                sb.AppendLine($"            if ({camel}ItemRo.has(key)) {{");
                sb.AppendLine($"                const valueEl = document.createElement('span');");
                sb.AppendLine($"                valueEl.textContent = displayValue instanceof Date ? displayValue.toISOString() : typeof displayValue === 'object' ? JSON.stringify(displayValue, null, 2) : String(displayValue);");
                sb.AppendLine($"                field.appendChild(label);");
                sb.AppendLine($"                field.appendChild(valueEl);");
                sb.AppendLine($"            }} else {{");
                sb.AppendLine($"                const input = document.createElement('input');");
                sb.AppendLine($"                if (typeof value === 'boolean') {{");
                sb.AppendLine($"                    input.type = 'checkbox';");
                sb.AppendLine($"                    input.checked = Boolean(value);");
                sb.AppendLine($"                }} else {{");
                sb.AppendLine($"                    input.type = typeof value === 'number' ? 'number' : 'text';");
                sb.AppendLine($"                    input.value = value instanceof Date ? value.toISOString() : typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);");
                sb.AppendLine($"                }}");
                sb.AppendLine($"                input.addEventListener('change', async (e) => {{");
                sb.AppendLine($"                    const tgt = e.target as HTMLInputElement;");
                sb.AppendLine($"                    let parsed: any;");
                sb.AppendLine($"                    if (value instanceof Date) parsed = new Date(tgt.value);");
                sb.AppendLine($"                    else if (typeof value === 'number') parsed = tgt.valueAsNumber;");
                sb.AppendLine($"                    else if (typeof value === 'boolean') parsed = tgt.checked;");
                sb.AppendLine($"                    else {{ try {{ parsed = JSON.parse(tgt.value); }} catch {{ parsed = tgt.value; }} }}");
                sb.AppendLine($"                    const newCollection = vm.{camel}.map((z: any) => Object.assign({{}}, z));");
                sb.AppendLine($"                    if (JSON.stringify(newCollection[index][key]) !== JSON.stringify(parsed)) {{");
                sb.AppendLine($"                        (newCollection[index] as any)[key] = parsed;");
                sb.AppendLine($"                        try {{ await vm.updatePropertyValueDebounced('{p.Name}', newCollection); }}");
                sb.AppendLine($"                        catch (err) {{ handleError(err, 'Update {p.Name}'); }}");
                sb.AppendLine($"                    }}");
                sb.AppendLine($"                }});");
                sb.AppendLine($"                field.appendChild(label);");
                sb.AppendLine($"                field.appendChild(input);");
                sb.AppendLine($"            }}");
                sb.AppendLine($"            container.appendChild(field);");
                sb.AppendLine($"        }});");
        sb.AppendLine($"        itemDetails.appendChild(container);");
        sb.AppendLine($"        {camel}Details.appendChild(itemDetails);");
        sb.AppendLine($"    }});");
        sb.AppendLine($"    {camel}El.appendChild({camel}Details);");
            }
            else
            {
                sb.AppendLine($"    const {camel}El = document.getElementById('{camel}') as HTMLElement;");
                sb.AppendLine($"    const {camel}RootOpen = ({camel}El.querySelector('details[data-root]') as HTMLDetailsElement)?.open ?? true;");
                sb.AppendLine($"    {camel}El.innerHTML = '';");
                sb.AppendLine($"    const {camel}Details = document.createElement('details');");
                sb.AppendLine($"    {camel}Details.setAttribute('data-root', '');");
                sb.AppendLine($"    {camel}Details.open = {camel}RootOpen;");
                sb.AppendLine($"    const {camel}Summary = document.createElement('summary');");
                sb.AppendLine($"    {camel}Summary.textContent = '{p.Name}';");
                sb.AppendLine($"    {camel}Details.appendChild({camel}Summary);");
                sb.AppendLine($"    const {camel}Container = document.createElement('div');");
                var objType = p.FullTypeSymbol as INamedTypeSymbol;
                if (objType != null)
                    sb.AppendLine($"    const {camel}Ro = readOnlyMemberMap['{GetStateName(objType)}'] ?? new Set<string>();");
                else
                    sb.AppendLine($"    const {camel}Ro = new Set<string>();");
                if (objectEnumMaps.TryGetValue(p.Name, out var enumMap))
                {
                    sb.AppendLine($"    const {camel}EnumDisplay: Record<string, (v:number)=>string> = {{");
                    foreach (var kv in enumMap)
                        sb.AppendLine($"        '{kv.Key}': {kv.Value},");
                    sb.AppendLine("    };");
                }
                sb.AppendLine($"    Object.entries(vm.{camel} as any).forEach(([key, value]) => {{");
                sb.AppendLine($"        const field = document.createElement('div');");
                sb.AppendLine($"        field.className = 'field';");
                sb.AppendLine($"        const label = document.createElement('span');");
                sb.AppendLine($"        label.textContent = `${{key}}:`;");
                sb.AppendLine($"        let displayValue = value;");
                if (objectEnumMaps.ContainsKey(p.Name))
                {
                    sb.AppendLine($"        const enumFn = {camel}EnumDisplay[key];");
                    sb.AppendLine($"        if (enumFn) displayValue = enumFn(Number(value));");
                }
                sb.AppendLine($"        if ({camel}Ro.has(key)) {{");
                sb.AppendLine($"            const valueEl = document.createElement('span');");
                sb.AppendLine($"            valueEl.textContent = displayValue instanceof Date ? displayValue.toISOString() : typeof displayValue === 'object' ? JSON.stringify(displayValue, null, 2) : String(displayValue);");
                sb.AppendLine($"            field.appendChild(label);");
                sb.AppendLine($"            field.appendChild(valueEl);");
                sb.AppendLine($"        }} else {{");
                sb.AppendLine($"            const input = document.createElement('input');");
                sb.AppendLine($"            if (typeof value === 'boolean') {{");
                sb.AppendLine($"                input.type = 'checkbox';");
                sb.AppendLine($"                input.checked = Boolean(value);");
                sb.AppendLine($"            }} else {{");
                sb.AppendLine($"                input.type = typeof value === 'number' ? 'number' : 'text';");
                sb.AppendLine($"                input.value = value instanceof Date ? value.toISOString() : typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);");
                sb.AppendLine($"            }}");
                sb.AppendLine($"            input.addEventListener('change', async (e) => {{");
                sb.AppendLine($"                const tgt = e.target as HTMLInputElement;");
                sb.AppendLine($"                let parsed: any;");
                sb.AppendLine($"                if (value instanceof Date) parsed = new Date(tgt.value);");
                sb.AppendLine($"                else if (typeof value === 'number') parsed = tgt.valueAsNumber;");
                sb.AppendLine($"                else if (typeof value === 'boolean') parsed = tgt.checked;");
                sb.AppendLine($"                else {{ try {{ parsed = JSON.parse(tgt.value); }} catch {{ parsed = tgt.value; }} }}");
                sb.AppendLine($"                const newObj = Object.assign({{}}, vm.{camel});");
                sb.AppendLine($"                if (JSON.stringify((newObj as any)[key]) !== JSON.stringify(parsed)) {{");
                sb.AppendLine($"                    (newObj as any)[key] = parsed;");
                sb.AppendLine($"                    try {{ await vm.updatePropertyValueDebounced('{p.Name}', newObj); }}");
                sb.AppendLine($"                    catch (err) {{ handleError(err, 'Update {p.Name}'); }}");
                sb.AppendLine($"                }}");
                sb.AppendLine($"            }});");
                sb.AppendLine($"            field.appendChild(label);");
                sb.AppendLine($"            field.appendChild(input);");
                sb.AppendLine($"        }}");
                sb.AppendLine($"        {camel}Container.appendChild(field);");
                sb.AppendLine($"    }});");
                sb.AppendLine($"    {camel}Details.appendChild({camel}Container);");
                sb.AppendLine($"    {camel}El.appendChild({camel}Details);");
            }
        }
        sb.AppendLine("    (document.getElementById('connection-status') as HTMLElement).textContent = vm.connectionStatus;");
        sb.AppendLine("}");
        sb.AppendLine();
        sb.AppendLine("async function init() {");
        sb.AppendLine("    try {");
        sb.AppendLine("        await vm.initializeRemote();");
        sb.AppendLine("        vm.addChangeListener(render);");
        sb.AppendLine("        await render();");
        sb.AppendLine("    } catch (err) {");
        sb.AppendLine("        handleError(err, 'Initialize remote');");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();
        sb.AppendLine("document.addEventListener('DOMContentLoaded', () => {");
        sb.AppendLine("    init();");
        foreach (var p in props)
        {
            string camel = GeneratorHelpers.ToCamelCase(p.Name);
            string typeStr = p.TypeString.ToLowerInvariant();
            if (!IsPrimitiveType(typeStr) || p.IsReadOnly) continue;
            sb.AppendLine($"    (document.getElementById('{camel}') as HTMLInputElement).addEventListener('change', async (e) => {{");
            string newValueExpr = typeStr.Contains("bool") ? "(e.target as HTMLInputElement).checked" : "(e.target as HTMLInputElement).value";
            sb.AppendLine($"        const newValue = {newValueExpr};");
            sb.AppendLine($"        const currentValue = vm.{camel};");
            sb.AppendLine("        // Only update if value actually changed");

            string comparison;
            string convertedValue;
            if (typeStr.Contains("int") || typeStr.Contains("number"))
            {
                convertedValue = "Number(newValue)";
                comparison = "Number(newValue) !== currentValue";
            }
            else if (typeStr.Contains("bool"))
            {
                convertedValue = "newValue";
                comparison = "Boolean(newValue) !== currentValue";
            }
            else // string
            {
                convertedValue = "newValue";
                comparison = "newValue !== currentValue";
            }

            sb.AppendLine($"        if ({comparison}) {{");
            sb.AppendLine("            try {");
            sb.AppendLine($"                await vm.updatePropertyValueDebounced('{p.Name}', {convertedValue});");
            sb.AppendLine("            } catch (err) {");
            sb.AppendLine($"                handleError(err, 'Update {p.Name}');");
            sb.AppendLine("            }");
            sb.AppendLine("        }");
            sb.AppendLine("    });");
        }
        foreach (var cmd in cmds)
        {
            string camel = GeneratorHelpers.ToCamelCase(cmd.MethodName);
            sb.AppendLine($"    (document.getElementById('{camel}-btn') as HTMLButtonElement).addEventListener('click', async () => {{");
            sb.AppendLine("        try {");
            var sampleArgs = string.Join(", ", cmd.Parameters.Select(p => GetSampleValue(p.TypeString)));
            sb.AppendLine($"            await vm.{camel}({sampleArgs});");
            sb.AppendLine("        } catch (err) {");
            sb.AppendLine($"            handleError(err, 'Execute {cmd.MethodName}');");
            sb.AppendLine("        }");
            sb.AppendLine("    });");
        }
        sb.AppendLine("});");
        return sb.ToString();
    }

    private static string GetSampleValue(string typeString)
    {
        typeString = typeString.ToLowerInvariant();
        if (typeString.Contains("int")) return "0";
        if (typeString.Contains("bool")) return "false";
        if (typeString.Contains("string")) return "'sample'";
        return "undefined";
    }

    private static bool IsPrimitiveType(string typeStr)
    {
        typeStr = typeStr.ToLowerInvariant();
        return typeStr.Contains("string") || typeStr.Contains("bool") || typeStr.Contains("int") ||
               typeStr.Contains("number") || typeStr.Contains("double") || typeStr.Contains("float") ||
               typeStr.Contains("decimal") || typeStr.Contains("long");
    }

    private static bool IsCollectionType(string typeStr)
    {
        typeStr = typeStr.ToLowerInvariant();
        return typeStr.Contains("observablecollection") || typeStr.Contains("ienumerable") ||
               typeStr.Contains("icollection") || typeStr.Contains("list") ||
               typeStr.EndsWith("[]") || typeStr.Contains("collection");
    }

    public static string GenerateIndexHtml(string vmName, List<PropertyInfo> props, List<CommandInfo> cmds)
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb, "<!-- ", " -->");
        sb.AppendLine("<!DOCTYPE html>");
        sb.AppendLine("<html lang=\"en\">\n<head>");
        sb.AppendLine("    <meta charset=\"utf-8\" />");
        sb.AppendLine($"    <title>{vmName} Client</title>");
        sb.AppendLine("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">");
        sb.AppendLine("    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>");
        sb.AppendLine("    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\" rel=\"stylesheet\">");
        sb.AppendLine("    <style>");
        sb.AppendLine("        body {");
        sb.AppendLine("            font-family: 'Roboto', sans-serif;");
        sb.AppendLine("            margin: 0;");
        sb.AppendLine("            padding: 20px;");
        sb.AppendLine("            background-color: #f4f7f6;");
        sb.AppendLine("            color: #333;");
        sb.AppendLine("        }");
        sb.AppendLine("        .container {");
        sb.AppendLine("            max-width: 800px;");
        sb.AppendLine("            margin: auto;");
        sb.AppendLine("            background: #fff;");
        sb.AppendLine("            padding: 20px;");
        sb.AppendLine("            border-radius: 8px;");
        sb.AppendLine("            box-shadow: 0 2px 10px rgba(0,0,0,0.1);");
        sb.AppendLine("        }");
        sb.AppendLine("        h3 {");
        sb.AppendLine("            color: #0056b3;");
        sb.AppendLine("            border-bottom: 2px solid #0056b3;");
        sb.AppendLine("            padding-bottom: 10px;");
        sb.AppendLine("            margin-bottom: 20px;");
        sb.AppendLine("        }");
        sb.AppendLine("        .field {");
        sb.AppendLine("            margin-bottom: 12px;");
        sb.AppendLine("            display: flex;");
        sb.AppendLine("            gap: 8px;");
        sb.AppendLine("            align-items: center;");
        sb.AppendLine("        }");
        sb.AppendLine("        .field label {");
        sb.AppendLine("            font-weight: 500;");
        sb.AppendLine("            min-width: 200px;");
        sb.AppendLine("            color: #555;");
        sb.AppendLine("        }");
        sb.AppendLine("        input[type=\"text\"], input[type=\"number\"] {");
        sb.AppendLine("            width: 100%;");
        sb.AppendLine("            padding: 8px;");
        sb.AppendLine("            border: 1px solid #ccc;");
        sb.AppendLine("            border-radius: 4px;");
        sb.AppendLine("            box-sizing: border-box;");
        sb.AppendLine("            transition: border-color 0.3s;");
        sb.AppendLine("        }");
        sb.AppendLine("        input[type=\"text\"]:focus, input[type=\"number\"]:focus {");
        sb.AppendLine("            border-color: #0056b3;");
        sb.AppendLine("            outline: none;");
        sb.AppendLine("        }");
        sb.AppendLine("        button {");
        sb.AppendLine("            background-color: #0056b3;");
        sb.AppendLine("            color: white;");
        sb.AppendLine("            padding: 10px 15px;");
        sb.AppendLine("            border: none;");
        sb.AppendLine("            border-radius: 4px;");
        sb.AppendLine("            cursor: pointer;");
        sb.AppendLine("            font-size: 16px;");
        sb.AppendLine("            transition: background-color 0.3s;");
        sb.AppendLine("            margin-right: 10px;");
        sb.AppendLine("        }");
        sb.AppendLine("        button:hover {");
        sb.AppendLine("            background-color: #004494;");
        sb.AppendLine("        }");
        sb.AppendLine("        button:disabled {");
        sb.AppendLine("            background-color: #ccc;");
        sb.AppendLine("            cursor: not-allowed;");
        sb.AppendLine("        }");
        sb.AppendLine("        details {");
        sb.AppendLine("            border: 1px solid #e0e0e0;");
        sb.AppendLine("            border-radius: 4px;");
        sb.AppendLine("            padding: 10px;");
        sb.AppendLine("            margin-bottom: 10px;");
        sb.AppendLine("            background-color: #fafafa;");
        sb.AppendLine("        }");
        sb.AppendLine("        details > summary {");
        sb.AppendLine("            cursor: pointer;");
        sb.AppendLine("            font-weight: 500;");
        sb.AppendLine("            color: #0056b3;");
        sb.AppendLine("        }");
        sb.AppendLine("        #connection-status {");
        sb.AppendLine("            margin-top: 20px;");
        sb.AppendLine("            font-weight: 500;");
        sb.AppendLine("            padding: 10px;");
        sb.AppendLine("            border-radius: 4px;");
        sb.AppendLine("            background-color: #e9ecef;");
        sb.AppendLine("        }");
        sb.AppendLine("        .nested-container {");
        sb.AppendLine("            padding-left: 20px;");
        sb.AppendLine("            border-left: 2px solid #e0e0e0;");
        sb.AppendLine("            margin-top: 10px;");
        sb.AppendLine("        }");
        sb.AppendLine("    </style>");
        sb.AppendLine("</head>\n<body>");
        sb.AppendLine("    <div class=\"container\">\n        <h3>Remote ViewModel</h3>");
        foreach (var p in props)
        {
            string camel = GeneratorHelpers.ToCamelCase(p.Name);
            string typeStr = p.TypeString.ToLowerInvariant();
            if (IsPrimitiveType(typeStr))
            {
                if (p.IsReadOnly)
                {
                    sb.AppendLine($"        <div class='field'><label for='{camel}'>{p.Name}</label><span id='{camel}'></span></div>");
                }
                else
                {
                    string inputType = "text";
                    if (typeStr.Contains("bool"))
                        inputType = "checkbox";
                    else if (typeStr.Contains("int") || typeStr.Contains("number") || typeStr.Contains("double") || typeStr.Contains("float") || typeStr.Contains("decimal") || typeStr.Contains("long"))
                        inputType = "number";
                    sb.AppendLine($"        <div class='field'><label for='{camel}'>{p.Name}</label><input id='{camel}' type='{inputType}'/></div>");
                }
            }
            else
                sb.AppendLine($"        <div id='{camel}'></div>");
        }
        foreach (var cmd in cmds)
        {
            string camel = GeneratorHelpers.ToCamelCase(cmd.MethodName);
            sb.AppendLine($"        <button id='{camel}-btn'>{cmd.MethodName}</button>");
        }
        sb.AppendLine("        <div id='connection-status'></div>");
        sb.AppendLine("    </div>");
        sb.AppendLine("    <script src='bundle.js'></script>");
        sb.AppendLine("</body>\n</html>");
        return sb.ToString();
    }

    public static string GeneratePackageJson(string projectName)
    {
        var projectNameVar = projectName.ToLowerInvariant();
        return $$"""
{
  "name": "{{projectNameVar}}",
  "version": "1.0.0",
  "main": "wwwroot\\app.js",
  "scripts": {
    "protoc": "protoc --plugin=protoc-gen-ts=\".\\node_modules\\.bin\\protoc-gen-ts.cmd\" --plugin=protoc-gen-grpc-web=\".\\node_modules\\protoc-gen-grpc-web\\bin\\protoc-gen-grpc-web.exe\" --js_out=\"import_style=commonjs,binary:./src/generated\" --grpc-web_out=\"import_style=typescript,mode=grpcwebtext:./src/generated\" -Iprotos -Inode_modules/protoc/protoc/include {{projectName}}Service.proto",
    "build": "webpack --mode development",
    "dev": "webpack serve --mode development --open"
  },
  "devDependencies": {
    "ts-loader": "^9.5.2",
    "typescript": "^5.0.0",
    "webpack": "^5.0.0",
    "webpack-cli": "^4.0.0",
    "webpack-dev-server": "^4.0.0",
    "ts-protoc-gen": "0.15.0"
  },
  "dependencies": {
    "grpc-web": "^1.5.0",
    "google-protobuf": "3.21.4",
    "protoc": "^1.1.3",
    "protoc-gen-grpc-web": "^1.5.0"
  }
}
""";
    }

    public static string GenerateTsConfig()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.Append("""
{
  "compilerOptions": {
    "target": "es2020",
    "module": "es2020",
    "moduleResolution": "node",
    "sourceMap": true
  }
}
""");
        return sb.ToString();
    }

    public static string GenerateWebpackConfig()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.AppendLine("""
const path = require('path');

module.exports = {
  entry: './src/app.ts',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'wwwroot'),
    clean: false,
  },
  resolve: { extensions: ['.ts', '.js'] },
  module: { rules: [{ test: /\.ts$/, use: 'ts-loader', exclude: /node_modules/ }] },
  devtool: 'source-map',
  devServer: { static: { directory: path.join(__dirname, 'wwwroot') }, hot: true, open: true, port: 3000 },
  mode: 'development'
};
""");
        return sb.ToString();
    }

    public static string GenerateLaunchJson()
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.AppendLine("""
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Launch Program",
      "skipFiles": [ "<node_internals>/**" ],
      "program": "${workspaceFolder}/src/app.js",
      "cwd": "${workspaceFolder}",
      "console": "externalTerminal"
    }
  ]
}
""");
        return sb.ToString();
    }

    public static string GenerateReadme(string projectName)
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb, "<!-- ", " -->");
        var projectNameVar = projectName;
        sb.AppendLine($$"""
# {{projectNameVar}} TypeScript Client

This project was generated by RemoteMvvmTool and uses gRPC-Web to communicate with the server.

## Setup

```bash
npm install
npm run protoc
npm run build
```

To regenerate the gRPC-Web stubs separately:
```bash
npm run protoc
```

Start the development server:
```bash
npm run dev
```
""");
        return sb.ToString();
    }
}
