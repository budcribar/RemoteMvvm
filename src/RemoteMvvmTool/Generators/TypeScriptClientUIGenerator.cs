using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using GrpcRemoteMvvmModelUtil;
using RemoteMvvmTool.UIComponents;

namespace RemoteMvvmTool.Generators;

/// <summary>
/// Generates the HTML layout and TypeScript program for the browser client by
/// reusing the shared UI component and tree command intermediates.
/// </summary>
public class TypeScriptClientUIGenerator : UIGeneratorBase
{
    private readonly string _viewModelName;

    public TypeScriptClientUIGenerator(string projectName, string modelName, List<PropertyInfo> properties, List<CommandInfo> commands)
        : base(projectName, modelName, properties, commands, "Client")
    {
        _viewModelName = modelName;
    }

    public string GenerateHtmlBody()
    {
        var translator = new TypeScriptUITranslator();
        return translator.Translate(BuildLayout());
    }

    public string GenerateAppSource(string serviceName)
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);

        var clientImportPath = serviceName + "ServiceClientPb";
        sb.AppendLine($"import {{ {serviceName}Client }} from './generated/{clientImportPath}';");
        sb.AppendLine($"import {{ {_viewModelName}RemoteClient }} from './{_viewModelName}RemoteClient';");
        sb.AppendLine();

        sb.AppendLine("type Nullable<T> = T | null | undefined;");
        sb.AppendLine();
        sb.AppendLine("interface PropertyNodeInfo {");
        sb.AppendLine("    propertyName: string;");
        sb.AppendLine("    propertyPath: string;");
        sb.AppendLine("    isSimpleProperty: boolean;");
        sb.AppendLine("    isBooleanProperty: boolean;");
        sb.AppendLine("    isEnumProperty: boolean;");
        sb.AppendLine("    isCollectionProperty: boolean;");
        sb.AppendLine("    isComplexProperty: boolean;");
        sb.AppendLine("    isCollectionItem: boolean;");
        sb.AppendLine("    collectionIndex: number;");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function beginTreeUpdate(treeEl: HTMLElement): void {");
        sb.AppendLine("    treeEl.innerHTML = '';");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function endTreeUpdate(_: HTMLElement): void { }");
        sb.AppendLine();

        sb.AppendLine("function createTreeNode(label: string): HTMLDetailsElement {");
        sb.AppendLine("    const details = document.createElement('details');");
        sb.AppendLine("    const summary = document.createElement('summary');");
        sb.AppendLine("    summary.textContent = label;");
        sb.AppendLine("    details.appendChild(summary);");
        sb.AppendLine("    const container = document.createElement('div');");
        sb.AppendLine("    container.className = 'nested-container';");
        sb.AppendLine("    details.appendChild(container);");
        sb.AppendLine("    return details;");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function addTreeNode(treeEl: HTMLElement, node: HTMLElement): void {");
        sb.AppendLine("    treeEl.appendChild(node);");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function addChildNode(parent: HTMLElement, child: HTMLElement): void {");
        sb.AppendLine("    const container = parent.querySelector(':scope > .nested-container');");
        sb.AppendLine("    if (container) {");
        sb.AppendLine("        container.appendChild(child);");
        sb.AppendLine("    } else {");
        sb.AppendLine("        parent.appendChild(child);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function setNodeInfo(node: HTMLElement, info: Partial<PropertyNodeInfo>): void {");
        sb.AppendLine("    const ds = node.dataset;");
        sb.AppendLine("    if (info.propertyName !== undefined) ds.propertyName = info.propertyName;");
        sb.AppendLine("    if (info.propertyPath !== undefined) ds.propertyPath = info.propertyPath;");
        sb.AppendLine("    if (info.isSimpleProperty !== undefined) ds.isSimpleProperty = String(info.isSimpleProperty);");
        sb.AppendLine("    if (info.isBooleanProperty !== undefined) ds.isBooleanProperty = String(info.isBooleanProperty);");
        sb.AppendLine("    if (info.isEnumProperty !== undefined) ds.isEnumProperty = String(info.isEnumProperty);");
        sb.AppendLine("    if (info.isCollectionProperty !== undefined) ds.isCollectionProperty = String(info.isCollectionProperty);");
        sb.AppendLine("    if (info.isComplexProperty !== undefined) ds.isComplexProperty = String(info.isComplexProperty);");
        sb.AppendLine("    if (info.isCollectionItem !== undefined) ds.isCollectionItem = String(info.isCollectionItem);");
        sb.AppendLine("    if (info.collectionIndex !== undefined) ds.collectionIndex = String(info.collectionIndex);");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function expandAll(treeEl: HTMLElement): void {");
        sb.AppendLine("    treeEl.querySelectorAll('details').forEach(d => (d as HTMLDetailsElement).open = true);");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function collapseAll(treeEl: HTMLElement): void {");
        sb.AppendLine("    treeEl.querySelectorAll('details').forEach(d => (d as HTMLDetailsElement).open = false);");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function evaluatePropertyPath(root: any, path: string): any {");
        sb.AppendLine("    if (!path) return undefined;");
        sb.AppendLine("    const segments = path.split('.');");
        sb.AppendLine("    let current: any = root;");
        sb.AppendLine("    for (const segment of segments) {");
        sb.AppendLine("        if (current === null || current === undefined) return undefined;");
        sb.AppendLine("        const collectionMatch = segment.match(/^(.*)\\[(\\d+)\\]$/);");
        sb.AppendLine("        if (collectionMatch) {");
        sb.AppendLine("            const prop = collectionMatch[1];");
        sb.AppendLine("            const index = Number(collectionMatch[2]);");
        sb.AppendLine("            const next = current[prop];");
        sb.AppendLine("            if (!next) return undefined;");
        sb.AppendLine("            if (Array.isArray(next)) {");
        sb.AppendLine("                current = next[index];");
        sb.AppendLine("            } else {");
        sb.AppendLine("                current = next[index];");
        sb.AppendLine("            }");
        sb.AppendLine("        } else {");
        sb.AppendLine("            current = current[segment];");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("    return current;");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("function renderPropertyDetails(vmState: any, node: HTMLElement | null): void {");
        sb.AppendLine("    const panel = document.getElementById('property-details');");
        sb.AppendLine("    if (!panel) return;");
        sb.AppendLine("    panel.innerHTML = '';");
        sb.AppendLine("    if (!node) {");
        sb.AppendLine("        const placeholder = document.createElement('p');");
        sb.AppendLine("        placeholder.textContent = 'Select a property in the tree to view details.';");
        sb.AppendLine("        panel.appendChild(placeholder);");
        sb.AppendLine("        return;");
        sb.AppendLine("    }");
        sb.AppendLine("    const ds = node.dataset;");
        sb.AppendLine("    const title = document.createElement('h4');");
        sb.AppendLine("    title.textContent = ds.propertyName ?? 'Property';");
        sb.AppendLine("    panel.appendChild(title);");
        sb.AppendLine();
        sb.AppendLine("    if (ds.propertyPath) {");
        sb.AppendLine("        const value = evaluatePropertyPath(vmState, ds.propertyPath);");
        sb.AppendLine("        const valueEl = document.createElement('pre');");
        sb.AppendLine("        valueEl.textContent = typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);");
        sb.AppendLine("        panel.appendChild(valueEl);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    const list = document.createElement('ul');");
        sb.AppendLine("    panel.appendChild(list);");
        sb.AppendLine();
        sb.AppendLine("    const entries: Array<[string, Nullable<string>]> = [");
        sb.AppendLine("        ['Path', ds.propertyPath ?? null],");
        sb.AppendLine("        ['Simple', ds.isSimpleProperty ?? null],");
        sb.AppendLine("        ['Boolean', ds.isBooleanProperty ?? null],");
        sb.AppendLine("        ['Enum', ds.isEnumProperty ?? null],");
        sb.AppendLine("        ['Collection', ds.isCollectionProperty ?? null],");
        sb.AppendLine("        ['Complex', ds.isComplexProperty ?? null],");
        sb.AppendLine("        ['Collection Index', ds.collectionIndex ?? null]");
        sb.AppendLine("    ];");
        sb.AppendLine("    for (const [label, value] of entries) {");
        sb.AppendLine("        if (value === null) continue;");
        sb.AppendLine("        const item = document.createElement('li');");
        sb.AppendLine("        item.textContent = `${label}: ${value}`;");
        sb.AppendLine("        list.appendChild(item);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        var treeLoader = GenerateFrameworkAgnosticTreeLogic("treeEl", "vmState");
        sb.AppendLine(treeLoader);
        sb.AppendLine();

        sb.AppendLine("async function initialize(): Promise<void> {");
        sb.AppendLine("    const connectionStatus = document.getElementById('connection-status');");
        sb.AppendLine("    try {");
        sb.AppendLine("        const grpcClient = new " + serviceName + "Client('http://localhost:50052');");
        sb.AppendLine($"        const vm = new {_viewModelName}RemoteClient(grpcClient);");
        sb.AppendLine("        await vm.initializeRemote();");
        sb.AppendLine();
        sb.AppendLine("        const treeEl = document.getElementById('property-tree') as HTMLElement | null;");
        sb.AppendLine("        const renderTree = () => { if (treeEl) { LoadTree(vm, treeEl); } };");
        sb.AppendLine("        renderTree();");
        sb.AppendLine("        vm.addChangeListener(renderTree);");
        sb.AppendLine();
        sb.AppendLine("        const details = document.getElementById('property-details');");
        sb.AppendLine("        if (treeEl) {");
        sb.AppendLine("            treeEl.addEventListener('click', evt => {");
        sb.AppendLine("                const target = evt.target as HTMLElement | null;");
        sb.AppendLine("                const summary = target?.closest('summary');");
        sb.AppendLine("                const node = summary?.parentElement as HTMLElement | null;");
        sb.AppendLine("                renderPropertyDetails(vm, node);");
        sb.AppendLine("            });");
        sb.AppendLine("        }");
        sb.AppendLine("        if (details) renderPropertyDetails(vm, null);");
        sb.AppendLine();
        sb.AppendLine("        const refreshBtn = document.getElementById('refreshTreeBtn');");
        sb.AppendLine("        refreshBtn?.addEventListener('click', () => renderTree());");
        sb.AppendLine("        const expandBtn = document.getElementById('expandAllBtn');");
        sb.AppendLine("        expandBtn?.addEventListener('click', () => { if (treeEl) expandAll(treeEl); });");
        sb.AppendLine("        const collapseBtn = document.getElementById('collapseAllBtn');");
        sb.AppendLine("        collapseBtn?.addEventListener('click', () => { if (treeEl) collapseAll(treeEl); });");
        sb.AppendLine();

        int commandIndex = 0;
        foreach (var command in Commands)
        {
            var baseName = command.MethodName.EndsWith("Async", StringComparison.Ordinal)
                ? command.MethodName[..^5]
                : command.MethodName;
            var camel = $"commandBtn{commandIndex}";
            sb.AppendLine($"        document.getElementById('{camel}')?.addEventListener('click', async () => {{");
            sb.AppendLine($"            try {{ await vm.{GeneratorHelpers.ToCamelCase(baseName)}(); }}");
            sb.AppendLine("            catch (err) {");
            sb.AppendLine("                console.error('Command failed', err);");
            sb.AppendLine("                if (connectionStatus) connectionStatus.textContent = 'Command failed: ' + String((err as any)?.message ?? err);");
            sb.AppendLine("            }");
            sb.AppendLine("        });");
            commandIndex++;
        }

        sb.AppendLine();
        sb.AppendLine("        if (connectionStatus) connectionStatus.textContent = vm.connectionStatus;");
        sb.AppendLine("    } catch (err) {");
        sb.AppendLine("        console.error('Initialization failed', err);");
        sb.AppendLine("        if (connectionStatus) connectionStatus.textContent = 'Error: ' + String((err as any)?.message ?? err);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("document.addEventListener('DOMContentLoaded', () => {");
        sb.AppendLine("    initialize();");
        sb.AppendLine("});");

        return sb.ToString();
    }

    protected override string ConvertTreeCommandsToFrameworkCode(List<TreeCommand> commands)
    {
        var sb = new StringBuilder();
        var indentLevel = 0;
        var mutableVariables = new HashSet<string>(StringComparer.Ordinal);

        foreach (var cmd in commands.Where(c => c.Type == TreeCommandType.Increment))
        {
            if (cmd.Parameters.Length > 0)
                mutableVariables.Add(cmd.Parameters[0]);
        }

        foreach (var command in commands)
        {
            var indent = new string(' ', indentLevel * 4);
            switch (command.Type)
            {
                case TreeCommandType.BeginFunction:
                    var fnName = command.Parameters[0];
                    sb.AppendLine($"{indent}function {fnName}(vmState: any, treeEl: HTMLElement): void {{");
                    indentLevel++;
                    break;
                case TreeCommandType.EndFunction:
                    indentLevel--;
                    sb.AppendLine(new string(' ', indentLevel * 4) + "}");
                    break;
                case TreeCommandType.Comment:
                    sb.AppendLine($"{indent}// {command.Parameters[0]}");
                    break;
                case TreeCommandType.TryBegin:
                    sb.AppendLine($"{indent}try {{");
                    indentLevel++;
                    break;
                case TreeCommandType.TryEnd:
                    indentLevel--;
                    sb.AppendLine(new string(' ', indentLevel * 4) + "}");
                    break;
                case TreeCommandType.CatchBegin:
                    sb.AppendLine($"{indent}catch (ex) {{");
                    indentLevel++;
                    break;
                case TreeCommandType.CatchEnd:
                    indentLevel--;
                    sb.AppendLine(new string(' ', indentLevel * 4) + "}");
                    break;
                case TreeCommandType.FinallyBegin:
                    sb.AppendLine($"{indent}finally {{");
                    indentLevel++;
                    break;
                case TreeCommandType.FinallyEnd:
                    indentLevel--;
                    sb.AppendLine(new string(' ', indentLevel * 4) + "}");
                    break;
                case TreeCommandType.BeginUpdate:
                    sb.AppendLine($"{indent}beginTreeUpdate({command.Parameters[0]});");
                    break;
                case TreeCommandType.EndUpdate:
                    sb.AppendLine($"{indent}endTreeUpdate({command.Parameters[0]});");
                    break;
                case TreeCommandType.Clear:
                    sb.AppendLine($"{indent}{command.Parameters[0]}.innerHTML = '';");
                    break;
                case TreeCommandType.CreateNode:
                    sb.AppendLine($"{indent}const {command.Parameters[0]} = createTreeNode({ConvertExpression(command.Parameters[1])});");
                    break;
                case TreeCommandType.AddToTree:
                    sb.AppendLine($"{indent}addTreeNode({command.Parameters[0]}, {command.Parameters[1]});");
                    break;
                case TreeCommandType.AddChildNode:
                    sb.AppendLine($"{indent}addChildNode({command.Parameters[0]}, {command.Parameters[1]});");
                    break;
                case TreeCommandType.ExpandNode:
                    sb.AppendLine($"{indent}if ({command.Parameters[0]} instanceof HTMLDetailsElement) {{ {command.Parameters[0]}.open = true; }}");
                    break;
                case TreeCommandType.SetNodeTag:
                    sb.AppendLine($"{indent}setNodeInfo({command.Parameters[0]}, {BuildNodeInfoLiteral(command)});");
                    break;
                case TreeCommandType.AssignValue:
                    var varName = command.Parameters[0];
                    var keyword = mutableVariables.Contains(varName) ? "let" : "const";
                    sb.AppendLine($"{indent}{keyword} {varName} = {ConvertExpression(command.Parameters[1])};");
                    break;
                case TreeCommandType.IfNotNull:
                    sb.AppendLine($"{indent}if ({ConvertExpression(command.Parameters[0])} != null) {{");
                    indentLevel++;
                    break;
                case TreeCommandType.Else:
                    indentLevel--;
                    sb.AppendLine(new string(' ', indentLevel * 4) + "} else {");
                    indentLevel++;
                    break;
                case TreeCommandType.EndIf:
                    indentLevel--;
                    sb.AppendLine(new string(' ', indentLevel * 4) + "}");
                    break;
                case TreeCommandType.ForEach:
                    sb.AppendLine($"{indent}for (const {command.Parameters[0]} of {ConvertIterableExpression(command.Parameters[1])}) {{");
                    indentLevel++;
                    break;
                case TreeCommandType.EndForEach:
                    indentLevel--;
                    sb.AppendLine(new string(' ', indentLevel * 4) + "}");
                    break;
                case TreeCommandType.IfBreak:
                    sb.AppendLine($"{indent}if ({ConvertExpression(command.Parameters[0])}) break; // {command.Parameters[1]}");
                    break;
                case TreeCommandType.Increment:
                    sb.AppendLine($"{indent}{command.Parameters[0]}++;");
                    break;
            }
        }

        return sb.ToString();
    }

    private static string ConvertIterableExpression(string expression)
        => $"({ConvertExpression(expression)} ?? [])";

    private static string ConvertExpression(string expression)
    {
        if (string.IsNullOrWhiteSpace(expression))
            return expression;

        var converted = expression
            .Replace(".ToString()", ".toString()", StringComparison.Ordinal)
            .Replace(".GetType().Name", ".constructor?.name ?? 'Object'", StringComparison.Ordinal)
            .Replace(".Count", ".length", StringComparison.Ordinal)
            .Replace(".Length", ".length", StringComparison.Ordinal);

        converted = Regex.Replace(converted, @"\.([A-Z][A-Za-z0-9_]*)", static match =>
        {
            var prop = match.Groups[1].Value;
            if (string.Equals(prop, "length", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(prop, "constructor", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(prop, "toString", StringComparison.OrdinalIgnoreCase))
            {
                return "." + prop.ToLowerInvariant();
            }

            var camel = char.ToLowerInvariant(prop[0]) + prop[1..];
            return "." + camel;
        });

        return converted;
    }

    private static string BuildNodeInfoLiteral(TreeCommand command)
    {
        var nameLiteral = ConvertLiteral(command.Parameters[1]);
        var additional = ParseAdditionalProperties(command.Parameters.ElementAtOrDefault(3));
        additional["propertyName"] = nameLiteral;
        return "{" + string.Join(", ", additional.Select(kv => $"{kv.Key}: {kv.Value}")) + "}";
    }

    private static string ConvertLiteral(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "''";
        var trimmed = value.Trim();
        if (trimmed.StartsWith("\"", StringComparison.Ordinal) && trimmed.EndsWith("\"", StringComparison.Ordinal) && trimmed.Length >= 2)
        {
            var inner = trimmed[1..^1];
            if (inner.Contains('+', StringComparison.Ordinal))
            {
                inner = inner.Replace("\\\"", "'", StringComparison.Ordinal);
                inner = inner.Replace("\"", "'", StringComparison.Ordinal);
                return inner;
            }

            inner = inner.Replace("\\\"", "\"", StringComparison.Ordinal);
            inner = inner.Replace("'", "\\'", StringComparison.Ordinal);
            return $"'{inner}'";
        }
        return ConvertExpression(trimmed);
    }

    private static Dictionary<string, string> ParseAdditionalProperties(string? value)
    {
        var result = new Dictionary<string, string>(StringComparer.Ordinal);
        if (string.IsNullOrWhiteSpace(value))
            return result;

        var parts = value.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
        foreach (var part in parts)
        {
            var tokens = part.Split('=', StringSplitOptions.TrimEntries);
            if (tokens.Length != 2)
                continue;
            var key = char.ToLowerInvariant(tokens[0][0]) + tokens[0][1..];
            var literal = ConvertLiteral(tokens[1]);
            if (key == "propertyPath")
            {
                literal = ConvertPropertyPathLiteral(literal);
            }
            result[key] = literal;
        }
        return result;
    }

    private static string ConvertPropertyPathLiteral(string literal)
    {
        if (string.IsNullOrEmpty(literal))
            return literal;

        if (literal.StartsWith("'", StringComparison.Ordinal) &&
            literal.EndsWith("'", StringComparison.Ordinal) &&
            !literal.Contains("+", StringComparison.Ordinal))
        {
            var inner = literal[1..^1];
            var camel = GeneratorHelpers.ToCamelCase(inner);
            return $"'{camel}'";
        }

        if (!literal.Contains("'", StringComparison.Ordinal))
            return literal;

        var sb = new StringBuilder();
        int index = 0;
        while (index < literal.Length)
        {
            if (literal[index] == '\'')
            {
                var end = literal.IndexOf('\'', index + 1);
                if (end == -1)
                {
                    sb.Append(literal.AsSpan(index));
                    break;
                }

                var segment = literal.Substring(index + 1, end - index - 1);
                segment = ConvertPathSegment(segment);
                sb.Append('\'').Append(segment).Append('\'');
                index = end + 1;
            }
            else
            {
                sb.Append(literal[index]);
                index++;
            }
        }

        return sb.ToString();
    }

    private static string ConvertPathSegment(string segment)
    {
        if (string.IsNullOrEmpty(segment))
            return segment;

        var sb = new StringBuilder();
        int start = 0;
        while (start < segment.Length)
        {
            var nextDelimiter = segment.IndexOfAny(new[] { '.', '[' }, start);
            if (nextDelimiter == -1)
            {
                var token = segment[start..];
                sb.Append(GeneratorHelpers.ToCamelCase(token));
                break;
            }

            var tokenPart = segment.Substring(start, nextDelimiter - start);
            if (tokenPart.Length > 0)
                sb.Append(GeneratorHelpers.ToCamelCase(tokenPart));
            sb.Append(segment[nextDelimiter]);
            start = nextDelimiter + 1;
        }

        return sb.ToString();
    }

    private UIComponent BuildLayout()
    {
        var root = new ContainerComponent("div", cssClass: "container");
        root.Children.Add(new HeadingComponent("Remote ViewModel"));

        var actionBar = new ContainerComponent("div", "action-bar", "action-bar");
        actionBar.Children.Add(new ButtonComponent("refreshTreeBtn", "Refresh"));
        actionBar.Children.Add(new ButtonComponent("expandAllBtn", "Expand All"));
        actionBar.Children.Add(new ButtonComponent("collapseAllBtn", "Collapse"));
        root.Children.Add(actionBar);

        var content = new ContainerComponent("div", "content", "content-layout");
        content.Children.Add(new PlaceholderComponent("div", "property-tree", "tree-panel"));
        content.Children.Add(new PlaceholderComponent("div", "property-details", "details-panel"));
        root.Children.Add(content);

        if (Commands.Count > 0)
        {
            var commandBar = new ContainerComponent("div", "command-bar", "command-bar");
            for (int i = 0; i < Commands.Count; i++)
            {
                var command = Commands[i];
                var baseName = command.MethodName.EndsWith("Async", StringComparison.Ordinal)
                    ? command.MethodName[..^5]
                    : command.MethodName;
                commandBar.Children.Add(new ButtonComponent($"commandBtn{i}", baseName));
            }
            root.Children.Add(commandBar);
        }

        root.Children.Add(new PlaceholderComponent("div", "connection-status", "status"));
        return root;
    }

    public override string GenerateProgram(string protoNs, string serviceName) => string.Empty;

    protected override UIComponent GenerateTreeViewStructure() => BuildLayout();

    protected override UIComponent GeneratePropertyDetailsPanel() => new PlaceholderComponent("div", "property-details", "details-panel");

    protected override UIComponent GenerateCommandButtons() => new PlaceholderComponent("div", "command-bar", "command-bar");

    protected override UIComponent GeneratePropertyChangeMonitoring() => new CodeBlockComponent("// Property change monitoring handled in TypeScript");

    protected override string GenerateTreeBeginUpdate(string treeVariableName) => string.Empty;
    protected override string GenerateTreeEndUpdate(string treeVariableName) => string.Empty;
    protected override string GenerateTreeClear(string treeVariableName) => string.Empty;
    protected override string GenerateCreateTreeNode(string text) => string.Empty;
    protected override string GenerateAddTreeNode(string treeVariableName, string nodeVariableName) => string.Empty;
    protected override string GenerateAddChildTreeNode(string parentNodeVariableName, string childNodeVariableName) => string.Empty;
    protected override string GenerateExpandTreeNode(string nodeVariableName) => string.Empty;
    protected override string GenerateSetTreeNodeTag(string nodeVariableName, string propertyName, string objectReference, string additionalProperties) => string.Empty;
}
