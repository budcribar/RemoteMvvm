using GrpcRemoteMvvmModelUtil;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RemoteMvvmTool.Generators;

/// <summary>
/// Generates a separate equality partial for a ViewModel to enable structural comparisons in tests
/// without relying on numeric flattening heuristics.
/// </summary>
public static class ViewModelEqualityGenerator
{
    public static string Generate(string vmName, string vmNamespace, List<PropertyInfo> properties)
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        // Insert necessary using directives so the generated file compiles in isolation
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine();
        var propNames = properties?.Select(p => p.Name).Distinct().ToList() ?? new List<string>();
        var propArray = string.Join(",", propNames.Select(p => $"\"{p}\""));

        sb.AppendLine($"namespace {vmNamespace}");
        sb.AppendLine("{");
        sb.AppendLine($"    public partial class {vmName} : IEquatable<{vmName}>");
        sb.AppendLine("    {");
        sb.AppendLine($"        private static readonly string[] __eqProps = new []{{{propArray}}};");
        sb.AppendLine();
        sb.AppendLine($"        public bool Equals({vmName}? other)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (ReferenceEquals(null, other)) return false;");
        sb.AppendLine("            if (ReferenceEquals(this, other)) return true;\n            return DeepDiff(other).Count == 0;");
        sb.AppendLine("        }");
        sb.AppendLine("        public override bool Equals(object? obj) => Equals(obj as " + vmName + ");");
        sb.AppendLine();
        sb.AppendLine("        public override int GetHashCode()");
        sb.AppendLine("        {");
        sb.AppendLine("            var hc = new HashCode();");
        sb.AppendLine("            foreach (var n in __eqProps) { try { var v = GetType().GetProperty(n)?.GetValue(this); if (v != null) hc.Add(v); } catch { } }");
        sb.AppendLine("            return hc.ToHashCode();");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine($"        public List<string> DeepDiff({vmName}? other)");
        sb.AppendLine("        {");
        sb.AppendLine("            var diffs = new List<string>();");
        sb.AppendLine("            if (other == null) { diffs.Add(\"<other null>\"); return diffs; }");
        sb.AppendLine("            foreach (var n in __eqProps)");
        sb.AppendLine("            {");
        sb.AppendLine("                object? a=null,b=null; bool okA=false, okB=false;");
        sb.AppendLine("                try { a = GetType().GetProperty(n)?.GetValue(this); okA=true; } catch { }");
        sb.AppendLine("                try { b = other.GetType().GetProperty(n)?.GetValue(other); okB=true; } catch { }");
        sb.AppendLine("                if (!okA || !okB) { diffs.Add($\"{n}: inaccessible\"); continue; }");
        sb.AppendLine("                if (!ValuesEqual(a,b)) diffs.Add($\"{n}: '{FormatVal(a)}' != '{FormatVal(b)}'\");");
        sb.AppendLine("            }");
        sb.AppendLine("            return diffs;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        private static bool ValuesEqual(object? a, object? b)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (ReferenceEquals(a,b)) return true;");
        sb.AppendLine("            if (a is null || b is null) return false;");
        sb.AppendLine("            if (a.GetType()!=b.GetType()) return false;");
        sb.AppendLine("            switch (a)");
        sb.AppendLine("            {");
        sb.AppendLine("                case string sa: return sa==(string)b;");
        sb.AppendLine("                case Guid ga: return ga.Equals((Guid)b);");
        sb.AppendLine("                case DateTime dta: return dta.ToUniversalTime().Ticks==((DateTime)b).ToUniversalTime().Ticks;");
        sb.AppendLine("                case DateOnly doa: return doa.DayNumber==((DateOnly)b).DayNumber;");
        sb.AppendLine("                case TimeOnly toa: return toa.Ticks==((TimeOnly)b).Ticks;");
        sb.AppendLine("                case decimal deca: return deca==(decimal)b;");
        sb.AppendLine("                case double da: return Math.Abs(da-(double)b)<1e-9;");
        sb.AppendLine("                case float fa: return Math.Abs(fa-(float)b)<1e-6f;");
        sb.AppendLine("                case System.Collections.IDictionary dictA:");
        sb.AppendLine("                    var dictB = (System.Collections.IDictionary)b; if (dictA.Count!=dictB.Count) return false; foreach (var key in dictA.Keys){ if (!dictB.Contains(key)) return false; if (!ValuesEqual(dictA[key], dictB[key])) return false;} return true;");
        sb.AppendLine("                case System.Collections.IEnumerable enA when a is not string:");
        sb.AppendLine("                    var listA = enA.Cast<object?>().ToList(); var listB = ((System.Collections.IEnumerable)b).Cast<object?>().ToList(); if (listA.Count!=listB.Count) return false; for (int i=0;i<listA.Count;i++) if (!ValuesEqual(listA[i], listB[i])) return false; return true;");
        sb.AppendLine("            }");
        sb.AppendLine("            if (a.GetType().IsValueType) return a.Equals(b);");
        sb.AppendLine("            var props = a.GetType().GetProperties(System.Reflection.BindingFlags.Public|System.Reflection.BindingFlags.Instance).Where(p=>p.CanRead && p.GetIndexParameters().Length==0);");
        sb.AppendLine("            foreach (var p in props){ object? va=null,vb=null; try { va=p.GetValue(a); vb=p.GetValue(b);} catch { } if (!ValuesEqual(va,vb)) return false; }");
        sb.AppendLine("            return true;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        private static string FormatVal(object? v)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (v==null) return \"<null>\";");
        sb.AppendLine("            if (v is string s) return s;");
        sb.AppendLine("            if (v is DateTime dt) return dt.ToUniversalTime().ToString(\"o\");");
        sb.AppendLine("            if (v is System.Collections.IEnumerable en && v is not string) return \"[\"+string.Join(\",\", en.Cast<object?>().Select(FormatVal))+\"]\";");
        sb.AppendLine("            return v.ToString() ?? string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }
}
