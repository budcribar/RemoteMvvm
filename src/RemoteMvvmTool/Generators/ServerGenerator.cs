using GrpcRemoteMvvmModelUtil;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RemoteMvvmTool.Generators;

public static class ServerGenerator
{
    public static string Generate(string vmName, string protoNs, string serviceName, List<PropertyInfo> props, List<CommandInfo> cmds, string viewModelNamespace, string runType = "wpf")
    {
        var sb = new StringBuilder();
        GeneratorHelpers.AppendAutoGeneratedHeader(sb);
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using Grpc.Core;");
        sb.AppendLine($"using {protoNs};");
        sb.AppendLine($"using {viewModelNamespace};");
        sb.AppendLine("using Google.Protobuf;");
        sb.AppendLine("using Google.Protobuf.WellKnownTypes;");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using System.Collections;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Collections.Concurrent;");
        sb.AppendLine("using System.ComponentModel;");
        sb.AppendLine("using System.Diagnostics;");
        sb.AppendLine("using System.Threading.Channels;");
        sb.AppendLine("using Channel = System.Threading.Channels.Channel;");
        sb.AppendLine("using Microsoft.Extensions.Logging;");
        if (runType == "wpf") sb.AppendLine("using System.Windows.Threading;");
        else if (runType == "winforms") sb.AppendLine("using System.Windows.Forms;");
        sb.AppendLine();
        sb.AppendLine($"public partial class {vmName}GrpcServiceImpl : {serviceName}.{serviceName}Base");
        sb.AppendLine("{");
        sb.AppendLine("    public static event System.EventHandler<int>? ClientCountChanged;");
        sb.AppendLine("    private static int _clientCount = -1;");
        sb.AppendLine("    public static int ClientCount");
        sb.AppendLine("    {");
        sb.AppendLine("        get => _clientCount;");
        sb.AppendLine("        private set");
        sb.AppendLine("        {");
        sb.AppendLine("            if (_clientCount != value)");
        sb.AppendLine("            {");
        sb.AppendLine("                _clientCount = value;");
        sb.AppendLine("                ClientCountChanged?.Invoke(null, value);");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    static {vmName}GrpcServiceImpl()");
        sb.AppendLine("    {");
        sb.AppendLine("        ClientCount = 0;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    private readonly {vmName} _viewModel;");
        sb.AppendLine($"    private static readonly ConcurrentDictionary<IServerStreamWriter<{protoNs}.PropertyChangeNotification>, Channel<{protoNs}.PropertyChangeNotification>> _subscriberChannels = new ConcurrentDictionary<IServerStreamWriter<{protoNs}.PropertyChangeNotification>, Channel<{protoNs}.PropertyChangeNotification>>();");
        if (runType == "wpf") sb.AppendLine("    private readonly Dispatcher? _dispatcher;");
        else if (runType == "winforms") sb.AppendLine("    private readonly Control _dispatcher;");
        sb.AppendLine("    private readonly ILogger? _logger;");
        sb.AppendLine();
        string dispatcherParam = runType == "wpf" ? "Dispatcher dispatcher, " : runType == "winforms" ? "Control dispatcher, " : string.Empty;
        sb.AppendLine("    public " + vmName + "GrpcServiceImpl(" + vmName + " viewModel, " + dispatcherParam + "ILogger<" + vmName + "GrpcServiceImpl>? logger = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        _viewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));");
        if (runType == "wpf")
        {
            sb.AppendLine("        _dispatcher = dispatcher ?? throw new ArgumentNullException(nameof(dispatcher));");
        }
        else if (runType == "winforms")
        {
            sb.AppendLine("        _dispatcher = dispatcher ?? throw new ArgumentNullException(nameof(dispatcher));");
        }
        sb.AppendLine("        _logger = logger;");
        sb.AppendLine("        if (_viewModel is INotifyPropertyChanged inpc) { inpc.PropertyChanged += ViewModel_PropertyChanged; }");
        sb.AppendLine("        else { Debug.WriteLine(\"[GrpcService:" + vmName + "] WARNING: ViewModel does not implement INotifyPropertyChanged!\"); }");
        sb.AppendLine("        Debug.WriteLine(\"[GrpcService:" + vmName + "] Constructor completed. ViewModel type: \" + _viewModel.GetType().FullName);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    public override Task<{vmName}State> GetState(Empty request, ServerCallContext context)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var state = new {vmName}State();");

        string KeyToProto(string expr, ITypeSymbol type)
        {
            if (type.TypeKind == TypeKind.Enum) return $"(int){expr}";
            return GeneratorHelpers.GetProtoWellKnownTypeFor(type) switch
            {
                "Int32Value" => $"(int){expr}",
                "UInt32Value" => $"(uint){expr}",
                "Int64Value" => expr,
                "UInt64Value" => expr,
                "StringValue" => type.ToDisplayString() switch
                {
                    "System.Guid" => $"{expr}.ToString()",
                    "System.Char" => $"{expr}.ToString()",
                    _ => expr
                },
                "FloatValue" => type.ToDisplayString() == "System.Half" ? $"(float){expr}" : expr,
                _ => expr
            };
        }

        string ValueToProto(string expr, ITypeSymbol type, string prefix)
        {
            if (GeneratorHelpers.TryGetDictionaryTypeArgs(type, out var k, out var v))
                return DictToProto(expr, k!, v!, prefix + "_kv");
            if (type.TypeKind == TypeKind.Enum) return $"(int){expr}";
            var wkt = GeneratorHelpers.GetProtoWellKnownTypeFor(type);
            if (wkt == "Timestamp") return $"Timestamp.FromDateTime({expr}.ToUniversalTime())";
            if (!GeneratorHelpers.IsWellKnownType(type))
                return $"{viewModelNamespace}.ProtoStateConverters.ToProto({expr})";
            
            // Handle special type conversions
            var typeDisplayString = type.ToDisplayString();
            return typeDisplayString switch
            {
                "System.Half" => $"(float){expr}",
                "System.Char" => $"{expr}.ToString()",
                "System.Guid" => $"{expr}.ToString()",
                "System.Decimal" => $"{expr}.ToString()",
                _ => expr
            };
        }

        string DictToProto(string dictExpr, ITypeSymbol kType, ITypeSymbol vType, string kvVar)
        {
            if (GeneratorHelpers.CanUseProtoMap(kType, vType))
            {
                string keySel = KeyToProto($"{kvVar}.Key", kType);
                string valSel = ValueToProto($"{kvVar}.Value", vType, $"{kvVar}1");
                return $"{dictExpr}.ToDictionary({kvVar} => {keySel}, {kvVar} => {valSel})";
            }
            else
            {
                string entryName = GeneratorHelpers.GetDictionaryEntryName(kType, vType);
                string keySel = KeyToProto($"{kvVar}.Key", kType);
                string valSel = ValueToProto($"{kvVar}.Value", vType, $"{kvVar}1");
                
                if (GeneratorHelpers.TryGetDictionaryTypeArgs(vType, out _, out _))
                    return $"{dictExpr}.Select({kvVar} => new {entryName} {{ Key = {keySel}, Value = {{ {valSel} }} }})";
                else if (GeneratorHelpers.TryGetEnumerableElementType(vType, out _) || vType is IArrayTypeSymbol || GeneratorHelpers.TryGetMemoryElementType(vType, out _))
                {
                    // Value type is a collection - need to populate the repeated field
                    return $"{dictExpr}.Select({kvVar} => {{ var entry = new {entryName} {{ Key = {keySel} }}; if ({kvVar}.Value != null) entry.Value.AddRange({valSel}); return entry; }})";
                }
                else
                    return $"{dictExpr}.Select({kvVar} => new {entryName} {{ Key = {keySel}, Value = {valSel} }})";
            }
        }

        foreach (var p in props)
        {
            sb.AppendLine($"        // Mapping property: {p.Name} to state.{p.Name}");
            sb.AppendLine("        try");
            sb.AppendLine("        {");
            sb.AppendLine($"            var propValue = _viewModel.{p.Name};");
            if (p.FullTypeSymbol is INamedTypeSymbol named && named.IsGenericType)
            {
                if (GeneratorHelpers.TryGetDictionaryTypeArgs(named, out _, out _))
                {
                    var keyType = named.TypeArguments[0];
                    var valueType = named.TypeArguments[1];
                    if (GeneratorHelpers.CanUseProtoMap(keyType, valueType))
                    {
                        // Use protobuf map - add individual key-value pairs
                        string keySel = KeyToProto("kv.Key", keyType);
                        string valSel = ValueToProto("kv.Value", valueType, "kv1");
                        sb.AppendLine($"            if (propValue != null)");
                        sb.AppendLine($"            {{");
                        sb.AppendLine($"                foreach (var kv in propValue)");
                        sb.AppendLine($"                    state.{p.Name}.Add({keySel}, {valSel});");
                        sb.AppendLine($"            }}");
                    }
                    else
                    {
                        // Use repeated message entries - can use AddRange
                        var dictExpr = DictToProto("propValue", keyType, valueType, "kv");
                        sb.AppendLine($"            if (propValue != null) state.{p.Name}.AddRange({dictExpr});");
                    }
                }
                else if (GeneratorHelpers.TryGetMemoryElementType(named, out var memElem))
                {
                    if (memElem?.SpecialType == SpecialType.System_Byte)
                        sb.AppendLine($"            if (!propValue.IsEmpty) state.{p.Name} = Google.Protobuf.ByteString.CopyFrom(propValue.ToArray());");
                    else
                        sb.AppendLine($"            if (!propValue.IsEmpty) state.{p.Name}.AddRange(propValue.ToArray());");
                }
                else if (GeneratorHelpers.TryGetEnumerableElementType(named, out var elem))
                {
                    // Special handling for collections of dictionaries
                    if (elem is INamedTypeSymbol elemNamed && elemNamed.IsGenericType &&
                        GeneratorHelpers.TryGetDictionaryTypeArgs(elemNamed, out var elemKeyType, out var elemValueType) &&
                        GeneratorHelpers.CanUseProtoMap(elemKeyType!, elemValueType!))
                    {
                        // This is a collection of dictionaries - use map-containing message approach
                        string dictMapName = GeneratorHelpers.GetDictionaryEntryName(elemKeyType!, elemValueType!) + "Map";
                        string keySel = KeyToProto("kv.Key", elemKeyType!);
                        string valSel = ValueToProto("kv.Value", elemValueType!, "kv1");
                        
                        sb.AppendLine($"            if (propValue != null)");
                        sb.AppendLine($"            {{");
                        sb.AppendLine($"                foreach (var dict in propValue)");
                        sb.AppendLine($"                {{");
                        sb.AppendLine($"                    var mapMsg = new {protoNs}.{dictMapName}();");
                        sb.AppendLine($"                    if (dict != null)");
    sb.AppendLine($"                    {{");
    sb.AppendLine($"                        foreach (var kv in dict)");
    sb.AppendLine($"                            mapMsg.Entries.Add({keySel}, {valSel});");
    sb.AppendLine($"                    }}");
    sb.AppendLine($"                    state.{p.Name}.Add(mapMsg);");
    sb.AppendLine($"                }}");
    sb.AppendLine($"            }}");
                    }
                    else
                    {
                        // Regular collection handling
                        string expr = "propValue";
                        if (!elem!.IsValueType)
                            expr += ".Where(e => e != null)";
                        if (elem.TypeKind == TypeKind.Enum)
                            expr += ".Select(e => (int)e)";
                        else if (!GeneratorHelpers.IsWellKnownType(elem))
                            expr += $".Select({viewModelNamespace}.ProtoStateConverters.ToProto).Where(s => s != null)";
                        sb.AppendLine($"            if (propValue != null) state.{p.Name}.AddRange({expr});");
                    }
                }
                else
                {
                    if (p.FullTypeSymbol.TypeKind == TypeKind.Enum)
                        sb.AppendLine($"            state.{p.Name} = (int)propValue;");
                    else if (!GeneratorHelpers.IsWellKnownType(p.FullTypeSymbol))
                        sb.AppendLine($"            state.{p.Name} = {viewModelNamespace}.ProtoStateConverters.ToProto(propValue);");
                    else
                        sb.AppendLine($"            state.{p.Name} = propValue;");
                }
            }
            else if (p.FullTypeSymbol is IArrayTypeSymbol arr)
            {
                var elem = arr.ElementType;
                if (elem.SpecialType == SpecialType.System_Byte)
                {
                    sb.AppendLine($"            if (propValue != null) state.{p.Name} = Google.Protobuf.ByteString.CopyFrom(propValue);");
                }
                else
                {
                    string expr = "propValue";
                    if (!elem.IsValueType)
                        expr += ".Where(e => e != null)";
                    if (elem.TypeKind == TypeKind.Enum)
                        expr += ".Select(e => (int)e)";
                    else if (!GeneratorHelpers.IsWellKnownType(elem))
                        expr += $".Select({viewModelNamespace}.ProtoStateConverters.ToProto).Where(s => s != null)";
                    sb.AppendLine($"            if (propValue != null) state.{p.Name}.AddRange({expr});");
                }
            }
            else
            {
                if (p.FullTypeSymbol.TypeKind == TypeKind.Enum)
                    sb.AppendLine($"            state.{p.Name} = (int)propValue;");
                else if (!GeneratorHelpers.IsWellKnownType(p.FullTypeSymbol))
                    sb.AppendLine($"            state.{p.Name} = {viewModelNamespace}.ProtoStateConverters.ToProto(propValue);");
                else
                {
                    // Handle special type conversions
                    var typeDisplayString = p.FullTypeSymbol.ToDisplayString();
                    switch (typeDisplayString)
                    {
                        case "System.DateTime":
                            sb.AppendLine($"            state.{p.Name} = Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(propValue.ToUniversalTime());");
                            break;
                        case "System.Half":
                            sb.AppendLine($"            state.{p.Name} = (float)propValue;");
                            break;
                        case "System.Char":
                            sb.AppendLine($"            state.{p.Name} = propValue.ToString();");
                            break;
                        case "System.Guid":
                            sb.AppendLine($"            state.{p.Name} = propValue.ToString();");
                            break;
                        case "System.Decimal":
                            sb.AppendLine($"            state.{p.Name} = propValue.ToString();");
                            break;
                        default:
                            sb.AppendLine($"            state.{p.Name} = propValue;");
                            break;
                    }
                }
            }
            sb.AppendLine("        }");
            sb.AppendLine($"        catch (Exception ex) {{ Debug.WriteLine(\"[GrpcService:{vmName}] Error mapping property {p.Name} to state.{p.Name}: \" + ex.ToString()); }}");
        }
        sb.AppendLine("        return Task.FromResult(state);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    public override async Task SubscribeToPropertyChanges({protoNs}.SubscribeRequest request, IServerStreamWriter<{protoNs}.PropertyChangeNotification> responseStream, ServerCallContext context)");
        sb.AppendLine("    {");
        sb.AppendLine("        var clientId = request.ClientId ?? \"unknown\";");
        sb.AppendLine("        Debug.WriteLine(\"[GrpcService:" + vmName + "] New subscription request from client: \" + clientId);");
        sb.AppendLine($"        var channel = Channel.CreateUnbounded<{protoNs}.PropertyChangeNotification>(new UnboundedChannelOptions {{ SingleReader = true, SingleWriter = false }});");
        sb.AppendLine("        _subscriberChannels.TryAdd(responseStream, channel);");
        sb.AppendLine("        ClientCount = _subscriberChannels.Count;");
        sb.AppendLine("        Debug.WriteLine(\"[GrpcService:" + vmName + "] Subscriber count is now: \" + ClientCount);");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine("            Debug.WriteLine(\"[GrpcService:" + vmName + "] Starting to read from channel for client: \" + clientId);");
        sb.AppendLine("            await foreach (var notification in channel.Reader.ReadAllAsync(context.CancellationToken))");
        sb.AppendLine("            {");
        sb.AppendLine("                Debug.WriteLine(\"[GrpcService:" + vmName + "] Sending property change notification: \" + notification.PropertyName + \" to client: \" + clientId);");
        sb.AppendLine("                await responseStream.WriteAsync(notification);");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (OperationCanceledException)");
        sb.AppendLine("        {");
        sb.AppendLine("            Debug.WriteLine(\"[GrpcService:" + vmName + "] Subscription cancelled for client: \" + clientId);");
        sb.AppendLine("        }");
        sb.AppendLine("        finally");
        sb.AppendLine("        {");
        sb.AppendLine("            Debug.WriteLine(\"[GrpcService:" + vmName + "] Cleaning up subscription for client: \" + clientId);");
        sb.AppendLine("            _subscriberChannels.TryRemove(responseStream, out _);");
        sb.AppendLine("            channel.Writer.TryComplete();");
        sb.AppendLine("            ClientCount = _subscriberChannels.Count;");
        sb.AppendLine("            Debug.WriteLine(\"[GrpcService:" + vmName + "] Subscriber count is now: \" + ClientCount);");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    public override async Task<{protoNs}.UpdatePropertyValueResponse> UpdatePropertyValue({protoNs}.UpdatePropertyValueRequest request, ServerCallContext context)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var response = new {protoNs}.UpdatePropertyValueResponse();");
        sb.AppendLine("        ");
        if (runType == "wpf")
        {
            sb.AppendLine("        if (_dispatcher != null)");
            sb.AppendLine("        {");
            sb.AppendLine("            await _dispatcher.InvokeAsync(() =>");
            sb.AppendLine("            {");
            sb.AppendLine("                response = UpdatePropertyValueInternal(request);");
            sb.AppendLine("            });");
            sb.AppendLine("        }");
            sb.AppendLine("        else");
            sb.AppendLine("        {");
            sb.AppendLine("            response.Success = false;");
            sb.AppendLine("            response.ErrorMessage = \"Dispatcher not available\";");
            sb.AppendLine("        }");
        }
        else if (runType == "winforms")
        {
            sb.AppendLine("        if (_dispatcher != null)");
            sb.AppendLine("        {");
            sb.AppendLine("            await Task.Run(() => _dispatcher.Invoke(new Action(() =>");
            sb.AppendLine("            {");
            sb.AppendLine("                response = UpdatePropertyValueInternal(request);");
            sb.AppendLine("            })));");
            sb.AppendLine("        }");
            sb.AppendLine("        else");
            sb.AppendLine("        {");
            sb.AppendLine("            response.Success = false;");
            sb.AppendLine("            response.ErrorMessage = \"Dispatcher not available\";");
            sb.AppendLine("        }");
        }
        else
        {
            sb.AppendLine("        response = UpdatePropertyValueInternal(request);");
        }
        sb.AppendLine("        ");
        sb.AppendLine("        Debug.WriteLine($\"[GrpcService:" + vmName + "] UpdatePropertyValue result: Success={response.Success}, Error={response.ErrorMessage}\");");
        sb.AppendLine("        return response;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    private {protoNs}.UpdatePropertyValueResponse UpdatePropertyValueInternal({protoNs}.UpdatePropertyValueRequest request)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var response = new {protoNs}.UpdatePropertyValueResponse();");
        sb.AppendLine("        ");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine("            Debug.WriteLine($\"[GrpcService:" + vmName + "] UpdatePropertyValue: Property={request.PropertyName}, Path={request.PropertyPath}, Operation={request.OperationType}\");");
        sb.AppendLine("            ");
        sb.AppendLine("            // Handle different operation types");
        sb.AppendLine("            var operationType = request.OperationType ?? \"set\";");
        sb.AppendLine("            var propertyPath = !string.IsNullOrEmpty(request.PropertyPath) ? request.PropertyPath : request.PropertyName;");
        sb.AppendLine("            ");
        sb.AppendLine("            switch (operationType.ToLowerInvariant())");
        sb.AppendLine("            {");
        sb.AppendLine("                case \"set\":");
        sb.AppendLine("                case \"\":");
        sb.AppendLine("                    response = HandleSetOperation(request, propertyPath);");
        sb.AppendLine("                    break;");
        sb.AppendLine("                case \"add\":");
        sb.AppendLine("                    response = HandleAddOperation(request, propertyPath);");
        sb.AppendLine("                    break;");
        sb.AppendLine("                case \"remove\":");
        sb.AppendLine("                    response = HandleRemoveOperation(request, propertyPath);");
        sb.AppendLine("                    break;");
        sb.AppendLine("                case \"clear\":");
        sb.AppendLine("                    response = HandleClearOperation(request, propertyPath);");
        sb.AppendLine("                    break;");
        sb.AppendLine("                case \"insert\":");
        sb.AppendLine("                    response = HandleInsertOperation(request, propertyPath);");
        sb.AppendLine("                    break;");
        sb.AppendLine("                default:");
        sb.AppendLine("                    response.Success = false;");
        sb.AppendLine("                    response.ErrorMessage = $\"Unsupported operation type: {request.OperationType}\";");
        sb.AppendLine("                    break;");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine("            Debug.WriteLine($\"[GrpcService:" + vmName + "] Exception in UpdatePropertyValue: {ex}\");");
        sb.AppendLine("            response.Success = false;");
        sb.AppendLine("            response.ErrorMessage = ex.Message;");
        sb.AppendLine("        }");
        sb.AppendLine("        ");
        sb.AppendLine("        return response;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    private {protoNs}.UpdatePropertyValueResponse HandleSetOperation({protoNs}.UpdatePropertyValueRequest request, string propertyPath)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var response = new {protoNs}.UpdatePropertyValueResponse();");
        sb.AppendLine("        ");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine("            object target = _viewModel;");
        sb.AppendLine("            var pathParts = propertyPath.Split('.');");
        sb.AppendLine("            ");
        sb.AppendLine("            // Navigate to nested property if needed");
        sb.AppendLine("            for (int i = 0; i < pathParts.Length - 1; i++)");
        sb.AppendLine("            {");
        sb.AppendLine("                var prop = target.GetType().GetProperty(pathParts[i]);");
        sb.AppendLine("                if (prop == null)");
        sb.AppendLine("                {");
        sb.AppendLine("                    response.Success = false;");
        sb.AppendLine("                    response.ErrorMessage = $\"Property '{pathParts[i]}' not found in path '{propertyPath}'\";");
        sb.AppendLine("                    return response;");
        sb.AppendLine("                }");
        sb.AppendLine("                var nextTarget = prop.GetValue(target);");
        sb.AppendLine("                if (nextTarget == null)");
        sb.AppendLine("                {");
        sb.AppendLine("                    response.Success = false;");
        sb.AppendLine("                    response.ErrorMessage = $\"Null value encountered at '{pathParts[i]}' in path '{propertyPath}'\";");
        sb.AppendLine("                    return response;");
        sb.AppendLine("                }");
        sb.AppendLine("                target = nextTarget;");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            var finalPropertyName = pathParts[pathParts.Length - 1];");
        sb.AppendLine("            var propertyInfo = target.GetType().GetProperty(finalPropertyName);");
        sb.AppendLine("            ");
        sb.AppendLine("            if (propertyInfo == null)");
        sb.AppendLine("            {");
        sb.AppendLine("                response.Success = false;");
        sb.AppendLine("                response.ErrorMessage = $\"Property '{finalPropertyName}' not found\";");
        sb.AppendLine("                return response;");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            if (!propertyInfo.CanWrite)");
        sb.AppendLine("            {");
        sb.AppendLine("                response.Success = false;");
        sb.AppendLine("                response.ErrorMessage = $\"Property '{finalPropertyName}' is read-only\";");
        sb.AppendLine("                return response;");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            // Store old value for undo/history");
        sb.AppendLine("            var oldValue = propertyInfo.GetValue(target);");
        sb.AppendLine("            if (oldValue != null) response.OldValue = PackToAny(oldValue);");
        sb.AppendLine("            ");
        sb.AppendLine("            // **DEADLOCK FIX**: Temporarily remove PropertyChanged event handler to prevent streaming notifications during property updates");
        sb.AppendLine("            bool eventHandlerRemoved = false;");
        sb.AppendLine("            if (_viewModel is INotifyPropertyChanged inpc)");
        sb.AppendLine("            {");
        sb.AppendLine("                inpc.PropertyChanged -= ViewModel_PropertyChanged;");
        sb.AppendLine("                eventHandlerRemoved = true;");
        sb.AppendLine("            }");
        sb.AppendLine("            try");
        sb.AppendLine("            {");
        sb.AppendLine("                // Handle collection indexing");
        sb.AppendLine("                if (!string.IsNullOrEmpty(request.CollectionKey) || request.ArrayIndex >= 0)");
        sb.AppendLine("                    response = HandleCollectionUpdate(target, propertyInfo, request);");
        sb.AppendLine("                else");
        sb.AppendLine("                {");
        sb.AppendLine("                    // Direct property assignment");
        sb.AppendLine("                    var convertedValue = ConvertAnyToTargetType(request.NewValue, propertyInfo.PropertyType);");
        sb.AppendLine("                    if (convertedValue.Success)");
        sb.AppendLine("                    {");
        sb.AppendLine("                        propertyInfo.SetValue(target, convertedValue.Value);");
        sb.AppendLine("                        response.Success = true;");
        sb.AppendLine("                    }");
        sb.AppendLine("                    else");
        sb.AppendLine("                    {");
        sb.AppendLine("                        response.Success = false;");
        sb.AppendLine("                        response.ErrorMessage = convertedValue.ErrorMessage;");
        sb.AppendLine("                    }");
        sb.AppendLine("                }");
        sb.AppendLine("            }");
        sb.AppendLine("            finally");
        sb.AppendLine("            {");
        sb.AppendLine("                // **ALWAYS re-add the event handler** - even if an exception occurs during property setting");
        sb.AppendLine("                if (eventHandlerRemoved && _viewModel is INotifyPropertyChanged inpc2)");
        sb.AppendLine("                {");
        sb.AppendLine("                    inpc2.PropertyChanged += ViewModel_PropertyChanged;");
        sb.AppendLine("                }");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine("            response.Success = false;");
        sb.AppendLine("            response.ErrorMessage = ex.Message;");
        sb.AppendLine("            Debug.WriteLine($\"[GrpcService:" + vmName + "] Error in HandleSetOperation: {ex}\");");
        sb.AppendLine("        }");
        sb.AppendLine("        ");
        sb.AppendLine("        return response;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    private {protoNs}.UpdatePropertyValueResponse HandleCollectionUpdate(object target, System.Reflection.PropertyInfo propertyInfo, {protoNs}.UpdatePropertyValueRequest request)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var response = new {protoNs}.UpdatePropertyValueResponse();");
        sb.AppendLine("        ");
        sb.AppendLine("        var collection = propertyInfo.GetValue(target);");
        sb.AppendLine("        if (collection == null)");
        sb.AppendLine("        {");
        sb.AppendLine("            response.Success = false;");
        sb.AppendLine("            response.ErrorMessage = $\"Collection property '{propertyInfo.Name}' is null\";");
        sb.AppendLine("            return response;");
        sb.AppendLine("        }");
        sb.AppendLine("        ");
        sb.AppendLine("        // Handle dictionary updates");
        sb.AppendLine("        if (collection is System.Collections.IDictionary dict && !string.IsNullOrEmpty(request.CollectionKey))");
        sb.AppendLine("        {");
        sb.AppendLine("            var keyType = propertyInfo.PropertyType.GetGenericArguments()[0];");
        sb.AppendLine("            var valueType = propertyInfo.PropertyType.GetGenericArguments()[1];");
        sb.AppendLine("            ");
        sb.AppendLine("            var convertedKey = ConvertStringToTargetType(request.CollectionKey, keyType);");
        sb.AppendLine("            if (!convertedKey.Success)");
        sb.AppendLine("            {");
        sb.AppendLine("                response.Success = false;");
        sb.AppendLine("                response.ErrorMessage = $\"Failed to convert key '{request.CollectionKey}': {convertedKey.ErrorMessage}\";");
        sb.AppendLine("                return response;");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            var convertedValue = ConvertAnyToTargetType(request.NewValue, valueType);");
        sb.AppendLine("            if (!convertedValue.Success)");
        sb.AppendLine("            {");
        sb.AppendLine("                response.Success = false;");
        sb.AppendLine("                response.ErrorMessage = $\"Failed to convert value: {convertedValue.ErrorMessage}\";");
        sb.AppendLine("                return response;");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            // Store old value if key exists");
        sb.AppendLine("            if (convertedKey.Value != null && dict.Contains(convertedKey.Value)) response.OldValue = PackToAny(dict[convertedKey.Value]);");
        sb.AppendLine("            ");
        sb.AppendLine("            dict[convertedKey.Value!] = convertedValue.Value;");
        sb.AppendLine("            response.Success = true;");
        sb.AppendLine("            Debug.WriteLine($\"[GrpcService:" + vmName + "] Updated dictionary key '{convertedKey.Value}' to '{convertedValue.Value}'\");");
        sb.AppendLine("        }");
        sb.AppendLine("        // Handle list/array updates");
        sb.AppendLine("        else if (collection is System.Collections.IList list && request.ArrayIndex >= 0)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (request.ArrayIndex >= list.Count)");
        sb.AppendLine("            {");
        sb.AppendLine("                response.Success = false;");
        sb.AppendLine("                response.ErrorMessage = $\"Array index {request.ArrayIndex} is out of bounds (count: {list.Count})\";");
        sb.AppendLine("                return response;");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            var elementType = propertyInfo.PropertyType.GetGenericArguments()[0];");
        sb.AppendLine("            var convertedValue = ConvertAnyToTargetType(request.NewValue, elementType);");
        sb.AppendLine("            ");
        sb.AppendLine("            if (!convertedValue.Success)");
        sb.AppendLine("            {");
        sb.AppendLine("                response.Success = false;");
        sb.AppendLine("                response.ErrorMessage = convertedValue.ErrorMessage;");
        sb.AppendLine("                return response;");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            // Store old value");
        sb.AppendLine("            response.OldValue = PackToAny(list[request.ArrayIndex]);");
        sb.AppendLine("            ");
        sb.AppendLine("            list[request.ArrayIndex] = convertedValue.Value;");
        sb.AppendLine("            response.Success = true;");
        sb.AppendLine("            Debug.WriteLine($\"[GrpcService:" + vmName + "] Updated array index {request.ArrayIndex} to '{convertedValue.Value}'\");");
        sb.AppendLine("        }");
        sb.AppendLine("        else");
        sb.AppendLine("        {");
        sb.AppendLine("            response.Success = false;");
        sb.AppendLine("            response.ErrorMessage = \"Unsupported collection operation or missing index/key\";");
        sb.AppendLine("        }");
        sb.AppendLine("        ");
        sb.AppendLine("        return response;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    // Helper methods for other operations");
        sb.AppendLine($"    private {protoNs}.UpdatePropertyValueResponse HandleAddOperation({protoNs}.UpdatePropertyValueRequest request, string propertyPath)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var response = new {protoNs}.UpdatePropertyValueResponse();");
        sb.AppendLine("        response.Success = false;");
        sb.AppendLine("        response.ErrorMessage = \"Add operation not yet implemented\";");
        sb.AppendLine("        return response;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    private {protoNs}.UpdatePropertyValueResponse HandleRemoveOperation({protoNs}.UpdatePropertyValueRequest request, string propertyPath)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var response = new {protoNs}.UpdatePropertyValueResponse();");
        sb.AppendLine("        response.Success = false;");
        sb.AppendLine("        response.ErrorMessage = \"Remove operation not yet implemented\";");
        sb.AppendLine("        return response;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    private {protoNs}.UpdatePropertyValueResponse HandleClearOperation({protoNs}.UpdatePropertyValueRequest request, string propertyPath)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var response = new {protoNs}.UpdatePropertyValueResponse();");
        sb.AppendLine("        response.Success = false;");
        sb.AppendLine("        response.ErrorMessage = \"Clear operation not yet implemented\";");
        sb.AppendLine("        return response;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    private {protoNs}.UpdatePropertyValueResponse HandleInsertOperation({protoNs}.UpdatePropertyValueRequest request, string propertyPath)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var response = new {protoNs}.UpdatePropertyValueResponse();");
        sb.AppendLine("        response.Success = false;");
        sb.AppendLine("        response.ErrorMessage = \"Insert operation not yet implemented\";");
        sb.AppendLine("        return response;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private (bool Success, object? Value, string ErrorMessage) ConvertAnyToTargetType(Google.Protobuf.WellKnownTypes.Any anyValue, System.Type targetType)");
        sb.AppendLine("    {");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine("            if (anyValue.Is(StringValue.Descriptor) && targetType == typeof(string))");
        sb.AppendLine("                return (true, anyValue.Unpack<StringValue>().Value, \"\");");
        sb.AppendLine("            if (anyValue.Is(Int32Value.Descriptor) && targetType == typeof(int))");
        sb.AppendLine("                return (true, anyValue.Unpack<Int32Value>().Value, \"\");");
        sb.AppendLine("            if (anyValue.Is(Int64Value.Descriptor) && targetType == typeof(long))");
        sb.AppendLine("                return (true, anyValue.Unpack<Int64Value>().Value, \"\");");
        sb.AppendLine("            if (anyValue.Is(UInt32Value.Descriptor) && targetType == typeof(uint))");
        sb.AppendLine("                return (true, anyValue.Unpack<UInt32Value>().Value, \"\");");
        sb.AppendLine("            if (anyValue.Is(FloatValue.Descriptor) && targetType == typeof(float))");
        sb.AppendLine("                return (true, anyValue.Unpack<FloatValue>().Value, \"\");");
        sb.AppendLine("            if (anyValue.Is(DoubleValue.Descriptor) && targetType == typeof(double))");
        sb.AppendLine("                return (true, anyValue.Unpack<DoubleValue>().Value, \"\");");
        sb.AppendLine("            if (anyValue.Is(BoolValue.Descriptor) && targetType == typeof(bool))");
        sb.AppendLine("                return (true, anyValue.Unpack<BoolValue>().Value, \"\");");
        sb.AppendLine("            ");
        sb.AppendLine("            // Handle enum types");
        sb.AppendLine("            if (targetType.IsEnum && anyValue.Is(Int32Value.Descriptor))");
        sb.AppendLine("            {");
        sb.AppendLine("                var enumValue = anyValue.Unpack<Int32Value>().Value;");
        sb.AppendLine("                if (System.Enum.IsDefined(targetType, enumValue))");
        sb.AppendLine("                    return (true, System.Enum.ToObject(targetType, enumValue), \"\");");
        sb.AppendLine("                else");
        sb.AppendLine("                    return (false, null, $\"Invalid enum value {enumValue} for type {targetType.Name}\");");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            return (false, null, $\"Cannot convert {anyValue.TypeUrl} to {targetType.Name}\");");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine("            return (false, null, $\"Conversion error: {ex.Message}\");");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private (bool Success, object? Value, string ErrorMessage) ConvertStringToTargetType(string stringValue, System.Type targetType)");
        sb.AppendLine("    {");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine("            if (targetType == typeof(string))");
        sb.AppendLine("                return (true, stringValue, \"\");");
        sb.AppendLine("            if (targetType == typeof(int) && int.TryParse(stringValue, out var intVal))");
        sb.AppendLine("                return (true, intVal, \"\");");
        sb.AppendLine("            if (targetType == typeof(long) && long.TryParse(stringValue, out var longVal))");
        sb.AppendLine("                return (true, longVal, \"\");");
        sb.AppendLine("            if (targetType == typeof(bool) && bool.TryParse(stringValue, out var boolVal))");
        sb.AppendLine("                return (true, boolVal, \"\");");
        sb.AppendLine("            if (targetType == typeof(double) && double.TryParse(stringValue, out var doubleVal))");
        sb.AppendLine("                return (true, doubleVal, \"\");");
        sb.AppendLine("            if (targetType == typeof(float) && float.TryParse(stringValue, out var floatVal))");
        sb.AppendLine("                return (true, floatVal, \"\");");
        sb.AppendLine("            ");
        sb.AppendLine("            // Handle enum types");
        sb.AppendLine("            if (targetType.IsEnum)");
        sb.AppendLine("            {");
        sb.AppendLine("                if (System.Enum.TryParse(targetType, stringValue, true, out var enumVal))");
        sb.AppendLine("                    return (true, enumVal, \"\");");
        sb.AppendLine("                else");
        sb.AppendLine("                    return (false, null, $\"'{stringValue}' is not a valid value for enum {targetType.Name}\");");
        sb.AppendLine("            }");
        sb.AppendLine("            ");
        sb.AppendLine("            return (false, null, $\"Cannot convert '{stringValue}' to {targetType.Name}\");");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine("            return (false, null, $\"Conversion error: {ex.Message}\");");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private async void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)");
        sb.AppendLine("    {");
        sb.AppendLine("        Debug.WriteLine(\"[GrpcService:" + vmName + "] PropertyChanged event fired for property: \" + (e.PropertyName ?? \"<null>\"));");
        sb.AppendLine("        Debug.WriteLine(\"[GrpcService:" + vmName + "] Current subscriber count: \" + _subscriberChannels.Count);");
        sb.AppendLine("        if (string.IsNullOrEmpty(e.PropertyName)) return;");
        sb.AppendLine("        object? newValue = null;");
        sb.AppendLine("        try { newValue = sender?.GetType().GetProperty(e.PropertyName)?.GetValue(sender); }");
        sb.AppendLine("        catch (Exception ex) { Debug.WriteLine(\"[GrpcService:" + vmName + "] Error getting property value for \" + e.PropertyName + \": \" + ex.Message); return; }");
        sb.AppendLine("        Debug.WriteLine(\"[GrpcService:" + vmName + "] Property \" + e.PropertyName + \" changed to: \" + (newValue?.ToString() ?? \"<null>\"));");
        sb.AppendLine();
        sb.AppendLine($"        var notification = new {protoNs}.PropertyChangeNotification ");
        sb.AppendLine("        { ");
        sb.AppendLine("            PropertyName = e.PropertyName,");
        sb.AppendLine("            PropertyPath = e.PropertyName, // For simple properties, path equals name");
        sb.AppendLine("            ChangeType = \"property\" // Can be enhanced to detect collection changes");
        sb.AppendLine("        };");
        sb.AppendLine("        notification.NewValue = PackToAny(newValue);");
        sb.AppendLine("        Debug.WriteLine(\"[GrpcService:" + vmName + "] Created notification with TypeUrl: \" + (notification.NewValue?.TypeUrl ?? \"<null>\"));");
        sb.AppendLine();
        sb.AppendLine("        int successfulWrites = 0;");
        sb.AppendLine("        foreach (var channelWriter in _subscriberChannels.Values.Select(c => c.Writer))");
        sb.AppendLine("        {");
        sb.AppendLine("            try { ");
        sb.AppendLine("                await channelWriter.WriteAsync(notification); ");
        sb.AppendLine("                successfulWrites++;");
        sb.AppendLine("                Debug.WriteLine(\"[GrpcService:" + vmName + "] Successfully wrote notification to subscriber channel\");");
        sb.AppendLine("            }");
        sb.AppendLine("            catch (ChannelClosedException) { Debug.WriteLine(\"[GrpcService:" + vmName + "] Channel closed for a subscriber, cannot write notification for '\" + e.PropertyName + \"'. Subscriber likely disconnected.\"); }");
        sb.AppendLine("            catch (Exception ex) { Debug.WriteLine(\"[GrpcService:" + vmName + "] Error writing to subscriber channel for '\" + e.PropertyName + \"': \" + ex.Message); }");
        sb.AppendLine("        }");
        sb.AppendLine("        Debug.WriteLine(\"[GrpcService:" + vmName + "] Property change notification sent to \" + successfulWrites + \" subscribers\");");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private static Any PackToAny(object? value)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (value == null) return Any.Pack(new Empty());");
        sb.AppendLine("        switch (value)");
        sb.AppendLine("        {");
        sb.AppendLine("            case string s: return Any.Pack(new StringValue { Value = s });");
        sb.AppendLine("            case int i: return Any.Pack(new Int32Value { Value = i });");
        sb.AppendLine("            case uint ui: return Any.Pack(new UInt32Value { Value = ui });");
        sb.AppendLine("            case bool b: return Any.Pack(new BoolValue { Value = b });");
        sb.AppendLine("            case double d: return Any.Pack(new DoubleValue { Value = d });");
        sb.AppendLine("            case float f: return Any.Pack(new FloatValue { Value = f });");
        sb.AppendLine("            case long l: return Any.Pack(new Int64Value { Value = l });");
        sb.AppendLine("            case DateTime dt: return Any.Pack(Timestamp.FromDateTime(dt.ToUniversalTime()));");
        sb.AppendLine("            case char c: return Any.Pack(new StringValue { Value = c.ToString() });");
        sb.AppendLine("            case Half h: return Any.Pack(new FloatValue { Value = (float)h });");
        sb.AppendLine("            case Guid g: return Any.Pack(new StringValue { Value = g.ToString() });");
        sb.AppendLine("            case global::System.Enum e: return Any.Pack(new Int32Value { Value = Convert.ToInt32(e) });");
        sb.AppendLine("        }");
        sb.AppendLine("        if (value is IDictionary dict)");
        sb.AppendLine("        {");
        sb.AppendLine("            var sv = new Struct();");
        sb.AppendLine("            foreach (DictionaryEntry entry in dict)");
        sb.AppendLine("                sv.Fields[entry.Key?.ToString() ?? string.Empty] = ToValue(entry.Value);");
        sb.AppendLine("            return Any.Pack(sv);");
        sb.AppendLine("        }");
        sb.AppendLine("        if (value is IEnumerable enumerable && value is not string)");
        sb.AppendLine("        {");
        sb.AppendLine("            var lv = new ListValue();");
        sb.AppendLine("            foreach (var item in enumerable)");
        sb.AppendLine("                lv.Values.Add(ToValue(item));");
        sb.AppendLine("            return Any.Pack(lv);");
        sb.AppendLine("        }");
        sb.AppendLine("        var structValue = new Struct();");
        sb.AppendLine("        foreach (var prop in value.GetType().GetProperties())");
        sb.AppendLine("            structValue.Fields[prop.Name] = ToValue(prop.GetValue(value));");
        sb.AppendLine("        return Any.Pack(structValue);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private static Value ToValue(object? value)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (value == null) return Value.ForNull();");
        sb.AppendLine("        switch (value)");
        sb.AppendLine("        {");
        sb.AppendLine("            case string s: return Value.ForString(s);");
        sb.AppendLine("            case bool b: return Value.ForBool(b);");
        sb.AppendLine("            case int i: return Value.ForNumber(i);");
        sb.AppendLine("            case uint ui: return Value.ForNumber(ui);");
        sb.AppendLine("            case long l: return Value.ForNumber(l);");
        sb.AppendLine("            case double d: return Value.ForNumber(d);");
        sb.AppendLine("            case float f: return Value.ForNumber(f);");
        sb.AppendLine("            case char c: return Value.ForString(c.ToString());");
        sb.AppendLine("            case Half h: return Value.ForNumber((double)(float)h);");
        sb.AppendLine("            case Guid g: return Value.ForString(g.ToString());");
        sb.AppendLine("            case global::System.Enum e: return Value.ForNumber(Convert.ToInt32(e));");
        sb.AppendLine("            case DateTime dt: return Value.ForString(dt.ToUniversalTime().ToString(\"o\"));");
        sb.AppendLine("        }");
        sb.AppendLine("        if (value is IDictionary dict)");
        sb.AppendLine("        {");
        sb.AppendLine("            var sv = new Struct();");
        sb.AppendLine("            foreach (DictionaryEntry entry in dict)");
        sb.AppendLine("                sv.Fields[entry.Key?.ToString() ?? string.Empty] = ToValue(entry.Value);");
        sb.AppendLine("            return Value.ForStruct(sv);");
        sb.AppendLine("        }");
        sb.AppendLine("        if (value is IEnumerable enumerable && value is not string)");
        sb.AppendLine("        {");
        sb.AppendLine("            var lv = new List<Value>();");
        sb.AppendLine("            foreach (var item in enumerable)");
        sb.AppendLine("                lv.Add(ToValue(item));");
        sb.AppendLine("            return Value.ForList(lv.ToArray());");
        sb.AppendLine("        }");
        sb.AppendLine("        var structValue = new Struct();");
        sb.AppendLine("        foreach (var prop in value.GetType().GetProperties())");
        sb.AppendLine("            structValue.Fields[prop.Name] = ToValue(prop.GetValue(value));");
        sb.AppendLine("        return Value.ForStruct(structValue);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

}
